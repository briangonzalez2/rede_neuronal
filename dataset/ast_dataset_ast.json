[
  {
    "code": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(fkjek):\n    wun = len(fkjek)\n    for cfn in range(wun):\n        for cvw in range(0, wun - cfn - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(eubzt):\n    nau = len(eubzt)\n    for ccs in range(nau):\n        for rvi in range(0, nau - ccs - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(rupcr):\n    nlh = len(rupcr)\n    for hrk in range(nlh):\n        for xto in range(0, nlh - hrk - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(bbowa):\n    tkn = len(bbowa)\n    for vym in range(tkn):\n        for qyd in range(0, tkn - vym - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(wtzzx):\n    uqs = len(wtzzx)\n    for tdx in range(uqs):\n        for rfr in range(0, uqs - tdx - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(oiagc):\n    uxx = len(oiagc)\n    for rtw in range(uxx):\n        for yvo in range(0, uxx - rtw - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(pewao):\n    gin = len(pewao)\n    for yal in range(gin):\n        for anp in range(0, gin - yal - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(qakfz):\n    rql = len(qakfz)\n    for pbr in range(rql):\n        for gmb in range(0, rql - pbr - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(uxksk):\n    htl = len(uxksk)\n    for dia in range(htl):\n        for sbe in range(0, htl - dia - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(dlnyd):\n    mcs = len(dlnyd)\n    for whj in range(mcs):\n        for xgd in range(0, mcs - whj - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(azveo):\n    sjw = len(azveo)\n    for sxk in range(sjw):\n        for qva in range(0, sjw - sxk - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(fakbc):\n    sen = len(fakbc)\n    for zfq in range(sen):\n        for kwm in range(0, sen - zfq - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(lcttw):\n    mwk = len(lcttw)\n    for znj in range(mwk):\n        for aio in range(0, mwk - znj - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(dgnbq):\n    dao = len(dgnbq)\n    for egf in range(dao):\n        for xpk in range(0, dao - egf - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(rukmt):\n    ejd = len(rukmt)\n    for fnw in range(ejd):\n        for wnb in range(0, ejd - fnw - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(uaohj):\n    zbs = len(uaohj)\n    for iak in range(zbs):\n        for crl in range(0, zbs - iak - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(pffvu):\n    wyj = len(pffvu)\n    for boa in range(wyj):\n        for wst in range(0, wyj - boa - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(cntaf):\n    zbb = len(cntaf)\n    for oqb in range(zbb):\n        for dhd in range(0, zbb - oqb - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(zzsxc):\n    ktw = len(zzsxc)\n    for efu in range(ktw):\n        for trq in range(0, ktw - efu - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(bfxfy):\n    qoj = len(bfxfy)\n    for ogb in range(qoj):\n        for xsq in range(0, qoj - ogb - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(wygxr):\n    nyi = len(wygxr)\n    for ehp in range(nyi):\n        for cai in range(0, nyi - ehp - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(lrzpa):\n    snf = len(lrzpa)\n    for dqe in range(snf):\n        for mly in range(0, snf - dqe - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(suray):\n    kkv = len(suray)\n    for ejf in range(kkv):\n        for rpq in range(0, kkv - ejf - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(wdzlc):\n    ran = len(wdzlc)\n    for sua in range(ran):\n        for kca in range(0, ran - sua - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(uziai):\n    msr = len(uziai)\n    for ida in range(msr):\n        for jer in range(0, msr - ida - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(jaoro):\n    gjn = len(jaoro)\n    for gtl in range(gjn):\n        for bbn in range(0, gjn - gtl - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(fopsb):\n    hwz = len(fopsb)\n    for upj in range(hwz):\n        for axk in range(0, hwz - upj - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(poizv):\n    nzq = len(poizv)\n    for pxm in range(nzq):\n        for yyb in range(0, nzq - pxm - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(pludb):\n    rxj = len(pludb)\n    for xiy in range(rxj):\n        for rcg in range(0, rxj - xiy - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(awefr):\n    dbr = len(awefr)\n    for frw in range(dbr):\n        for rgs in range(0, dbr - frw - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(ddiou):\n    urv = len(ddiou)\n    for sts in range(urv):\n        for ffk in range(0, urv - sts - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(hmkcb):\n    jcg = len(hmkcb)\n    for bow in range(jcg):\n        for uzo in range(0, jcg - bow - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(iyuec):\n    mxy = len(iyuec)\n    for byr in range(mxy):\n        for npv in range(0, mxy - byr - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(wljfj):\n    osv = len(wljfj)\n    for kgl in range(osv):\n        for hbj in range(0, osv - kgl - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(wdodw):\n    mbc = len(wdodw)\n    for ntw in range(mbc):\n        for pad in range(0, mbc - ntw - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(fowdt):\n    fji = len(fowdt)\n    for otr in range(fji):\n        for unx in range(0, fji - otr - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(ttjip):\n    bpd = len(ttjip)\n    for pjz in range(bpd):\n        for ipo in range(0, bpd - pjz - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(znpao):\n    rlo = len(znpao)\n    for guc in range(rlo):\n        for jsm in range(0, rlo - guc - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(mlzik):\n    ekk = len(mlzik)\n    for tya in range(ekk):\n        for rgz in range(0, ekk - tya - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(wsazu):\n    kiy = len(wsazu)\n    for erx in range(kiy):\n        for hbv in range(0, kiy - erx - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(cqdye):\n    jqv = len(cqdye)\n    for wln in range(jqv):\n        for xdb in range(0, jqv - wln - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(xqkmf):\n    qmi = len(xqkmf)\n    for hmy in range(qmi):\n        for lxw in range(0, qmi - hmy - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(xsryh):\n    oxp = len(xsryh)\n    for yie in range(oxp):\n        for pmu in range(0, oxp - yie - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(upwmg):\n    ooc = len(upwmg)\n    for uhe in range(ooc):\n        for fcj in range(0, ooc - uhe - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(ynnjw):\n    lwi = len(ynnjw)\n    for oln in range(lwi):\n        for qzv in range(0, lwi - oln - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(xnozc):\n    ztz = len(xnozc)\n    for vpg in range(ztz):\n        for tnq in range(0, ztz - vpg - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(cyefa):\n    hxp = len(cyefa)\n    for smw in range(hxp):\n        for cnd in range(0, hxp - smw - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(cwesm):\n    thh = len(cwesm)\n    for ikm in range(thh):\n        for hcf in range(0, thh - ikm - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(olffm):\n    zpn = len(olffm)\n    for xua in range(zpn):\n        for zbq in range(0, zpn - xua - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(nxymi):\n    npi = len(nxymi)\n    for gdw in range(npi):\n        for nma in range(0, npi - gdw - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(ohjpj):\n    dio = len(ohjpj)\n    for mxr in range(dio):\n        for qtc in range(0, dio - mxr - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(nqytu):\n    kjf = len(nqytu)\n    for tam in range(kjf):\n        for zgm in range(0, kjf - tam - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(dxbrt):\n    ewf = len(dxbrt)\n    for mso in range(ewf):\n        for iwb in range(0, ewf - mso - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(gdlgl):\n    vtv = len(gdlgl)\n    for gwc in range(vtv):\n        for yut in range(0, vtv - gwc - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(hmyvl):\n    nmy = len(hmyvl)\n    for hfk in range(nmy):\n        for utq in range(0, nmy - hfk - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(bvxjj):\n    mnn = len(bvxjj)\n    for ggd in range(mnn):\n        for hdj in range(0, mnn - ggd - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(nyiwg):\n    cli = len(nyiwg)\n    for tvv in range(cli):\n        for xsc in range(0, cli - tvv - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(uteun):\n    tgj = len(uteun)\n    for oid in range(tgj):\n        for abe in range(0, tgj - oid - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(spwsu):\n    lfb = len(spwsu)\n    for bjj in range(lfb):\n        for qow in range(0, lfb - bjj - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(mdjjq):\n    aqq = len(mdjjq)\n    for mct in range(aqq):\n        for aff in range(0, aqq - mct - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(nvrbo):\n    rro = len(nvrbo)\n    for qpt in range(rro):\n        for ezw in range(0, rro - qpt - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(ptbdc):\n    dii = len(ptbdc)\n    for gaa in range(dii):\n        for tjw in range(0, dii - gaa - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(oqcos):\n    fvf = len(oqcos)\n    for hkg in range(fvf):\n        for ovc in range(0, fvf - hkg - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(imhji):\n    pbz = len(imhji)\n    for wye in range(pbz):\n        for mev in range(0, pbz - wye - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(mgirg):\n    ngp = len(mgirg)\n    for erx in range(ngp):\n        for xlp in range(0, ngp - erx - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(cugav):\n    jca = len(cugav)\n    for bjm in range(jca):\n        for cwl in range(0, jca - bjm - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(xtunv):\n    hqx = len(xtunv)\n    for pba in range(hqx):\n        for itr in range(0, hqx - pba - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(sdcve):\n    dru = len(sdcve)\n    for bmz in range(dru):\n        for inb in range(0, dru - bmz - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(jbbvu):\n    abr = len(jbbvu)\n    for yct in range(abr):\n        for tkh in range(0, abr - yct - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(znnni):\n    vkn = len(znnni)\n    for pxb in range(vkn):\n        for jdm in range(0, vkn - pxb - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(uxgwj):\n    qac = len(uxgwj)\n    for dfu in range(qac):\n        for zyn in range(0, qac - dfu - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(pmzew):\n    poe = len(pmzew)\n    for nfj in range(poe):\n        for cut in range(0, poe - nfj - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(nukqt):\n    hjt = len(nukqt)\n    for niq in range(hjt):\n        for jhn in range(0, hjt - niq - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(eweel):\n    xex = len(eweel)\n    for xuf in range(xex):\n        for jix in range(0, xex - xuf - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(kkopy):\n    yud = len(kkopy)\n    for yzb in range(yud):\n        for swi in range(0, yud - yzb - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(onabb):\n    hqu = len(onabb)\n    for ckk in range(hqu):\n        for dgm in range(0, hqu - ckk - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(qmxrf):\n    dvw = len(qmxrf)\n    for aaz in range(dvw):\n        for ncr in range(0, dvw - aaz - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(ycvuj):\n    bch = len(ycvuj)\n    for twr in range(bch):\n        for mer in range(0, bch - twr - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(nvthk):\n    kwm = len(nvthk)\n    for eou in range(kwm):\n        for kwf in range(0, kwm - eou - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(uibcu):\n    aqo = len(uibcu)\n    for uub in range(aqo):\n        for pwz in range(0, aqo - uub - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(qqtsv):\n    rgo = len(qqtsv)\n    for uif in range(rgo):\n        for cbi in range(0, rgo - uif - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(mathw):\n    woe = len(mathw)\n    for izz in range(woe):\n        for psu in range(0, woe - izz - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(pbvwp):\n    qtd = len(pbvwp)\n    for fhg in range(qtd):\n        for cgp in range(0, qtd - fhg - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(jlirf):\n    dqs = len(jlirf)\n    for jpk in range(dqs):\n        for pby in range(0, dqs - jpk - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(cvoqk):\n    lnt = len(cvoqk)\n    for tyy in range(lnt):\n        for ons in range(0, lnt - tyy - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(qkcut):\n    idm = len(qkcut)\n    for muk in range(idm):\n        for oke in range(0, idm - muk - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(yijuk):\n    eya = len(yijuk)\n    for jkc in range(eya):\n        for rmc in range(0, eya - jkc - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(wgixd):\n    vgd = len(wgixd)\n    for plw in range(vgd):\n        for qst in range(0, vgd - plw - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(nldau):\n    jdx = len(nldau)\n    for vby in range(jdx):\n        for yle in range(0, jdx - vby - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(msqpn):\n    paj = len(msqpn)\n    for dcw in range(paj):\n        for sgt in range(0, paj - dcw - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(fknus):\n    ddf = len(fknus)\n    for rpc in range(ddf):\n        for box in range(0, ddf - rpc - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(sqzon):\n    blh = len(sqzon)\n    for ncw in range(blh):\n        for cdx in range(0, blh - ncw - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(udgzv):\n    bff = len(udgzv)\n    for log in range(bff):\n        for ygn in range(0, bff - log - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(ltjad):\n    epf = len(ltjad)\n    for zsr in range(epf):\n        for ycr in range(0, epf - zsr - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(vsxsx):\n    gjw = len(vsxsx)\n    for rpf in range(gjw):\n        for srt in range(0, gjw - rpf - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(jyjdm):\n    msx = len(jyjdm)\n    for duq in range(msx):\n        for xsw in range(0, msx - duq - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(nbgqv):\n    ddb = len(nbgqv)\n    for mwz in range(ddb):\n        for eja in range(0, ddb - mwz - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(xjnau):\n    yeo = len(xjnau)\n    for rea in range(yeo):\n        for jjc in range(0, yeo - rea - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(mnqtw):\n    vdo = len(mnqtw)\n    for bvs in range(vdo):\n        for uiq in range(0, vdo - bvs - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(baqck):\n    qnu = len(baqck)\n    for yjx in range(qnu):\n        for lae in range(0, qnu - yjx - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(dnixg):\n    kij = len(dnixg)\n    for dth in range(kij):\n        for rrp in range(0, kij - dth - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(jsgyr):\n    uuq = len(jsgyr)\n    for zzo in range(uuq):\n        for aue in range(0, uuq - zzo - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(yydum):\n    mgc = len(yydum)\n    for wrw in range(mgc):\n        for ome in range(0, mgc - wrw - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(ayspo):\n    dbg = len(ayspo)\n    for soe in range(dbg):\n        for ing in range(0, dbg - soe - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(ixzjf):\n    lsj = len(ixzjf)\n    for zng in range(lsj):\n        for ikw in range(0, lsj - zng - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(hxxih):\n    rmj = len(hxxih)\n    for glv in range(rmj):\n        for iio in range(0, rmj - glv - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(dtfle):\n    bzo = len(dtfle)\n    for kxi in range(bzo):\n        for tsf in range(0, bzo - kxi - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(lcpfn):\n    udw = len(lcpfn)\n    for fkq in range(udw):\n        for cuy in range(0, udw - fkq - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(ojkhw):\n    tyv = len(ojkhw)\n    for hcm in range(tyv):\n        for mjx in range(0, tyv - hcm - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(myfyn):\n    isc = len(myfyn)\n    for udz in range(isc):\n        for iwn in range(0, isc - udz - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(qjnmo):\n    gju = len(qjnmo)\n    for ubw in range(gju):\n        for ylz in range(0, gju - ubw - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(uolya):\n    jmn = len(uolya)\n    for hcb in range(jmn):\n        for loj in range(0, jmn - hcb - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(dwitv):\n    csl = len(dwitv)\n    for eok in range(csl):\n        for vyd in range(0, csl - eok - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(xzcoj):\n    jcp = len(xzcoj)\n    for taw in range(jcp):\n        for mvg in range(0, jcp - taw - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(iwogz):\n    izl = len(iwogz)\n    for olm in range(izl):\n        for nuk in range(0, izl - olm - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(vminj):\n    xzg = len(vminj)\n    for hde in range(xzg):\n        for jbu in range(0, xzg - hde - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(rrdjl):\n    cqi = len(rrdjl)\n    for rsx in range(cqi):\n        for uvb in range(0, cqi - rsx - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(sbsyw):\n    uuy = len(sbsyw)\n    for xxl in range(uuy):\n        for why in range(0, uuy - xxl - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(lhfbw):\n    nwi = len(lhfbw)\n    for cfk in range(nwi):\n        for exo in range(0, nwi - cfk - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(akwau):\n    hou = len(akwau)\n    for ecs in range(hou):\n        for mfp in range(0, hou - ecs - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(pcqvl):\n    cki = len(pcqvl)\n    for hhm in range(cki):\n        for ydf in range(0, cki - hhm - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(cemgg):\n    blq = len(cemgg)\n    for gol in range(blq):\n        for gbj in range(0, blq - gol - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(cvqug):\n    fjt = len(cvqug)\n    for flq in range(fjt):\n        for igt in range(0, fjt - flq - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(eraii):\n    rax = len(eraii)\n    for irz in range(rax):\n        for twe in range(0, rax - irz - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(vhayd):\n    myw = len(vhayd)\n    for omm in range(myw):\n        for ofq in range(0, myw - omm - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(bokit):\n    dpn = len(bokit)\n    for jpv in range(dpn):\n        for jmk in range(0, dpn - jpv - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(ugxzm):\n    msa = len(ugxzm)\n    for bet in range(msa):\n        for utd in range(0, msa - bet - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(jtoee):\n    fto = len(jtoee)\n    for yoh in range(fto):\n        for scz in range(0, fto - yoh - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(mvjym):\n    ehb = len(mvjym)\n    for yqp in range(ehb):\n        for ucp in range(0, ehb - yqp - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(szjay):\n    lcs = len(szjay)\n    for fpe in range(lcs):\n        for niz in range(0, lcs - fpe - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(nxdkg):\n    hbn = len(nxdkg)\n    for jjf in range(hbn):\n        for rcx in range(0, hbn - jjf - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(mrhpj):\n    qhr = len(mrhpj)\n    for rvw in range(qhr):\n        for sjl in range(0, qhr - rvw - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def bubble_sort(uqtei):\n    pfj = len(uqtei)\n    for sml in range(pfj):\n        for lhx in range(0, pfj - sml - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    spij = 0\n    mwpk = len(ikbqj) - 1\n    while spij <= mwpk:\n        wiht = (low + high) // 2\n        if arr[mid] == uxi:\n            return mid\n        elif arr[mid] < uxi:\n            spij = wiht + 1\n        else:\n            mwpk = wiht - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    lhro = 0\n    xbol = len(iaxok) - 1\n    while lhro <= xbol:\n        cngh = (low + high) // 2\n        if arr[mid] == nsk:\n            return mid\n        elif arr[mid] < nsk:\n            lhro = cngh + 1\n        else:\n            xbol = cngh - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    ycub = 0\n    tfug = len(sailz) - 1\n    while ycub <= tfug:\n        gvrc = (low + high) // 2\n        if arr[mid] == gkc:\n            return mid\n        elif arr[mid] < gkc:\n            ycub = gvrc + 1\n        else:\n            tfug = gvrc - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    mplp = 0\n    easr = len(hfbig) - 1\n    while mplp <= easr:\n        fnmt = (low + high) // 2\n        if arr[mid] == uif:\n            return mid\n        elif arr[mid] < uif:\n            mplp = fnmt + 1\n        else:\n            easr = fnmt - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    xlvw = 0\n    ogvd = len(xkpqc) - 1\n    while xlvw <= ogvd:\n        ilhl = (low + high) // 2\n        if arr[mid] == nie:\n            return mid\n        elif arr[mid] < nie:\n            xlvw = ilhl + 1\n        else:\n            ogvd = ilhl - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    muie = 0\n    aixa = len(dutxd) - 1\n    while muie <= aixa:\n        rupd = (low + high) // 2\n        if arr[mid] == yji:\n            return mid\n        elif arr[mid] < yji:\n            muie = rupd + 1\n        else:\n            aixa = rupd - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    sett = 0\n    nkdf = len(teavv) - 1\n    while sett <= nkdf:\n        vjaw = (low + high) // 2\n        if arr[mid] == ngt:\n            return mid\n        elif arr[mid] < ngt:\n            sett = vjaw + 1\n        else:\n            nkdf = vjaw - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    xocy = 0\n    vugc = len(uokrh) - 1\n    while xocy <= vugc:\n        hfqs = (low + high) // 2\n        if arr[mid] == hbo:\n            return mid\n        elif arr[mid] < hbo:\n            xocy = hfqs + 1\n        else:\n            vugc = hfqs - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    gmbq = 0\n    rvye = len(tkvdo) - 1\n    while gmbq <= rvye:\n        jyei = (low + high) // 2\n        if arr[mid] == gwb:\n            return mid\n        elif arr[mid] < gwb:\n            gmbq = jyei + 1\n        else:\n            rvye = jyei - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    rmix = 0\n    ouzs = len(csqyf) - 1\n    while rmix <= ouzs:\n        moof = (low + high) // 2\n        if arr[mid] == tlc:\n            return mid\n        elif arr[mid] < tlc:\n            rmix = moof + 1\n        else:\n            ouzs = moof - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    hdgm = 0\n    rvyj = len(lcfgp) - 1\n    while hdgm <= rvyj:\n        flug = (low + high) // 2\n        if arr[mid] == diw:\n            return mid\n        elif arr[mid] < diw:\n            hdgm = flug + 1\n        else:\n            rvyj = flug - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    hhmi = 0\n    mnax = len(jzdmf) - 1\n    while hhmi <= mnaruh:\n        vncp = (low + high) // 2\n        if arr[mid] == ruh:\n            return mid\n        elif arr[mid] < ruh:\n            hhmi = vncp + 1\n        else:\n            mnax = vncp - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    kmar = 0\n    ejoo = len(qxgiu) - 1\n    while kmar <= ejoo:\n        ktbh = (low + high) // 2\n        if arr[mid] == rjn:\n            return mid\n        elif arr[mid] < rjn:\n            kmar = ktbh + 1\n        else:\n            ejoo = ktbh - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    rcez = 0\n    qfuf = len(sxxmo) - 1\n    while rcez <= qfuf:\n        nhgq = (low + high) // 2\n        if arr[mid] == jox:\n            return mid\n        elif arr[mid] < jox:\n            rcez = nhgq + 1\n        else:\n            qfuf = nhgq - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    clzm = 0\n    quae = len(gxhgx) - 1\n    while clzm <= quae:\n        pskf = (low + high) // 2\n        if arr[mid] == tii:\n            return mid\n        elif arr[mid] < tii:\n            clzm = pskf + 1\n        else:\n            quae = pskf - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    ploa = 0\n    evro = len(rfmne) - 1\n    while ploa <= evro:\n        mgwt = (low + high) // 2\n        if arr[mid] == stz:\n            return mid\n        elif arr[mid] < stz:\n            ploa = mgwt + 1\n        else:\n            evro = mgwt - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    cvul = 0\n    bthh = len(jwhyc) - 1\n    while cvul <= bthh:\n        fxma = (low + high) // 2\n        if arr[mid] == mgs:\n            return mid\n        elif arr[mid] < mgs:\n            cvul = fxma + 1\n        else:\n            bthh = fxma - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    fqwj = 0\n    uzgi = len(zatwg) - 1\n    while fqwj <= uzgi:\n        ochq = (low + high) // 2\n        if arr[mid] == ryt:\n            return mid\n        elif arr[mid] < ryt:\n            fqwj = ochq + 1\n        else:\n            uzgi = ochq - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    xqct = 0\n    fdtu = len(mczso) - 1\n    while xqct <= fdtu:\n        ktet = (low + high) // 2\n        if arr[mid] == slt:\n            return mid\n        elif arr[mid] < slt:\n            xqct = ktet + 1\n        else:\n            fdtu = ktet - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    vhja = 0\n    kvjt = len(nwgsv) - 1\n    while vhja <= kvjt:\n        dsme = (low + high) // 2\n        if arr[mid] == tdy:\n            return mid\n        elif arr[mid] < tdy:\n            vhja = dsme + 1\n        else:\n            kvjt = dsme - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    jdkt = 0\n    lwwv = len(pkzkx) - 1\n    while jdkt <= lwwv:\n        opxa = (low + high) // 2\n        if arr[mid] == kcx:\n            return mid\n        elif arr[mid] < kcx:\n            jdkt = opxa + 1\n        else:\n            lwwv = opxa - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    cuye = 0\n    vcyd = len(bcynw) - 1\n    while cuye <= vcyd:\n        qlxl = (low + high) // 2\n        if arr[mid] == vic:\n            return mid\n        elif arr[mid] < vic:\n            cuye = qlxl + 1\n        else:\n            vcyd = qlxl - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    nnby = 0\n    nhnz = len(mimdu) - 1\n    while nnby <= nhnz:\n        oqnk = (low + high) // 2\n        if arr[mid] == pon:\n            return mid\n        elif arr[mid] < pon:\n            nnby = oqnk + 1\n        else:\n            nhnz = oqnk - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    vize = 0\n    qzvy = len(qugls) - 1\n    while vize <= qzvy:\n        gpek = (low + high) // 2\n        if arr[mid] == vcb:\n            return mid\n        elif arr[mid] < vcb:\n            vize = gpek + 1\n        else:\n            qzvy = gpek - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    jxhc = 0\n    tsrm = len(dzjog) - 1\n    while jxhc <= tsrm:\n        iuar = (low + high) // 2\n        if arr[mid] == gnb:\n            return mid\n        elif arr[mid] < gnb:\n            jxhc = iuar + 1\n        else:\n            tsrm = iuar - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    zncb = 0\n    umdb = len(bzyfr) - 1\n    while zncb <= umdb:\n        pysv = (low + high) // 2\n        if arr[mid] == jhi:\n            return mid\n        elif arr[mid] < jhi:\n            zncb = pysv + 1\n        else:\n            umdb = pysv - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    ljmw = 0\n    abnp = len(uaprd) - 1\n    while ljmw <= abnp:\n        qajq = (low + high) // 2\n        if arr[mid] == aos:\n            return mid\n        elif arr[mid] < aos:\n            ljmw = qajq + 1\n        else:\n            abnp = qajq - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    gltr = 0\n    ayfr = len(duynj) - 1\n    while gltr <= ayfr:\n        zerc = (low + high) // 2\n        if arr[mid] == rdk:\n            return mid\n        elif arr[mid] < rdk:\n            gltr = zerc + 1\n        else:\n            ayfr = zerc - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    hjiu = 0\n    jfnf = len(chadl) - 1\n    while hjiu <= jfnf:\n        kgoj = (low + high) // 2\n        if arr[mid] == gde:\n            return mid\n        elif arr[mid] < gde:\n            hjiu = kgoj + 1\n        else:\n            jfnf = kgoj - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    fxsi = 0\n    ksxb = len(mnvhh) - 1\n    while fxsi <= ksxb:\n        phsa = (low + high) // 2\n        if arr[mid] == ytw:\n            return mid\n        elif arr[mid] < ytw:\n            fxsi = phsa + 1\n        else:\n            ksxb = phsa - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    hpre = 0\n    ohjb = len(brquc) - 1\n    while hpre <= ohjb:\n        wszt = (low + high) // 2\n        if arr[mid] == vxr:\n            return mid\n        elif arr[mid] < vxr:\n            hpre = wszt + 1\n        else:\n            ohjb = wszt - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    avaf = 0\n    hjgb = len(gewbv) - 1\n    while avaf <= hjgb:\n        xypp = (low + high) // 2\n        if arr[mid] == zro:\n            return mid\n        elif arr[mid] < zro:\n            avaf = xypp + 1\n        else:\n            hjgb = xypp - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    jfnw = 0\n    dpob = len(lfmqs) - 1\n    while jfnw <= dpob:\n        jvtv = (low + high) // 2\n        if arr[mid] == zht:\n            return mid\n        elif arr[mid] < zht:\n            jfnw = jvtv + 1\n        else:\n            dpob = jvtv - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    bfjj = 0\n    szxk = len(idvnb) - 1\n    while bfjj <= szxk:\n        rato = (low + high) // 2\n        if arr[mid] == vbu:\n            return mid\n        elif arr[mid] < vbu:\n            bfjj = rato + 1\n        else:\n            szxk = rato - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    fkrf = 0\n    gjmm = len(zjjoc) - 1\n    while fkrf <= gjmm:\n        lana = (low + high) // 2\n        if arr[mid] == jhy:\n            return mid\n        elif arr[mid] < jhy:\n            fkrf = lana + 1\n        else:\n            gjmm = lana - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    pujp = 0\n    mrrw = len(oauhk) - 1\n    while pujp <= mrrw:\n        tzuj = (low + high) // 2\n        if arr[mid] == lrr:\n            return mid\n        elif arr[mid] < lrr:\n            pujp = tzuj + 1\n        else:\n            mrrw = tzuj - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    kbdp = 0\n    vagm = len(prcha) - 1\n    while kbdp <= vagm:\n        neio = (low + high) // 2\n        if arr[mid] == ade:\n            return mid\n        elif arr[mid] < ade:\n            kbdp = neio + 1\n        else:\n            vagm = neio - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    mnje = 0\n    bxzb = len(lstdm) - 1\n    while mnje <= bxzb:\n        nlla = (low + high) // 2\n        if arr[mid] == cqq:\n            return mid\n        elif arr[mid] < cqq:\n            mnje = nlla + 1\n        else:\n            bxzb = nlla - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    deyn = 0\n    ovtf = len(uuiqz) - 1\n    while deyn <= ovtf:\n        xxsm = (low + high) // 2\n        if arr[mid] == mdl:\n            return mid\n        elif arr[mid] < mdl:\n            deyn = xxsm + 1\n        else:\n            ovtf = xxsm - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    gavt = 0\n    wuyi = len(pllas) - 1\n    while gavt <= wuyi:\n        hqfn = (low + high) // 2\n        if arr[mid] == iwf:\n            return mid\n        elif arr[mid] < iwf:\n            gavt = hqfn + 1\n        else:\n            wuyi = hqfn - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    fyjo = 0\n    qctk = len(ypdbp) - 1\n    while fyjo <= qctk:\n        lcxm = (low + high) // 2\n        if arr[mid] == oxv:\n            return mid\n        elif arr[mid] < oxv:\n            fyjo = lcxm + 1\n        else:\n            qctk = lcxm - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    uvvf = 0\n    twco = len(tlukb) - 1\n    while uvvf <= twco:\n        hhuw = (low + high) // 2\n        if arr[mid] == cfe:\n            return mid\n        elif arr[mid] < cfe:\n            uvvf = hhuw + 1\n        else:\n            twco = hhuw - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    dfbw = 0\n    czks = len(zuwcq) - 1\n    while dfbw <= czks:\n        mkkh = (low + high) // 2\n        if arr[mid] == you:\n            return mid\n        elif arr[mid] < you:\n            dfbw = mkkh + 1\n        else:\n            czks = mkkh - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    mxxx = 0\n    pccp = len(scwvz) - 1\n    while mxxx <= pccp:\n        yqef = (low + high) // 2\n        if arr[mid] == aiw:\n            return mid\n        elif arr[mid] < aiw:\n            mxxx = yqef + 1\n        else:\n            pccp = yqef - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    jyzv = 0\n    ozpm = len(qdzoa) - 1\n    while jyzv <= ozpm:\n        oqxz = (low + high) // 2\n        if arr[mid] == mlw:\n            return mid\n        elif arr[mid] < mlw:\n            jyzv = oqxz + 1\n        else:\n            ozpm = oqxz - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    ribe = 0\n    rvfe = len(gjgua) - 1\n    while ribe <= rvfe:\n        rdpt = (low + high) // 2\n        if arr[mid] == wcm:\n            return mid\n        elif arr[mid] < wcm:\n            ribe = rdpt + 1\n        else:\n            rvfe = rdpt - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    oeso = 0\n    kvfv = len(ssode) - 1\n    while oeso <= kvfv:\n        riij = (low + high) // 2\n        if arr[mid] == ctw:\n            return mid\n        elif arr[mid] < ctw:\n            oeso = riij + 1\n        else:\n            kvfv = riij - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    jkod = 0\n    faax = len(gadxa) - 1\n    while jkod <= faatof:\n        etmu = (low + high) // 2\n        if arr[mid] == tof:\n            return mid\n        elif arr[mid] < tof:\n            jkod = etmu + 1\n        else:\n            faax = etmu - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    ueyl = 0\n    okgw = len(tnuub) - 1\n    while ueyl <= okgw:\n        stpc = (low + high) // 2\n        if arr[mid] == gyn:\n            return mid\n        elif arr[mid] < gyn:\n            ueyl = stpc + 1\n        else:\n            okgw = stpc - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    slsd = 0\n    ovhl = len(imcgy) - 1\n    while slsd <= ovhl:\n        wzxi = (low + high) // 2\n        if arr[mid] == vjz:\n            return mid\n        elif arr[mid] < vjz:\n            slsd = wzxi + 1\n        else:\n            ovhl = wzxi - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    pvva = 0\n    sfgx = len(vihlk) - 1\n    while pvva <= sfgqil:\n        zaau = (low + high) // 2\n        if arr[mid] == qil:\n            return mid\n        elif arr[mid] < qil:\n            pvva = zaau + 1\n        else:\n            sfgx = zaau - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    ktwt = 0\n    rxgi = len(lwgws) - 1\n    while ktwt <= rxgi:\n        bmyy = (low + high) // 2\n        if arr[mid] == sdx:\n            return mid\n        elif arr[mid] < sdx:\n            ktwt = bmyy + 1\n        else:\n            rxgi = bmyy - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    qhfh = 0\n    toyn = len(xckro) - 1\n    while qhfh <= toyn:\n        tidy = (low + high) // 2\n        if arr[mid] == gsa:\n            return mid\n        elif arr[mid] < gsa:\n            qhfh = tidy + 1\n        else:\n            toyn = tidy - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    gefl = 0\n    wmvx = len(mrdgj) - 1\n    while gefl <= wmvigl:\n        qlbi = (low + high) // 2\n        if arr[mid] == igl:\n            return mid\n        elif arr[mid] < igl:\n            gefl = qlbi + 1\n        else:\n            wmvx = qlbi - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    xqir = 0\n    empo = len(jlybr) - 1\n    while xqir <= empo:\n        amwb = (low + high) // 2\n        if arr[mid] == oqz:\n            return mid\n        elif arr[mid] < oqz:\n            xqir = amwb + 1\n        else:\n            empo = amwb - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    sfmr = 0\n    wjfp = len(kbflu) - 1\n    while sfmr <= wjfp:\n        lzih = (low + high) // 2\n        if arr[mid] == xgt:\n            return mid\n        elif arr[mid] < xgt:\n            sfmr = lzih + 1\n        else:\n            wjfp = lzih - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    lklv = 0\n    uboc = len(gekwl) - 1\n    while lklv <= uboc:\n        iued = (low + high) // 2\n        if arr[mid] == kcr:\n            return mid\n        elif arr[mid] < kcr:\n            lklv = iued + 1\n        else:\n            uboc = iued - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    surl = 0\n    idju = len(uempa) - 1\n    while surl <= idju:\n        zepq = (low + high) // 2\n        if arr[mid] == utg:\n            return mid\n        elif arr[mid] < utg:\n            surl = zepq + 1\n        else:\n            idju = zepq - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    ddkd = 0\n    zwkf = len(eyldp) - 1\n    while ddkd <= zwkf:\n        bzbj = (low + high) // 2\n        if arr[mid] == dvj:\n            return mid\n        elif arr[mid] < dvj:\n            ddkd = bzbj + 1\n        else:\n            zwkf = bzbj - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    emua = 0\n    trwc = len(bnpue) - 1\n    while emua <= trwc:\n        skok = (low + high) // 2\n        if arr[mid] == mca:\n            return mid\n        elif arr[mid] < mca:\n            emua = skok + 1\n        else:\n            trwc = skok - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    vrgd = 0\n    ofsj = len(rqjfw) - 1\n    while vrgd <= ofsj:\n        kahx = (low + high) // 2\n        if arr[mid] == aty:\n            return mid\n        elif arr[mid] < aty:\n            vrgd = kahx + 1\n        else:\n            ofsj = kahx - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    hwnf = 0\n    xhbo = len(nlmmu) - 1\n    while hwnf <= xhbo:\n        ypcw = (low + high) // 2\n        if arr[mid] == fym:\n            return mid\n        elif arr[mid] < fym:\n            hwnf = ypcw + 1\n        else:\n            xhbo = ypcw - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    ysbd = 0\n    wmiu = len(czizl) - 1\n    while ysbd <= wmiu:\n        yzwt = (low + high) // 2\n        if arr[mid] == atr:\n            return mid\n        elif arr[mid] < atr:\n            ysbd = yzwt + 1\n        else:\n            wmiu = yzwt - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    pihs = 0\n    rusa = len(nwksy) - 1\n    while pihs <= rusa:\n        aczq = (low + high) // 2\n        if arr[mid] == jtv:\n            return mid\n        elif arr[mid] < jtv:\n            pihs = aczq + 1\n        else:\n            rusa = aczq - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    hvaq = 0\n    kudd = len(sqtas) - 1\n    while hvaq <= kudd:\n        vetc = (low + high) // 2\n        if arr[mid] == fok:\n            return mid\n        elif arr[mid] < fok:\n            hvaq = vetc + 1\n        else:\n            kudd = vetc - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    clbc = 0\n    zhlh = len(fgzpp) - 1\n    while clbc <= zhlh:\n        sfyw = (low + high) // 2\n        if arr[mid] == jwr:\n            return mid\n        elif arr[mid] < jwr:\n            clbc = sfyw + 1\n        else:\n            zhlh = sfyw - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    ubrj = 0\n    tmsz = len(atyxp) - 1\n    while ubrj <= tmsz:\n        ajmd = (low + high) // 2\n        if arr[mid] == kuy:\n            return mid\n        elif arr[mid] < kuy:\n            ubrj = ajmd + 1\n        else:\n            tmsz = ajmd - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    bqdr = 0\n    yzxu = len(qdbjq) - 1\n    while bqdr <= yzxu:\n        cghp = (low + high) // 2\n        if arr[mid] == cmn:\n            return mid\n        elif arr[mid] < cmn:\n            bqdr = cghp + 1\n        else:\n            yzxu = cghp - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    fdyg = 0\n    nbho = len(fuylj) - 1\n    while fdyg <= nbho:\n        ywbh = (low + high) // 2\n        if arr[mid] == mps:\n            return mid\n        elif arr[mid] < mps:\n            fdyg = ywbh + 1\n        else:\n            nbho = ywbh - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    hbaz = 0\n    yujx = len(gosgp) - 1\n    while hbaz <= yujalv:\n        ghbv = (low + high) // 2\n        if arr[mid] == alv:\n            return mid\n        elif arr[mid] < alv:\n            hbaz = ghbv + 1\n        else:\n            yujx = ghbv - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    flry = 0\n    omsi = len(dzoyl) - 1\n    while flry <= omsi:\n        ncrt = (low + high) // 2\n        if arr[mid] == omf:\n            return mid\n        elif arr[mid] < omf:\n            flry = ncrt + 1\n        else:\n            omsi = ncrt - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    ubkd = 0\n    abqd = len(qlbjp) - 1\n    while ubkd <= abqd:\n        tzld = (low + high) // 2\n        if arr[mid] == nje:\n            return mid\n        elif arr[mid] < nje:\n            ubkd = tzld + 1\n        else:\n            abqd = tzld - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    yzhb = 0\n    zkfb = len(myifn) - 1\n    while yzhb <= zkfb:\n        zohj = (low + high) // 2\n        if arr[mid] == vpd:\n            return mid\n        elif arr[mid] < vpd:\n            yzhb = zohj + 1\n        else:\n            zkfb = zohj - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    tgfg = 0\n    podx = len(mprmm) - 1\n    while tgfg <= podidi:\n        qvsj = (low + high) // 2\n        if arr[mid] == idi:\n            return mid\n        elif arr[mid] < idi:\n            tgfg = qvsj + 1\n        else:\n            podx = qvsj - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    gvcj = 0\n    lacy = len(ancyq) - 1\n    while gvcj <= lacy:\n        vpzj = (low + high) // 2\n        if arr[mid] == frv:\n            return mid\n        elif arr[mid] < frv:\n            gvcj = vpzj + 1\n        else:\n            lacy = vpzj - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    zjdo = 0\n    xeyr = len(krwzf) - 1\n    while zjdo <= xeyr:\n        dmri = (low + high) // 2\n        if arr[mid] == jog:\n            return mid\n        elif arr[mid] < jog:\n            zjdo = dmri + 1\n        else:\n            xeyr = dmri - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    qagi = 0\n    kqri = len(sukud) - 1\n    while qagi <= kqri:\n        ncom = (low + high) // 2\n        if arr[mid] == sgl:\n            return mid\n        elif arr[mid] < sgl:\n            qagi = ncom + 1\n        else:\n            kqri = ncom - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    efuh = 0\n    xkam = len(qfbuo) - 1\n    while efuh <= xkam:\n        fpch = (low + high) // 2\n        if arr[mid] == snp:\n            return mid\n        elif arr[mid] < snp:\n            efuh = fpch + 1\n        else:\n            xkam = fpch - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    cqmh = 0\n    mbci = len(nuige) - 1\n    while cqmh <= mbci:\n        louv = (low + high) // 2\n        if arr[mid] == wup:\n            return mid\n        elif arr[mid] < wup:\n            cqmh = louv + 1\n        else:\n            mbci = louv - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    rckr = 0\n    hiyu = len(ncbdm) - 1\n    while rckr <= hiyu:\n        uroh = (low + high) // 2\n        if arr[mid] == yle:\n            return mid\n        elif arr[mid] < yle:\n            rckr = uroh + 1\n        else:\n            hiyu = uroh - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    agsx = 0\n    sgwa = len(zvsbf) - 1\n    while agsx <= sgwa:\n        djmc = (low + high) // 2\n        if arr[mid] == qzf:\n            return mid\n        elif arr[mid] < qzf:\n            agsx = djmc + 1\n        else:\n            sgwa = djmc - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    mpyc = 0\n    vudu = len(sxzbq) - 1\n    while mpyc <= vudu:\n        ifko = (low + high) // 2\n        if arr[mid] == wzy:\n            return mid\n        elif arr[mid] < wzy:\n            mpyc = ifko + 1\n        else:\n            vudu = ifko - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    azyw = 0\n    agcc = len(kfdap) - 1\n    while azyw <= agcc:\n        unyv = (low + high) // 2\n        if arr[mid] == hun:\n            return mid\n        elif arr[mid] < hun:\n            azyw = unyv + 1\n        else:\n            agcc = unyv - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    ozcq = 0\n    olcg = len(qobvv) - 1\n    while ozcq <= olcg:\n        xipm = (low + high) // 2\n        if arr[mid] == ink:\n            return mid\n        elif arr[mid] < ink:\n            ozcq = xipm + 1\n        else:\n            olcg = xipm - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    fyuc = 0\n    efip = len(dzhtg) - 1\n    while fyuc <= efip:\n        ejdk = (low + high) // 2\n        if arr[mid] == fjk:\n            return mid\n        elif arr[mid] < fjk:\n            fyuc = ejdk + 1\n        else:\n            efip = ejdk - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    fvfc = 0\n    tujt = len(bcwpt) - 1\n    while fvfc <= tujt:\n        dogs = (low + high) // 2\n        if arr[mid] == eop:\n            return mid\n        elif arr[mid] < eop:\n            fvfc = dogs + 1\n        else:\n            tujt = dogs - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    ujwi = 0\n    xlpe = len(kfaim) - 1\n    while ujwi <= xlpe:\n        qdvl = (low + high) // 2\n        if arr[mid] == iyj:\n            return mid\n        elif arr[mid] < iyj:\n            ujwi = qdvl + 1\n        else:\n            xlpe = qdvl - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    xqjq = 0\n    snpx = len(vszwp) - 1\n    while xqjq <= snphqp:\n        kzyg = (low + high) // 2\n        if arr[mid] == hqp:\n            return mid\n        elif arr[mid] < hqp:\n            xqjq = kzyg + 1\n        else:\n            snpx = kzyg - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    fsyr = 0\n    qdop = len(zthqq) - 1\n    while fsyr <= qdop:\n        rvqy = (low + high) // 2\n        if arr[mid] == qrq:\n            return mid\n        elif arr[mid] < qrq:\n            fsyr = rvqy + 1\n        else:\n            qdop = rvqy - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    pljd = 0\n    gcod = len(hxrjj) - 1\n    while pljd <= gcod:\n        jfbj = (low + high) // 2\n        if arr[mid] == dsv:\n            return mid\n        elif arr[mid] < dsv:\n            pljd = jfbj + 1\n        else:\n            gcod = jfbj - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    cynt = 0\n    deei = len(aqvpv) - 1\n    while cynt <= deei:\n        rbot = (low + high) // 2\n        if arr[mid] == rel:\n            return mid\n        elif arr[mid] < rel:\n            cynt = rbot + 1\n        else:\n            deei = rbot - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    kdts = 0\n    dglk = len(iaibg) - 1\n    while kdts <= dglk:\n        dpbr = (low + high) // 2\n        if arr[mid] == oas:\n            return mid\n        elif arr[mid] < oas:\n            kdts = dpbr + 1\n        else:\n            dglk = dpbr - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    cuwa = 0\n    hfso = len(eideg) - 1\n    while cuwa <= hfso:\n        yktd = (low + high) // 2\n        if arr[mid] == eom:\n            return mid\n        elif arr[mid] < eom:\n            cuwa = yktd + 1\n        else:\n            hfso = yktd - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    prvu = 0\n    dclz = len(ctcaf) - 1\n    while prvu <= dclz:\n        vnwd = (low + high) // 2\n        if arr[mid] == zhk:\n            return mid\n        elif arr[mid] < zhk:\n            prvu = vnwd + 1\n        else:\n            dclz = vnwd - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    qhxs = 0\n    ixcu = len(rmncx) - 1\n    while qhxs <= ixcu:\n        cxjn = (low + high) // 2\n        if arr[mid] == pdl:\n            return mid\n        elif arr[mid] < pdl:\n            qhxs = cxjn + 1\n        else:\n            ixcu = cxjn - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    bsll = 0\n    okfv = len(qvgdm) - 1\n    while bsll <= okfv:\n        yzjw = (low + high) // 2\n        if arr[mid] == cqe:\n            return mid\n        elif arr[mid] < cqe:\n            bsll = yzjw + 1\n        else:\n            okfv = yzjw - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    vhdv = 0\n    ztxz = len(lyefj) - 1\n    while vhdv <= ztxz:\n        ihei = (low + high) // 2\n        if arr[mid] == bqn:\n            return mid\n        elif arr[mid] < bqn:\n            vhdv = ihei + 1\n        else:\n            ztxz = ihei - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    unes = 0\n    gvxe = len(csmww) - 1\n    while unes <= gvxe:\n        idre = (low + high) // 2\n        if arr[mid] == gql:\n            return mid\n        elif arr[mid] < gql:\n            unes = idre + 1\n        else:\n            gvxe = idre - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    zudo = 0\n    chfz = len(kuidk) - 1\n    while zudo <= chfz:\n        fcts = (low + high) // 2\n        if arr[mid] == noq:\n            return mid\n        elif arr[mid] < noq:\n            zudo = fcts + 1\n        else:\n            chfz = fcts - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    tefb = 0\n    mcrp = len(yycux) - 1\n    while tefb <= mcrp:\n        kwye = (low + high) // 2\n        if arr[mid] == dou:\n            return mid\n        elif arr[mid] < dou:\n            tefb = kwye + 1\n        else:\n            mcrp = kwye - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    fefl = 0\n    ombh = len(ropka) - 1\n    while fefl <= ombh:\n        xrqk = (low + high) // 2\n        if arr[mid] == fza:\n            return mid\n        elif arr[mid] < fza:\n            fefl = xrqk + 1\n        else:\n            ombh = xrqk - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    copr = 0\n    kcko = len(uxhil) - 1\n    while copr <= kcko:\n        vlob = (low + high) // 2\n        if arr[mid] == omb:\n            return mid\n        elif arr[mid] < omb:\n            copr = vlob + 1\n        else:\n            kcko = vlob - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    ktup = 0\n    ubid = len(tyczk) - 1\n    while ktup <= ubid:\n        zmba = (low + high) // 2\n        if arr[mid] == gix:\n            return mid\n        elif arr[mid] < gix:\n            ktup = zmba + 1\n        else:\n            ubid = zmba - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    vhip = 0\n    nkmt = len(agryn) - 1\n    while vhip <= nkmt:\n        basc = (low + high) // 2\n        if arr[mid] == xlc:\n            return mid\n        elif arr[mid] < xlc:\n            vhip = basc + 1\n        else:\n            nkmt = basc - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    lwnc = 0\n    eeid = len(jdice) - 1\n    while lwnc <= eeid:\n        afsb = (low + high) // 2\n        if arr[mid] == say:\n            return mid\n        elif arr[mid] < say:\n            lwnc = afsb + 1\n        else:\n            eeid = afsb - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    vdfm = 0\n    znhr = len(cyvnu) - 1\n    while vdfm <= znhr:\n        clmy = (low + high) // 2\n        if arr[mid] == gwi:\n            return mid\n        elif arr[mid] < gwi:\n            vdfm = clmy + 1\n        else:\n            znhr = clmy - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    hqvp = 0\n    nfjf = len(fuixj) - 1\n    while hqvp <= nfjf:\n        jvnq = (low + high) // 2\n        if arr[mid] == fhd:\n            return mid\n        elif arr[mid] < fhd:\n            hqvp = jvnq + 1\n        else:\n            nfjf = jvnq - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    pxbf = 0\n    emhn = len(imanf) - 1\n    while pxbf <= emhn:\n        ffeh = (low + high) // 2\n        if arr[mid] == zfz:\n            return mid\n        elif arr[mid] < zfz:\n            pxbf = ffeh + 1\n        else:\n            emhn = ffeh - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    hbwq = 0\n    blif = len(bfuab) - 1\n    while hbwq <= blif:\n        cdvm = (low + high) // 2\n        if arr[mid] == rrs:\n            return mid\n        elif arr[mid] < rrs:\n            hbwq = cdvm + 1\n        else:\n            blif = cdvm - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    umzu = 0\n    pily = len(mraow) - 1\n    while umzu <= pily:\n        ohpx = (low + high) // 2\n        if arr[mid] == xuj:\n            return mid\n        elif arr[mid] < xuj:\n            umzu = ohpx + 1\n        else:\n            pily = ohpx - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    cjps = 0\n    tsqc = len(hkdix) - 1\n    while cjps <= tsqc:\n        vzjb = (low + high) // 2\n        if arr[mid] == ymd:\n            return mid\n        elif arr[mid] < ymd:\n            cjps = vzjb + 1\n        else:\n            tsqc = vzjb - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    hhmd = 0\n    xced = len(oylmk) - 1\n    while hhmd <= xced:\n        gnbn = (low + high) // 2\n        if arr[mid] == pzd:\n            return mid\n        elif arr[mid] < pzd:\n            hhmd = gnbn + 1\n        else:\n            xced = gnbn - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    pjcc = 0\n    flzu = len(etbsz) - 1\n    while pjcc <= flzu:\n        jovm = (low + high) // 2\n        if arr[mid] == ezr:\n            return mid\n        elif arr[mid] < ezr:\n            pjcc = jovm + 1\n        else:\n            flzu = jovm - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    ukga = 0\n    fuvx = len(yykkn) - 1\n    while ukga <= fuvfcf:\n        qqow = (low + high) // 2\n        if arr[mid] == fcf:\n            return mid\n        elif arr[mid] < fcf:\n            ukga = qqow + 1\n        else:\n            fuvx = qqow - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    ghfd = 0\n    xauq = len(hhtxe) - 1\n    while ghfd <= xauq:\n        jqlt = (low + high) // 2\n        if arr[mid] == muc:\n            return mid\n        elif arr[mid] < muc:\n            ghfd = jqlt + 1\n        else:\n            xauq = jqlt - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    glck = 0\n    uxpd = len(wumpl) - 1\n    while glck <= uxpd:\n        wbbg = (low + high) // 2\n        if arr[mid] == nyz:\n            return mid\n        elif arr[mid] < nyz:\n            glck = wbbg + 1\n        else:\n            uxpd = wbbg - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    didg = 0\n    gzhz = len(lipit) - 1\n    while didg <= gzhz:\n        qzhu = (low + high) // 2\n        if arr[mid] == mce:\n            return mid\n        elif arr[mid] < mce:\n            didg = qzhu + 1\n        else:\n            gzhz = qzhu - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    ygwl = 0\n    rvwj = len(vidsc) - 1\n    while ygwl <= rvwj:\n        bdir = (low + high) // 2\n        if arr[mid] == lfg:\n            return mid\n        elif arr[mid] < lfg:\n            ygwl = bdir + 1\n        else:\n            rvwj = bdir - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    flch = 0\n    auvq = len(knqvr) - 1\n    while flch <= auvq:\n        csjg = (low + high) // 2\n        if arr[mid] == cfx:\n            return mid\n        elif arr[mid] < cfx:\n            flch = csjg + 1\n        else:\n            auvq = csjg - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    xjmg = 0\n    gykb = len(jctwm) - 1\n    while xjmg <= gykb:\n        nmuy = (low + high) // 2\n        if arr[mid] == qwm:\n            return mid\n        elif arr[mid] < qwm:\n            xjmg = nmuy + 1\n        else:\n            gykb = nmuy - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    zpyk = 0\n    swbr = len(vtomx) - 1\n    while zpyk <= swbr:\n        ucwy = (low + high) // 2\n        if arr[mid] == pzh:\n            return mid\n        elif arr[mid] < pzh:\n            zpyk = ucwy + 1\n        else:\n            swbr = ucwy - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    elld = 0\n    podv = len(dimwf) - 1\n    while elld <= podv:\n        aexd = (low + high) // 2\n        if arr[mid] == day:\n            return mid\n        elif arr[mid] < day:\n            elld = aexd + 1\n        else:\n            podv = aexd - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    dcrw = 0\n    nyqn = len(xuuuf) - 1\n    while dcrw <= nyqn:\n        sgbr = (low + high) // 2\n        if arr[mid] == cmz:\n            return mid\n        elif arr[mid] < cmz:\n            dcrw = sgbr + 1\n        else:\n            nyqn = sgbr - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    gmmv = 0\n    owzm = len(bctzy) - 1\n    while gmmv <= owzm:\n        gqso = (low + high) // 2\n        if arr[mid] == fvb:\n            return mid\n        elif arr[mid] < fvb:\n            gmmv = gqso + 1\n        else:\n            owzm = gqso - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    ijoq = 0\n    hfxz = len(jllxd) - 1\n    while ijoq <= hfxz:\n        wall = (low + high) // 2\n        if arr[mid] == wpc:\n            return mid\n        elif arr[mid] < wpc:\n            ijoq = wall + 1\n        else:\n            hfxz = wall - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    rorn = 0\n    qewj = len(neyyy) - 1\n    while rorn <= qewj:\n        jhel = (low + high) // 2\n        if arr[mid] == uno:\n            return mid\n        elif arr[mid] < uno:\n            rorn = jhel + 1\n        else:\n            qewj = jhel - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    ppdh = 0\n    ixxe = len(kchlz) - 1\n    while ppdh <= ixxe:\n        fgso = (low + high) // 2\n        if arr[mid] == fki:\n            return mid\n        elif arr[mid] < fki:\n            ppdh = fgso + 1\n        else:\n            ixxe = fgso - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    ceke = 0\n    ahav = len(licjt) - 1\n    while ceke <= ahav:\n        iyxc = (low + high) // 2\n        if arr[mid] == cjt:\n            return mid\n        elif arr[mid] < cjt:\n            ceke = iyxc + 1\n        else:\n            ahav = iyxc - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    oizq = 0\n    pbob = len(hxtwv) - 1\n    while oizq <= pbob:\n        cdry = (low + high) // 2\n        if arr[mid] == dql:\n            return mid\n        elif arr[mid] < dql:\n            oizq = cdry + 1\n        else:\n            pbob = cdry - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    tylf = 0\n    pkts = len(pvmpd) - 1\n    while tylf <= pkts:\n        uvqv = (low + high) // 2\n        if arr[mid] == uth:\n            return mid\n        elif arr[mid] < uth:\n            tylf = uvqv + 1\n        else:\n            pkts = uvqv - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    oooy = 0\n    dkms = len(hyrus) - 1\n    while oooy <= dkms:\n        isiw = (low + high) // 2\n        if arr[mid] == zrc:\n            return mid\n        elif arr[mid] < zrc:\n            oooy = isiw + 1\n        else:\n            dkms = isiw - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    ftik = 0\n    rogo = len(zezxw) - 1\n    while ftik <= rogo:\n        rsdp = (low + high) // 2\n        if arr[mid] == xcc:\n            return mid\n        elif arr[mid] < xcc:\n            ftik = rsdp + 1\n        else:\n            rogo = rsdp - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def binary_search(arr, x):\n    qdwr = 0\n    zdfk = len(vblpz) - 1\n    while qdwr <= zdfk:\n        jcto = (low + high) // 2\n        if arr[mid] == ifo:\n            return mid\n        elif arr[mid] < ifo:\n            qdwr = jcto + 1\n        else:\n            zdfk = jcto - 1\n    return -1\n",
    "O": "O(log n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(log n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for ftt in range(len(hcasr)):\n        if arr[i] == ouuqfz:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for ouv in range(len(zkvlh)):\n        if arr[i] == ddpgvi:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for jyi in range(len(tunby)):\n        if arr[i] == pnxyfy:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for gha in range(len(cinzb)):\n        if arr[i] == yohqua:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for hpd in range(len(epzis)):\n        if arr[i] == sioyny:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for yjt in range(len(uxour)):\n        if arr[i] == cmnvvu:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for eao in range(len(ltvvv)):\n        if arr[i] == avyeoc:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for qiy in range(len(noqix)):\n        if arr[i] == uhxuyz:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for jba in range(len(ntlzo)):\n        if arr[i] == uawylp:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for zuo in range(len(nthax)):\n        if arr[i] == tmyltg:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for wfs in range(len(itxtc)):\n        if arr[i] == oynlgg:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for igi in range(len(kkoxa)):\n        if arr[i] == ycrcev:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for gvc in range(len(klqlo)):\n        if arr[i] == tuizoa:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for ecv in range(len(rvsou)):\n        if arr[i] == pozvwi:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for jhl in range(len(wwxpp)):\n        if arr[i] == jwrsys:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for ooz in range(len(kcaqu)):\n        if arr[i] == kamlfh:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for kpi in range(len(tvgyy)):\n        if arr[i] == zyeawl:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for zgh in range(len(mngew)):\n        if arr[i] == ohmppp:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for meu in range(len(fvftk)):\n        if arr[i] == hrjrka:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for ijd in range(len(biyfe)):\n        if arr[i] == ptvlul:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for ysh in range(len(uimof)):\n        if arr[i] == pepyrx:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for jnm in range(len(thjhn)):\n        if arr[i] == cmfpuj:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for tez in range(len(jdezk)):\n        if arr[i] == gfqprs:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for fmx in range(len(qakgx)):\n        if arr[i] == hcydsj:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for ook in range(len(fazav)):\n        if arr[i] == ehjvda:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for sba in range(len(ivqxi)):\n        if arr[i] == ckhqas:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for wjc in range(len(yrdqh)):\n        if arr[i] == qhiesj:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for kkd in range(len(chqrz)):\n        if arr[i] == glwfgi:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for nyj in range(len(sktjg)):\n        if arr[i] == qlaqcp:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for png in range(len(xswxw)):\n        if arr[i] == mvabfr:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for yik in range(len(alxyw)):\n        if arr[i] == nefsev:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for ssn in range(len(gyfzz)):\n        if arr[i] == cxoiuy:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for mhf in range(len(zzjmh)):\n        if arr[i] == mywrot:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for nyd in range(len(btwjq)):\n        if arr[i] == wrjnmp:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for lcg in range(len(ihmjp)):\n        if arr[i] == tdqsju:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for cbp in range(len(lysos)):\n        if arr[i] == pfecjv:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for gyp in range(len(lamzh)):\n        if arr[i] == hlahye:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for vgp in range(len(vgkkd)):\n        if arr[i] == nwjrid:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for hvo in range(len(zcjtp)):\n        if arr[i] == dkybwz:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for imr in range(len(omvbw)):\n        if arr[i] == qqxzsy:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for jjg in range(len(rbcnh)):\n        if arr[i] == aewjgd:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for ldu in range(len(nkncu)):\n        if arr[i] == fvfgsr:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for dlb in range(len(knlug)):\n        if arr[i] == lirrzd:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for xwf in range(len(hjajy)):\n        if arr[i] == bjyeru:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for vgv in range(len(hyniz)):\n        if arr[i] == kdptgw:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for trv in range(len(iyblt)):\n        if arr[i] == ieuibu:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for dng in range(len(vuxok)):\n        if arr[i] == czfdao:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for cub in range(len(zbizm)):\n        if arr[i] == ceedcy:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for zqq in range(len(ohqow)):\n        if arr[i] == vkjwze:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for dut in range(len(qwgon)):\n        if arr[i] == jhvrph:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for neu in range(len(bxsnv)):\n        if arr[i] == awpeyz:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for ooj in range(len(ounbv)):\n        if arr[i] == hrnarg:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for cmh in range(len(uwstd)):\n        if arr[i] == nhkyjy:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for scs in range(len(grcsd)):\n        if arr[i] == ymnrlx:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for coa in range(len(redvy)):\n        if arr[i] == rsshvz:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for vmx in range(len(jngab)):\n        if arr[i] == cjvgyl:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for ehr in range(len(hqwgy)):\n        if arr[i] == ctueng:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for nxp in range(len(bzbdf)):\n        if arr[i] == tdimeo:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for urc in range(len(wxqvj)):\n        if arr[i] == dutzts:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for bux in range(len(awach)):\n        if arr[i] == iglnlj:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for htm in range(len(annll)):\n        if arr[i] == gahiif:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for oku in range(len(xlmuk)):\n        if arr[i] == jydauu:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for hjt in range(len(yjypx)):\n        if arr[i] == hfebep:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for qbo in range(len(ggise)):\n        if arr[i] == pguysq:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for ftt in range(len(mnohn)):\n        if arr[i] == crrwgz:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for hme in range(len(mbvps)):\n        if arr[i] == znubbu:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for pzz in range(len(vhgfo)):\n        if arr[i] == czibxg:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for nwe in range(len(mpavb)):\n        if arr[i] == vofcsj:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for tba in range(len(wztdq)):\n        if arr[i] == erditz:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for zuz in range(len(omazz)):\n        if arr[i] == rvupkm:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for jjf in range(len(hqakd)):\n        if arr[i] == qtvkzh:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for spn in range(len(iqrih)):\n        if arr[i] == vwnedg:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for xnw in range(len(xasfi)):\n        if arr[i] == svfuel:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for xdk in range(len(rcvuo)):\n        if arr[i] == qmvxyb:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for fgv in range(len(pdqtr)):\n        if arr[i] == qhgqbc:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for yyg in range(len(bjvvs)):\n        if arr[i] == eezulj:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for lpg in range(len(dxxeg)):\n        if arr[i] == jautvo:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for rhn in range(len(vzlyk)):\n        if arr[i] == dgmqdh:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for jxw in range(len(iecfe)):\n        if arr[i] == ymgvlq:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for vns in range(len(kheen)):\n        if arr[i] == vtfhos:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for ghh in range(len(raqzr)):\n        if arr[i] == yxvhjc:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for hlj in range(len(dxnes)):\n        if arr[i] == rgjguw:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for uym in range(len(hyono)):\n        if arr[i] == tsxgzq:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for iym in range(len(qhqmb)):\n        if arr[i] == eecsni:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for pls in range(len(yvvdz)):\n        if arr[i] == xxrkhp:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for qwd in range(len(fzlnv)):\n        if arr[i] == zkwrcm:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for wip in range(len(xbyff)):\n        if arr[i] == xevwke:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for mmd in range(len(hujlc)):\n        if arr[i] == udcahg:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for cyk in range(len(fntzi)):\n        if arr[i] == znsjcj:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for arp in range(len(julpy)):\n        if arr[i] == lowztu:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for uex in range(len(dawka)):\n        if arr[i] == qoyxrb:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for enp in range(len(lidpg)):\n        if arr[i] == ocwouy:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for dgl in range(len(tnsqf)):\n        if arr[i] == eqyvpg:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for fzb in range(len(tzzvg)):\n        if arr[i] == nomntp:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for efq in range(len(gzqdi)):\n        if arr[i] == jwthif:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for xte in range(len(sbwsk)):\n        if arr[i] == giquai:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for zzw in range(len(gxhap)):\n        if arr[i] == yxrcgo:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for lxk in range(len(uihtc)):\n        if arr[i] == diqtok:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for nqv in range(len(jygxa)):\n        if arr[i] == synigu:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for urb in range(len(auppr)):\n        if arr[i] == vbrdah:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for mir in range(len(lchad)):\n        if arr[i] == rwhnwh:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for mcw in range(len(bpsnh)):\n        if arr[i] == mnnwod:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for izz in range(len(ifqmk)):\n        if arr[i] == pznlgf:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for kse in range(len(kjbma)):\n        if arr[i] == qjuoly:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for qyi in range(len(pbbej)):\n        if arr[i] == onbcmk:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for xwl in range(len(prnyp)):\n        if arr[i] == cyzidy:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for ztb in range(len(msrcx)):\n        if arr[i] == domunb:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for qel in range(len(mqkuy)):\n        if arr[i] == ninjbb:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for rjz in range(len(nucyv)):\n        if arr[i] == ienudj:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for vjd in range(len(goctv)):\n        if arr[i] == qdmfhm:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for uua in range(len(nkqaz)):\n        if arr[i] == darutv:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for dsm in range(len(floev)):\n        if arr[i] == bxudfs:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for mgm in range(len(gxdur)):\n        if arr[i] == fooaao:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for ugm in range(len(hallk)):\n        if arr[i] == bgwkfs:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for fbr in range(len(begtn)):\n        if arr[i] == ufimgi:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for chn in range(len(dlitn)):\n        if arr[i] == nvjvkf:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for hbw in range(len(njupn)):\n        if arr[i] == imownx:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for kik in range(len(vbhkl)):\n        if arr[i] == cmnyoq:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for ewk in range(len(lqvxf)):\n        if arr[i] == regcoy:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for aer in range(len(jtwzf)):\n        if arr[i] == srlwsa:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for eeh in range(len(znjxt)):\n        if arr[i] == ptnixs:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for mgj in range(len(yqsug)):\n        if arr[i] == tmsdqn:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for ood in range(len(ltbcx)):\n        if arr[i] == fspard:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for znk in range(len(xfofm)):\n        if arr[i] == ejuazv:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for xlv in range(len(wlpxc)):\n        if arr[i] == svqvsa:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for pqt in range(len(nrqke)):\n        if arr[i] == sdalvy:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for adv in range(len(yksma)):\n        if arr[i] == kolunh:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for hib in range(len(fppah)):\n        if arr[i] == jgoysq:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for isc in range(len(iawxf)):\n        if arr[i] == cszwct:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for fiq in range(len(oxmpk)):\n        if arr[i] == pslshv:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for ojg in range(len(zaszn)):\n        if arr[i] == jegedi:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for bmv in range(len(nssmn)):\n        if arr[i] == vhwevo:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def linear_search(arr, target):\n    for yet in range(len(onous)):\n        if arr[i] == fnykdx:\n            return i\n    return -1\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(1)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        merge_sort(left)\n        merge_sort(right)\n        i = j = k = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(jfohn):\n    if len(jfohn) > 1:\n        eotc = len(jfohn) // 2\n        left = arr[:mid]\n        right = arr[eotc:]\n        merge_sort(left)\n        merge_sort(right)\n        edr = vub = kxf = 0\n        while edr < len(left) and vub < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                edr += 1\n            else:\n                arr[k] = right[j]\n                vub += 1\n            kxf += 1\n        while edr < len(left):\n            arr[k] = left[i]\n            edr += 1\n            kxf += 1\n        while vub < len(right):\n            arr[k] = right[j]\n            vub += 1\n            kxf += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(kdbux):\n    if len(kdbux) > 1:\n        basz = len(kdbux) // 2\n        left = arr[:mid]\n        right = arr[basz:]\n        merge_sort(left)\n        merge_sort(right)\n        tqo = xps = ftm = 0\n        while tqo < len(left) and xps < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                tqo += 1\n            else:\n                arr[k] = right[j]\n                xps += 1\n            ftm += 1\n        while tqo < len(left):\n            arr[k] = left[i]\n            tqo += 1\n            ftm += 1\n        while xps < len(right):\n            arr[k] = right[j]\n            xps += 1\n            ftm += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(uonqb):\n    if len(uonqb) > 1:\n        vsyn = len(uonqb) // 2\n        left = arr[:mid]\n        right = arr[vsyn:]\n        merge_sort(left)\n        merge_sort(right)\n        ghb = eln = cpc = 0\n        while ghb < len(left) and eln < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                ghb += 1\n            else:\n                arr[k] = right[j]\n                eln += 1\n            cpc += 1\n        while ghb < len(left):\n            arr[k] = left[i]\n            ghb += 1\n            cpc += 1\n        while eln < len(right):\n            arr[k] = right[j]\n            eln += 1\n            cpc += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(oalnw):\n    if len(oalnw) > 1:\n        vaax = len(oalnw) // 2\n        left = arr[:mid]\n        right = arr[vaalbm:]\n        merge_sort(left)\n        merge_sort(right)\n        nvx = qjo = gqj = 0\n        while nvx < len(left) and qjo < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                nvx += 1\n            else:\n                arr[k] = right[j]\n                qjo += 1\n            gqj += 1\n        while nvx < len(left):\n            arr[k] = left[i]\n            nvx += 1\n            gqj += 1\n        while qjo < len(right):\n            arr[k] = right[j]\n            qjo += 1\n            gqj += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(lbdnm):\n    if len(lbdnm) > 1:\n        auyt = len(lbdnm) // 2\n        left = arr[:mid]\n        right = arr[auyt:]\n        merge_sort(left)\n        merge_sort(right)\n        yzo = cpy = wxy = 0\n        while yzo < len(left) and cpy < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                yzo += 1\n            else:\n                arr[k] = right[j]\n                cpy += 1\n            wxy += 1\n        while yzo < len(left):\n            arr[k] = left[i]\n            yzo += 1\n            wxy += 1\n        while cpy < len(right):\n            arr[k] = right[j]\n            cpy += 1\n            wxy += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(lolav):\n    if len(lolav) > 1:\n        jiir = len(lolav) // 2\n        left = arr[:mid]\n        right = arr[jiir:]\n        merge_sort(left)\n        merge_sort(right)\n        xmu = uhm = dln = 0\n        while xmu < len(left) and uhm < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                xmu += 1\n            else:\n                arr[k] = right[j]\n                uhm += 1\n            dln += 1\n        while xmu < len(left):\n            arr[k] = left[i]\n            xmu += 1\n            dln += 1\n        while uhm < len(right):\n            arr[k] = right[j]\n            uhm += 1\n            dln += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(soyvu):\n    if len(soyvu) > 1:\n        czee = len(soyvu) // 2\n        left = arr[:mid]\n        right = arr[czee:]\n        merge_sort(left)\n        merge_sort(right)\n        bwt = riy = pja = 0\n        while bwt < len(left) and riy < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                bwt += 1\n            else:\n                arr[k] = right[j]\n                riy += 1\n            pja += 1\n        while bwt < len(left):\n            arr[k] = left[i]\n            bwt += 1\n            pja += 1\n        while riy < len(right):\n            arr[k] = right[j]\n            riy += 1\n            pja += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(uhkdg):\n    if len(uhkdg) > 1:\n        lhnf = len(uhkdg) // 2\n        left = arr[:mid]\n        right = arr[lhnf:]\n        merge_sort(left)\n        merge_sort(right)\n        srq = vux = eyp = 0\n        while srq < len(left) and vux < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                srq += 1\n            else:\n                arr[k] = right[j]\n                vux += 1\n            eyp += 1\n        while srq < len(left):\n            arr[k] = left[i]\n            srq += 1\n            eyp += 1\n        while vux < len(right):\n            arr[k] = right[j]\n            vux += 1\n            eyp += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(axhzp):\n    if len(axhzp) > 1:\n        jsnw = len(axhzp) // 2\n        left = arr[:mid]\n        right = arr[jsnw:]\n        merge_sort(left)\n        merge_sort(right)\n        pcw = fsj = cjr = 0\n        while pcw < len(left) and fsj < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                pcw += 1\n            else:\n                arr[k] = right[j]\n                fsj += 1\n            cjr += 1\n        while pcw < len(left):\n            arr[k] = left[i]\n            pcw += 1\n            cjr += 1\n        while fsj < len(right):\n            arr[k] = right[j]\n            fsj += 1\n            cjr += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(fnocj):\n    if len(fnocj) > 1:\n        nqcm = len(fnocj) // 2\n        left = arr[:mid]\n        right = arr[nqcm:]\n        merge_sort(left)\n        merge_sort(right)\n        ubi = qeg = opz = 0\n        while ubi < len(left) and qeg < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                ubi += 1\n            else:\n                arr[k] = right[j]\n                qeg += 1\n            opz += 1\n        while ubi < len(left):\n            arr[k] = left[i]\n            ubi += 1\n            opz += 1\n        while qeg < len(right):\n            arr[k] = right[j]\n            qeg += 1\n            opz += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(rqqqc):\n    if len(rqqqc) > 1:\n        hsmc = len(rqqqc) // 2\n        left = arr[:mid]\n        right = arr[hsmc:]\n        merge_sort(left)\n        merge_sort(right)\n        fte = ewu = qrk = 0\n        while fte < len(left) and ewu < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                fte += 1\n            else:\n                arr[k] = right[j]\n                ewu += 1\n            qrk += 1\n        while fte < len(left):\n            arr[k] = left[i]\n            fte += 1\n            qrk += 1\n        while ewu < len(right):\n            arr[k] = right[j]\n            ewu += 1\n            qrk += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(hkdpt):\n    if len(hkdpt) > 1:\n        bezt = len(hkdpt) // 2\n        left = arr[:mid]\n        right = arr[bezt:]\n        merge_sort(left)\n        merge_sort(right)\n        ylk = ycb = owe = 0\n        while ylk < len(left) and ycb < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                ylk += 1\n            else:\n                arr[k] = right[j]\n                ycb += 1\n            owe += 1\n        while ylk < len(left):\n            arr[k] = left[i]\n            ylk += 1\n            owe += 1\n        while ycb < len(right):\n            arr[k] = right[j]\n            ycb += 1\n            owe += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(bdwgx):\n    if len(bdwgx) > 1:\n        xtft = len(bdwgx) // 2\n        left = arr[:mid]\n        right = arr[xtft:]\n        merge_sort(left)\n        merge_sort(right)\n        ehl = nca = rwu = 0\n        while ehl < len(left) and nca < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                ehl += 1\n            else:\n                arr[k] = right[j]\n                nca += 1\n            rwu += 1\n        while ehl < len(left):\n            arr[k] = left[i]\n            ehl += 1\n            rwu += 1\n        while nca < len(right):\n            arr[k] = right[j]\n            nca += 1\n            rwu += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(xrcpl):\n    if len(xrcpl) > 1:\n        tlwp = len(xrcpl) // 2\n        left = arr[:mid]\n        right = arr[tlwp:]\n        merge_sort(left)\n        merge_sort(right)\n        wdt = qef = rzt = 0\n        while wdt < len(left) and qef < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                wdt += 1\n            else:\n                arr[k] = right[j]\n                qef += 1\n            rzt += 1\n        while wdt < len(left):\n            arr[k] = left[i]\n            wdt += 1\n            rzt += 1\n        while qef < len(right):\n            arr[k] = right[j]\n            qef += 1\n            rzt += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(xdgar):\n    if len(xdgar) > 1:\n        kizc = len(xdgar) // 2\n        left = arr[:mid]\n        right = arr[kizc:]\n        merge_sort(left)\n        merge_sort(right)\n        ggv = tnf = rtr = 0\n        while ggv < len(left) and tnf < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                ggv += 1\n            else:\n                arr[k] = right[j]\n                tnf += 1\n            rtr += 1\n        while ggv < len(left):\n            arr[k] = left[i]\n            ggv += 1\n            rtr += 1\n        while tnf < len(right):\n            arr[k] = right[j]\n            tnf += 1\n            rtr += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(eusrj):\n    if len(eusrj) > 1:\n        pylr = len(eusrj) // 2\n        left = arr[:mid]\n        right = arr[pylr:]\n        merge_sort(left)\n        merge_sort(right)\n        cxm = kvq = ifb = 0\n        while cxm < len(left) and kvq < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                cxm += 1\n            else:\n                arr[k] = right[j]\n                kvq += 1\n            ifb += 1\n        while cxm < len(left):\n            arr[k] = left[i]\n            cxm += 1\n            ifb += 1\n        while kvq < len(right):\n            arr[k] = right[j]\n            kvq += 1\n            ifb += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(cpzku):\n    if len(cpzku) > 1:\n        rkid = len(cpzku) // 2\n        left = arr[:mid]\n        right = arr[rkid:]\n        merge_sort(left)\n        merge_sort(right)\n        gpi = fik = arn = 0\n        while gpi < len(left) and fik < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                gpi += 1\n            else:\n                arr[k] = right[j]\n                fik += 1\n            arn += 1\n        while gpi < len(left):\n            arr[k] = left[i]\n            gpi += 1\n            arn += 1\n        while fik < len(right):\n            arr[k] = right[j]\n            fik += 1\n            arn += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(addvc):\n    if len(addvc) > 1:\n        ggtr = len(addvc) // 2\n        left = arr[:mid]\n        right = arr[ggtr:]\n        merge_sort(left)\n        merge_sort(right)\n        ckx = wxj = gds = 0\n        while ckx < len(left) and wxj < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                ckx += 1\n            else:\n                arr[k] = right[j]\n                wxj += 1\n            gds += 1\n        while ckx < len(left):\n            arr[k] = left[i]\n            ckx += 1\n            gds += 1\n        while wxj < len(right):\n            arr[k] = right[j]\n            wxj += 1\n            gds += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(hpcci):\n    if len(hpcci) > 1:\n        omzk = len(hpcci) // 2\n        left = arr[:mid]\n        right = arr[omzk:]\n        merge_sort(left)\n        merge_sort(right)\n        qon = hlc = mds = 0\n        while qon < len(left) and hlc < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                qon += 1\n            else:\n                arr[k] = right[j]\n                hlc += 1\n            mds += 1\n        while qon < len(left):\n            arr[k] = left[i]\n            qon += 1\n            mds += 1\n        while hlc < len(right):\n            arr[k] = right[j]\n            hlc += 1\n            mds += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(ewmua):\n    if len(ewmua) > 1:\n        iepw = len(ewmua) // 2\n        left = arr[:mid]\n        right = arr[iepw:]\n        merge_sort(left)\n        merge_sort(right)\n        fmp = jbb = dcw = 0\n        while fmp < len(left) and jbb < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                fmp += 1\n            else:\n                arr[k] = right[j]\n                jbb += 1\n            dcw += 1\n        while fmp < len(left):\n            arr[k] = left[i]\n            fmp += 1\n            dcw += 1\n        while jbb < len(right):\n            arr[k] = right[j]\n            jbb += 1\n            dcw += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(qdiqh):\n    if len(qdiqh) > 1:\n        ozmh = len(qdiqh) // 2\n        left = arr[:mid]\n        right = arr[ozmh:]\n        merge_sort(left)\n        merge_sort(right)\n        uxe = elt = knz = 0\n        while uxe < len(left) and elt < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                uxe += 1\n            else:\n                arr[k] = right[j]\n                elt += 1\n            knz += 1\n        while uxe < len(left):\n            arr[k] = left[i]\n            uxe += 1\n            knz += 1\n        while elt < len(right):\n            arr[k] = right[j]\n            elt += 1\n            knz += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(lggln):\n    if len(lggln) > 1:\n        cqik = len(lggln) // 2\n        left = arr[:mid]\n        right = arr[cqik:]\n        merge_sort(left)\n        merge_sort(right)\n        ktw = exa = lje = 0\n        while ktw < len(left) and exa < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                ktw += 1\n            else:\n                arr[k] = right[j]\n                exa += 1\n            lje += 1\n        while ktw < len(left):\n            arr[k] = left[i]\n            ktw += 1\n            lje += 1\n        while exa < len(right):\n            arr[k] = right[j]\n            exa += 1\n            lje += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(tzrlw):\n    if len(tzrlw) > 1:\n        lisd = len(tzrlw) // 2\n        left = arr[:mid]\n        right = arr[lisd:]\n        merge_sort(left)\n        merge_sort(right)\n        aii = sei = brp = 0\n        while aii < len(left) and sei < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                aii += 1\n            else:\n                arr[k] = right[j]\n                sei += 1\n            brp += 1\n        while aii < len(left):\n            arr[k] = left[i]\n            aii += 1\n            brp += 1\n        while sei < len(right):\n            arr[k] = right[j]\n            sei += 1\n            brp += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(mabof):\n    if len(mabof) > 1:\n        redu = len(mabof) // 2\n        left = arr[:mid]\n        right = arr[redu:]\n        merge_sort(left)\n        merge_sort(right)\n        qbo = gnx = cnj = 0\n        while qbo < len(left) and gnx < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                qbo += 1\n            else:\n                arr[k] = right[j]\n                gnx += 1\n            cnj += 1\n        while qbo < len(left):\n            arr[k] = left[i]\n            qbo += 1\n            cnj += 1\n        while gnx < len(right):\n            arr[k] = right[j]\n            gnx += 1\n            cnj += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(zbxhy):\n    if len(zbxhy) > 1:\n        crca = len(zbxhy) // 2\n        left = arr[:mid]\n        right = arr[crca:]\n        merge_sort(left)\n        merge_sort(right)\n        sds = mfy = kzm = 0\n        while sds < len(left) and mfy < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                sds += 1\n            else:\n                arr[k] = right[j]\n                mfy += 1\n            kzm += 1\n        while sds < len(left):\n            arr[k] = left[i]\n            sds += 1\n            kzm += 1\n        while mfy < len(right):\n            arr[k] = right[j]\n            mfy += 1\n            kzm += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(yiupm):\n    if len(yiupm) > 1:\n        uktq = len(yiupm) // 2\n        left = arr[:mid]\n        right = arr[uktq:]\n        merge_sort(left)\n        merge_sort(right)\n        loh = cde = yrb = 0\n        while loh < len(left) and cde < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                loh += 1\n            else:\n                arr[k] = right[j]\n                cde += 1\n            yrb += 1\n        while loh < len(left):\n            arr[k] = left[i]\n            loh += 1\n            yrb += 1\n        while cde < len(right):\n            arr[k] = right[j]\n            cde += 1\n            yrb += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(dpghp):\n    if len(dpghp) > 1:\n        ybzf = len(dpghp) // 2\n        left = arr[:mid]\n        right = arr[ybzf:]\n        merge_sort(left)\n        merge_sort(right)\n        xej = njj = nsz = 0\n        while xej < len(left) and njj < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                xej += 1\n            else:\n                arr[k] = right[j]\n                njj += 1\n            nsz += 1\n        while xej < len(left):\n            arr[k] = left[i]\n            xej += 1\n            nsz += 1\n        while njj < len(right):\n            arr[k] = right[j]\n            njj += 1\n            nsz += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(horbf):\n    if len(horbf) > 1:\n        ssgy = len(horbf) // 2\n        left = arr[:mid]\n        right = arr[ssgy:]\n        merge_sort(left)\n        merge_sort(right)\n        mqv = lym = cqt = 0\n        while mqv < len(left) and lym < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                mqv += 1\n            else:\n                arr[k] = right[j]\n                lym += 1\n            cqt += 1\n        while mqv < len(left):\n            arr[k] = left[i]\n            mqv += 1\n            cqt += 1\n        while lym < len(right):\n            arr[k] = right[j]\n            lym += 1\n            cqt += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(dsdtg):\n    if len(dsdtg) > 1:\n        idtl = len(dsdtg) // 2\n        left = arr[:mid]\n        right = arr[idtl:]\n        merge_sort(left)\n        merge_sort(right)\n        trk = qqa = fsu = 0\n        while trk < len(left) and qqa < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                trk += 1\n            else:\n                arr[k] = right[j]\n                qqa += 1\n            fsu += 1\n        while trk < len(left):\n            arr[k] = left[i]\n            trk += 1\n            fsu += 1\n        while qqa < len(right):\n            arr[k] = right[j]\n            qqa += 1\n            fsu += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(wuyhe):\n    if len(wuyhe) > 1:\n        cuwb = len(wuyhe) // 2\n        left = arr[:mid]\n        right = arr[cuwb:]\n        merge_sort(left)\n        merge_sort(right)\n        xnj = pav = kbs = 0\n        while xnj < len(left) and pav < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                xnj += 1\n            else:\n                arr[k] = right[j]\n                pav += 1\n            kbs += 1\n        while xnj < len(left):\n            arr[k] = left[i]\n            xnj += 1\n            kbs += 1\n        while pav < len(right):\n            arr[k] = right[j]\n            pav += 1\n            kbs += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(dhrsv):\n    if len(dhrsv) > 1:\n        anxr = len(dhrsv) // 2\n        left = arr[:mid]\n        right = arr[anxr:]\n        merge_sort(left)\n        merge_sort(right)\n        lhc = kqv = gpu = 0\n        while lhc < len(left) and kqv < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                lhc += 1\n            else:\n                arr[k] = right[j]\n                kqv += 1\n            gpu += 1\n        while lhc < len(left):\n            arr[k] = left[i]\n            lhc += 1\n            gpu += 1\n        while kqv < len(right):\n            arr[k] = right[j]\n            kqv += 1\n            gpu += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(trzuo):\n    if len(trzuo) > 1:\n        lqzj = len(trzuo) // 2\n        left = arr[:mid]\n        right = arr[lqzj:]\n        merge_sort(left)\n        merge_sort(right)\n        gmc = xef = yay = 0\n        while gmc < len(left) and xef < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                gmc += 1\n            else:\n                arr[k] = right[j]\n                xef += 1\n            yay += 1\n        while gmc < len(left):\n            arr[k] = left[i]\n            gmc += 1\n            yay += 1\n        while xef < len(right):\n            arr[k] = right[j]\n            xef += 1\n            yay += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(jtocs):\n    if len(jtocs) > 1:\n        sish = len(jtocs) // 2\n        left = arr[:mid]\n        right = arr[sish:]\n        merge_sort(left)\n        merge_sort(right)\n        rhk = psx = voq = 0\n        while rhk < len(left) and psx < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                rhk += 1\n            else:\n                arr[k] = right[j]\n                psx += 1\n            voq += 1\n        while rhk < len(left):\n            arr[k] = left[i]\n            rhk += 1\n            voq += 1\n        while psx < len(right):\n            arr[k] = right[j]\n            psx += 1\n            voq += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(ldsbx):\n    if len(ldsbx) > 1:\n        sphc = len(ldsbx) // 2\n        left = arr[:mid]\n        right = arr[sphc:]\n        merge_sort(left)\n        merge_sort(right)\n        yrf = gmh = ooc = 0\n        while yrf < len(left) and gmh < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                yrf += 1\n            else:\n                arr[k] = right[j]\n                gmh += 1\n            ooc += 1\n        while yrf < len(left):\n            arr[k] = left[i]\n            yrf += 1\n            ooc += 1\n        while gmh < len(right):\n            arr[k] = right[j]\n            gmh += 1\n            ooc += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(riziz):\n    if len(riziz) > 1:\n        tovj = len(riziz) // 2\n        left = arr[:mid]\n        right = arr[tovj:]\n        merge_sort(left)\n        merge_sort(right)\n        wdy = hbf = xcv = 0\n        while wdy < len(left) and hbf < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                wdy += 1\n            else:\n                arr[k] = right[j]\n                hbf += 1\n            xcv += 1\n        while wdy < len(left):\n            arr[k] = left[i]\n            wdy += 1\n            xcv += 1\n        while hbf < len(right):\n            arr[k] = right[j]\n            hbf += 1\n            xcv += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(sxlyn):\n    if len(sxlyn) > 1:\n        sjjq = len(sxlyn) // 2\n        left = arr[:mid]\n        right = arr[sjjq:]\n        merge_sort(left)\n        merge_sort(right)\n        img = gmm = igz = 0\n        while img < len(left) and gmm < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                img += 1\n            else:\n                arr[k] = right[j]\n                gmm += 1\n            igz += 1\n        while img < len(left):\n            arr[k] = left[i]\n            img += 1\n            igz += 1\n        while gmm < len(right):\n            arr[k] = right[j]\n            gmm += 1\n            igz += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(risbd):\n    if len(risbd) > 1:\n        sujy = len(risbd) // 2\n        left = arr[:mid]\n        right = arr[sujy:]\n        merge_sort(left)\n        merge_sort(right)\n        fte = uox = ehr = 0\n        while fte < len(left) and uox < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                fte += 1\n            else:\n                arr[k] = right[j]\n                uox += 1\n            ehr += 1\n        while fte < len(left):\n            arr[k] = left[i]\n            fte += 1\n            ehr += 1\n        while uox < len(right):\n            arr[k] = right[j]\n            uox += 1\n            ehr += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(xgibc):\n    if len(xgibc) > 1:\n        iqll = len(xgibc) // 2\n        left = arr[:mid]\n        right = arr[iqll:]\n        merge_sort(left)\n        merge_sort(right)\n        rxq = wbi = ale = 0\n        while rxq < len(left) and wbi < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                rxq += 1\n            else:\n                arr[k] = right[j]\n                wbi += 1\n            ale += 1\n        while rxq < len(left):\n            arr[k] = left[i]\n            rxq += 1\n            ale += 1\n        while wbi < len(right):\n            arr[k] = right[j]\n            wbi += 1\n            ale += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(npcpy):\n    if len(npcpy) > 1:\n        diwl = len(npcpy) // 2\n        left = arr[:mid]\n        right = arr[diwl:]\n        merge_sort(left)\n        merge_sort(right)\n        wvj = giv = eko = 0\n        while wvj < len(left) and giv < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                wvj += 1\n            else:\n                arr[k] = right[j]\n                giv += 1\n            eko += 1\n        while wvj < len(left):\n            arr[k] = left[i]\n            wvj += 1\n            eko += 1\n        while giv < len(right):\n            arr[k] = right[j]\n            giv += 1\n            eko += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(ybtpl):\n    if len(ybtpl) > 1:\n        xyjv = len(ybtpl) // 2\n        left = arr[:mid]\n        right = arr[xyjv:]\n        merge_sort(left)\n        merge_sort(right)\n        gtr = fkj = ayj = 0\n        while gtr < len(left) and fkj < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                gtr += 1\n            else:\n                arr[k] = right[j]\n                fkj += 1\n            ayj += 1\n        while gtr < len(left):\n            arr[k] = left[i]\n            gtr += 1\n            ayj += 1\n        while fkj < len(right):\n            arr[k] = right[j]\n            fkj += 1\n            ayj += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(lcthp):\n    if len(lcthp) > 1:\n        hlgz = len(lcthp) // 2\n        left = arr[:mid]\n        right = arr[hlgz:]\n        merge_sort(left)\n        merge_sort(right)\n        mzj = fpu = psb = 0\n        while mzj < len(left) and fpu < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                mzj += 1\n            else:\n                arr[k] = right[j]\n                fpu += 1\n            psb += 1\n        while mzj < len(left):\n            arr[k] = left[i]\n            mzj += 1\n            psb += 1\n        while fpu < len(right):\n            arr[k] = right[j]\n            fpu += 1\n            psb += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(xdyjh):\n    if len(xdyjh) > 1:\n        mmyj = len(xdyjh) // 2\n        left = arr[:mid]\n        right = arr[mmyj:]\n        merge_sort(left)\n        merge_sort(right)\n        moe = tmh = xyo = 0\n        while moe < len(left) and tmh < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                moe += 1\n            else:\n                arr[k] = right[j]\n                tmh += 1\n            xyo += 1\n        while moe < len(left):\n            arr[k] = left[i]\n            moe += 1\n            xyo += 1\n        while tmh < len(right):\n            arr[k] = right[j]\n            tmh += 1\n            xyo += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(egleo):\n    if len(egleo) > 1:\n        kkhn = len(egleo) // 2\n        left = arr[:mid]\n        right = arr[kkhn:]\n        merge_sort(left)\n        merge_sort(right)\n        xmn = vgi = efn = 0\n        while xmn < len(left) and vgi < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                xmn += 1\n            else:\n                arr[k] = right[j]\n                vgi += 1\n            efn += 1\n        while xmn < len(left):\n            arr[k] = left[i]\n            xmn += 1\n            efn += 1\n        while vgi < len(right):\n            arr[k] = right[j]\n            vgi += 1\n            efn += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(tadce):\n    if len(tadce) > 1:\n        chnt = len(tadce) // 2\n        left = arr[:mid]\n        right = arr[chnt:]\n        merge_sort(left)\n        merge_sort(right)\n        fwm = fiy = kzc = 0\n        while fwm < len(left) and fiy < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                fwm += 1\n            else:\n                arr[k] = right[j]\n                fiy += 1\n            kzc += 1\n        while fwm < len(left):\n            arr[k] = left[i]\n            fwm += 1\n            kzc += 1\n        while fiy < len(right):\n            arr[k] = right[j]\n            fiy += 1\n            kzc += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(ywhwu):\n    if len(ywhwu) > 1:\n        whqs = len(ywhwu) // 2\n        left = arr[:mid]\n        right = arr[whqs:]\n        merge_sort(left)\n        merge_sort(right)\n        vnt = xks = uwk = 0\n        while vnt < len(left) and xks < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                vnt += 1\n            else:\n                arr[k] = right[j]\n                xks += 1\n            uwk += 1\n        while vnt < len(left):\n            arr[k] = left[i]\n            vnt += 1\n            uwk += 1\n        while xks < len(right):\n            arr[k] = right[j]\n            xks += 1\n            uwk += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(cbxjn):\n    if len(cbxjn) > 1:\n        rzxx = len(cbxjn) // 2\n        left = arr[:mid]\n        right = arr[rzxegn:]\n        merge_sort(left)\n        merge_sort(right)\n        hni = kpj = pgg = 0\n        while hni < len(left) and kpj < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                hni += 1\n            else:\n                arr[k] = right[j]\n                kpj += 1\n            pgg += 1\n        while hni < len(left):\n            arr[k] = left[i]\n            hni += 1\n            pgg += 1\n        while kpj < len(right):\n            arr[k] = right[j]\n            kpj += 1\n            pgg += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(otrwh):\n    if len(otrwh) > 1:\n        zqax = len(otrwh) // 2\n        left = arr[:mid]\n        right = arr[zqasky:]\n        merge_sort(left)\n        merge_sort(right)\n        jka = icc = mpx = 0\n        while jka < len(left) and icc < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                jka += 1\n            else:\n                arr[k] = right[j]\n                icc += 1\n            mpx += 1\n        while jka < len(left):\n            arr[k] = left[i]\n            jka += 1\n            mpx += 1\n        while icc < len(right):\n            arr[k] = right[j]\n            icc += 1\n            mpx += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(vhxqk):\n    if len(vhxqk) > 1:\n        wmcx = len(vhxqk) // 2\n        left = arr[:mid]\n        right = arr[wmcblq:]\n        merge_sort(left)\n        merge_sort(right)\n        ohw = nlj = hxm = 0\n        while ohw < len(left) and nlj < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                ohw += 1\n            else:\n                arr[k] = right[j]\n                nlj += 1\n            hxm += 1\n        while ohw < len(left):\n            arr[k] = left[i]\n            ohw += 1\n            hxm += 1\n        while nlj < len(right):\n            arr[k] = right[j]\n            nlj += 1\n            hxm += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(znojf):\n    if len(znojf) > 1:\n        uvzz = len(znojf) // 2\n        left = arr[:mid]\n        right = arr[uvzz:]\n        merge_sort(left)\n        merge_sort(right)\n        rhm = wpj = xad = 0\n        while rhm < len(left) and wpj < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                rhm += 1\n            else:\n                arr[k] = right[j]\n                wpj += 1\n            xad += 1\n        while rhm < len(left):\n            arr[k] = left[i]\n            rhm += 1\n            xad += 1\n        while wpj < len(right):\n            arr[k] = right[j]\n            wpj += 1\n            xad += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(ncrvk):\n    if len(ncrvk) > 1:\n        fovt = len(ncrvk) // 2\n        left = arr[:mid]\n        right = arr[fovt:]\n        merge_sort(left)\n        merge_sort(right)\n        uqr = feh = bcp = 0\n        while uqr < len(left) and feh < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                uqr += 1\n            else:\n                arr[k] = right[j]\n                feh += 1\n            bcp += 1\n        while uqr < len(left):\n            arr[k] = left[i]\n            uqr += 1\n            bcp += 1\n        while feh < len(right):\n            arr[k] = right[j]\n            feh += 1\n            bcp += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(cvbab):\n    if len(cvbab) > 1:\n        olfy = len(cvbab) // 2\n        left = arr[:mid]\n        right = arr[olfy:]\n        merge_sort(left)\n        merge_sort(right)\n        twa = exr = luj = 0\n        while twa < len(left) and exr < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                twa += 1\n            else:\n                arr[k] = right[j]\n                exr += 1\n            luj += 1\n        while twa < len(left):\n            arr[k] = left[i]\n            twa += 1\n            luj += 1\n        while exr < len(right):\n            arr[k] = right[j]\n            exr += 1\n            luj += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(cxoyy):\n    if len(cxoyy) > 1:\n        tvbu = len(cxoyy) // 2\n        left = arr[:mid]\n        right = arr[tvbu:]\n        merge_sort(left)\n        merge_sort(right)\n        rxn = vvk = vja = 0\n        while rxn < len(left) and vvk < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                rxn += 1\n            else:\n                arr[k] = right[j]\n                vvk += 1\n            vja += 1\n        while rxn < len(left):\n            arr[k] = left[i]\n            rxn += 1\n            vja += 1\n        while vvk < len(right):\n            arr[k] = right[j]\n            vvk += 1\n            vja += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(zwwow):\n    if len(zwwow) > 1:\n        nrcz = len(zwwow) // 2\n        left = arr[:mid]\n        right = arr[nrcz:]\n        merge_sort(left)\n        merge_sort(right)\n        gsz = gvy = ldp = 0\n        while gsz < len(left) and gvy < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                gsz += 1\n            else:\n                arr[k] = right[j]\n                gvy += 1\n            ldp += 1\n        while gsz < len(left):\n            arr[k] = left[i]\n            gsz += 1\n            ldp += 1\n        while gvy < len(right):\n            arr[k] = right[j]\n            gvy += 1\n            ldp += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(mwify):\n    if len(mwify) > 1:\n        pwws = len(mwify) // 2\n        left = arr[:mid]\n        right = arr[pwws:]\n        merge_sort(left)\n        merge_sort(right)\n        ktq = nxt = qlm = 0\n        while ktq < len(left) and nxt < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                ktq += 1\n            else:\n                arr[k] = right[j]\n                nxt += 1\n            qlm += 1\n        while ktq < len(left):\n            arr[k] = left[i]\n            ktq += 1\n            qlm += 1\n        while nxt < len(right):\n            arr[k] = right[j]\n            nxt += 1\n            qlm += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(mfpia):\n    if len(mfpia) > 1:\n        btdo = len(mfpia) // 2\n        left = arr[:mid]\n        right = arr[btdo:]\n        merge_sort(left)\n        merge_sort(right)\n        xgp = dol = wqd = 0\n        while xgp < len(left) and dol < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                xgp += 1\n            else:\n                arr[k] = right[j]\n                dol += 1\n            wqd += 1\n        while xgp < len(left):\n            arr[k] = left[i]\n            xgp += 1\n            wqd += 1\n        while dol < len(right):\n            arr[k] = right[j]\n            dol += 1\n            wqd += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(slrmv):\n    if len(slrmv) > 1:\n        yxig = len(slrmv) // 2\n        left = arr[:mid]\n        right = arr[yxig:]\n        merge_sort(left)\n        merge_sort(right)\n        vcr = fuo = ryb = 0\n        while vcr < len(left) and fuo < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                vcr += 1\n            else:\n                arr[k] = right[j]\n                fuo += 1\n            ryb += 1\n        while vcr < len(left):\n            arr[k] = left[i]\n            vcr += 1\n            ryb += 1\n        while fuo < len(right):\n            arr[k] = right[j]\n            fuo += 1\n            ryb += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(wwgso):\n    if len(wwgso) > 1:\n        vxrk = len(wwgso) // 2\n        left = arr[:mid]\n        right = arr[vxrk:]\n        merge_sort(left)\n        merge_sort(right)\n        slo = qmy = ezq = 0\n        while slo < len(left) and qmy < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                slo += 1\n            else:\n                arr[k] = right[j]\n                qmy += 1\n            ezq += 1\n        while slo < len(left):\n            arr[k] = left[i]\n            slo += 1\n            ezq += 1\n        while qmy < len(right):\n            arr[k] = right[j]\n            qmy += 1\n            ezq += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(oyyym):\n    if len(oyyym) > 1:\n        jtcf = len(oyyym) // 2\n        left = arr[:mid]\n        right = arr[jtcf:]\n        merge_sort(left)\n        merge_sort(right)\n        rwt = kvd = oho = 0\n        while rwt < len(left) and kvd < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                rwt += 1\n            else:\n                arr[k] = right[j]\n                kvd += 1\n            oho += 1\n        while rwt < len(left):\n            arr[k] = left[i]\n            rwt += 1\n            oho += 1\n        while kvd < len(right):\n            arr[k] = right[j]\n            kvd += 1\n            oho += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(dbnsa):\n    if len(dbnsa) > 1:\n        imdd = len(dbnsa) // 2\n        left = arr[:mid]\n        right = arr[imdd:]\n        merge_sort(left)\n        merge_sort(right)\n        qad = dtt = obt = 0\n        while qad < len(left) and dtt < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                qad += 1\n            else:\n                arr[k] = right[j]\n                dtt += 1\n            obt += 1\n        while qad < len(left):\n            arr[k] = left[i]\n            qad += 1\n            obt += 1\n        while dtt < len(right):\n            arr[k] = right[j]\n            dtt += 1\n            obt += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(exsun):\n    if len(exsun) > 1:\n        jbqu = len(exsun) // 2\n        left = arr[:mid]\n        right = arr[jbqu:]\n        merge_sort(left)\n        merge_sort(right)\n        fav = zbc = map = 0\n        while fav < len(left) and zbc < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                fav += 1\n            else:\n                arr[k] = right[j]\n                zbc += 1\n            map += 1\n        while fav < len(left):\n            arr[k] = left[i]\n            fav += 1\n            map += 1\n        while zbc < len(right):\n            arr[k] = right[j]\n            zbc += 1\n            map += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(ljusl):\n    if len(ljusl) > 1:\n        rofl = len(ljusl) // 2\n        left = arr[:mid]\n        right = arr[rofl:]\n        merge_sort(left)\n        merge_sort(right)\n        doa = mvo = jht = 0\n        while doa < len(left) and mvo < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                doa += 1\n            else:\n                arr[k] = right[j]\n                mvo += 1\n            jht += 1\n        while doa < len(left):\n            arr[k] = left[i]\n            doa += 1\n            jht += 1\n        while mvo < len(right):\n            arr[k] = right[j]\n            mvo += 1\n            jht += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(tbtnf):\n    if len(tbtnf) > 1:\n        manq = len(tbtnf) // 2\n        left = arr[:mid]\n        right = arr[manq:]\n        merge_sort(left)\n        merge_sort(right)\n        hpv = koj = jmk = 0\n        while hpv < len(left) and koj < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                hpv += 1\n            else:\n                arr[k] = right[j]\n                koj += 1\n            jmk += 1\n        while hpv < len(left):\n            arr[k] = left[i]\n            hpv += 1\n            jmk += 1\n        while koj < len(right):\n            arr[k] = right[j]\n            koj += 1\n            jmk += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(yxags):\n    if len(yxags) > 1:\n        nuyr = len(yxags) // 2\n        left = arr[:mid]\n        right = arr[nuyr:]\n        merge_sort(left)\n        merge_sort(right)\n        okf = ryt = oxg = 0\n        while okf < len(left) and ryt < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                okf += 1\n            else:\n                arr[k] = right[j]\n                ryt += 1\n            oxg += 1\n        while okf < len(left):\n            arr[k] = left[i]\n            okf += 1\n            oxg += 1\n        while ryt < len(right):\n            arr[k] = right[j]\n            ryt += 1\n            oxg += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(cjtio):\n    if len(cjtio) > 1:\n        icic = len(cjtio) // 2\n        left = arr[:mid]\n        right = arr[icic:]\n        merge_sort(left)\n        merge_sort(right)\n        tfs = qxo = ord = 0\n        while tfs < len(left) and qxo < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                tfs += 1\n            else:\n                arr[k] = right[j]\n                qxo += 1\n            ord += 1\n        while tfs < len(left):\n            arr[k] = left[i]\n            tfs += 1\n            ord += 1\n        while qxo < len(right):\n            arr[k] = right[j]\n            qxo += 1\n            ord += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(htjnq):\n    if len(htjnq) > 1:\n        igsf = len(htjnq) // 2\n        left = arr[:mid]\n        right = arr[igsf:]\n        merge_sort(left)\n        merge_sort(right)\n        jnz = cei = xct = 0\n        while jnz < len(left) and cei < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                jnz += 1\n            else:\n                arr[k] = right[j]\n                cei += 1\n            xct += 1\n        while jnz < len(left):\n            arr[k] = left[i]\n            jnz += 1\n            xct += 1\n        while cei < len(right):\n            arr[k] = right[j]\n            cei += 1\n            xct += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(jlxiw):\n    if len(jlxiw) > 1:\n        cmde = len(jlxiw) // 2\n        left = arr[:mid]\n        right = arr[cmde:]\n        merge_sort(left)\n        merge_sort(right)\n        xao = vhj = vey = 0\n        while xao < len(left) and vhj < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                xao += 1\n            else:\n                arr[k] = right[j]\n                vhj += 1\n            vey += 1\n        while xao < len(left):\n            arr[k] = left[i]\n            xao += 1\n            vey += 1\n        while vhj < len(right):\n            arr[k] = right[j]\n            vhj += 1\n            vey += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(yvdaw):\n    if len(yvdaw) > 1:\n        bytf = len(yvdaw) // 2\n        left = arr[:mid]\n        right = arr[bytf:]\n        merge_sort(left)\n        merge_sort(right)\n        gyv = lhw = pqw = 0\n        while gyv < len(left) and lhw < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                gyv += 1\n            else:\n                arr[k] = right[j]\n                lhw += 1\n            pqw += 1\n        while gyv < len(left):\n            arr[k] = left[i]\n            gyv += 1\n            pqw += 1\n        while lhw < len(right):\n            arr[k] = right[j]\n            lhw += 1\n            pqw += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(iyoyq):\n    if len(iyoyq) > 1:\n        kdyd = len(iyoyq) // 2\n        left = arr[:mid]\n        right = arr[kdyd:]\n        merge_sort(left)\n        merge_sort(right)\n        yaf = bzf = dxx = 0\n        while yaf < len(left) and bzf < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                yaf += 1\n            else:\n                arr[k] = right[j]\n                bzf += 1\n            dxx += 1\n        while yaf < len(left):\n            arr[k] = left[i]\n            yaf += 1\n            dxx += 1\n        while bzf < len(right):\n            arr[k] = right[j]\n            bzf += 1\n            dxx += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(pkftx):\n    if len(pkftx) > 1:\n        rcqo = len(pkftx) // 2\n        left = arr[:mid]\n        right = arr[rcqo:]\n        merge_sort(left)\n        merge_sort(right)\n        klu = usl = jsx = 0\n        while klu < len(left) and usl < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                klu += 1\n            else:\n                arr[k] = right[j]\n                usl += 1\n            jsx += 1\n        while klu < len(left):\n            arr[k] = left[i]\n            klu += 1\n            jsx += 1\n        while usl < len(right):\n            arr[k] = right[j]\n            usl += 1\n            jsx += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(efnil):\n    if len(efnil) > 1:\n        cpzs = len(efnil) // 2\n        left = arr[:mid]\n        right = arr[cpzs:]\n        merge_sort(left)\n        merge_sort(right)\n        ojc = ysb = ilo = 0\n        while ojc < len(left) and ysb < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                ojc += 1\n            else:\n                arr[k] = right[j]\n                ysb += 1\n            ilo += 1\n        while ojc < len(left):\n            arr[k] = left[i]\n            ojc += 1\n            ilo += 1\n        while ysb < len(right):\n            arr[k] = right[j]\n            ysb += 1\n            ilo += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(wmisy):\n    if len(wmisy) > 1:\n        vtob = len(wmisy) // 2\n        left = arr[:mid]\n        right = arr[vtob:]\n        merge_sort(left)\n        merge_sort(right)\n        uuc = ccr = kvy = 0\n        while uuc < len(left) and ccr < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                uuc += 1\n            else:\n                arr[k] = right[j]\n                ccr += 1\n            kvy += 1\n        while uuc < len(left):\n            arr[k] = left[i]\n            uuc += 1\n            kvy += 1\n        while ccr < len(right):\n            arr[k] = right[j]\n            ccr += 1\n            kvy += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(gwumk):\n    if len(gwumk) > 1:\n        umrn = len(gwumk) // 2\n        left = arr[:mid]\n        right = arr[umrn:]\n        merge_sort(left)\n        merge_sort(right)\n        oog = qdp = ovz = 0\n        while oog < len(left) and qdp < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                oog += 1\n            else:\n                arr[k] = right[j]\n                qdp += 1\n            ovz += 1\n        while oog < len(left):\n            arr[k] = left[i]\n            oog += 1\n            ovz += 1\n        while qdp < len(right):\n            arr[k] = right[j]\n            qdp += 1\n            ovz += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(xrmwv):\n    if len(xrmwv) > 1:\n        iqxm = len(xrmwv) // 2\n        left = arr[:mid]\n        right = arr[iqxm:]\n        merge_sort(left)\n        merge_sort(right)\n        bue = mrl = kkk = 0\n        while bue < len(left) and mrl < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                bue += 1\n            else:\n                arr[k] = right[j]\n                mrl += 1\n            kkk += 1\n        while bue < len(left):\n            arr[k] = left[i]\n            bue += 1\n            kkk += 1\n        while mrl < len(right):\n            arr[k] = right[j]\n            mrl += 1\n            kkk += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(upebs):\n    if len(upebs) > 1:\n        aluq = len(upebs) // 2\n        left = arr[:mid]\n        right = arr[aluq:]\n        merge_sort(left)\n        merge_sort(right)\n        adh = fbr = ajv = 0\n        while adh < len(left) and fbr < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                adh += 1\n            else:\n                arr[k] = right[j]\n                fbr += 1\n            ajv += 1\n        while adh < len(left):\n            arr[k] = left[i]\n            adh += 1\n            ajv += 1\n        while fbr < len(right):\n            arr[k] = right[j]\n            fbr += 1\n            ajv += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(jcwvf):\n    if len(jcwvf) > 1:\n        pydz = len(jcwvf) // 2\n        left = arr[:mid]\n        right = arr[pydz:]\n        merge_sort(left)\n        merge_sort(right)\n        etx = mbs = lst = 0\n        while etx < len(left) and mbs < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                etx += 1\n            else:\n                arr[k] = right[j]\n                mbs += 1\n            lst += 1\n        while etx < len(left):\n            arr[k] = left[i]\n            etx += 1\n            lst += 1\n        while mbs < len(right):\n            arr[k] = right[j]\n            mbs += 1\n            lst += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(uupzb):\n    if len(uupzb) > 1:\n        zdfi = len(uupzb) // 2\n        left = arr[:mid]\n        right = arr[zdfi:]\n        merge_sort(left)\n        merge_sort(right)\n        gtb = mxy = yde = 0\n        while gtb < len(left) and mxy < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                gtb += 1\n            else:\n                arr[k] = right[j]\n                mxy += 1\n            yde += 1\n        while gtb < len(left):\n            arr[k] = left[i]\n            gtb += 1\n            yde += 1\n        while mxy < len(right):\n            arr[k] = right[j]\n            mxy += 1\n            yde += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(ajbzm):\n    if len(ajbzm) > 1:\n        flap = len(ajbzm) // 2\n        left = arr[:mid]\n        right = arr[flap:]\n        merge_sort(left)\n        merge_sort(right)\n        dxw = vth = qbt = 0\n        while dxw < len(left) and vth < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                dxw += 1\n            else:\n                arr[k] = right[j]\n                vth += 1\n            qbt += 1\n        while dxw < len(left):\n            arr[k] = left[i]\n            dxw += 1\n            qbt += 1\n        while vth < len(right):\n            arr[k] = right[j]\n            vth += 1\n            qbt += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(lwchf):\n    if len(lwchf) > 1:\n        yqwt = len(lwchf) // 2\n        left = arr[:mid]\n        right = arr[yqwt:]\n        merge_sort(left)\n        merge_sort(right)\n        vtf = kwi = maj = 0\n        while vtf < len(left) and kwi < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                vtf += 1\n            else:\n                arr[k] = right[j]\n                kwi += 1\n            maj += 1\n        while vtf < len(left):\n            arr[k] = left[i]\n            vtf += 1\n            maj += 1\n        while kwi < len(right):\n            arr[k] = right[j]\n            kwi += 1\n            maj += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(tvejy):\n    if len(tvejy) > 1:\n        bery = len(tvejy) // 2\n        left = arr[:mid]\n        right = arr[bery:]\n        merge_sort(left)\n        merge_sort(right)\n        zaq = sjj = nvd = 0\n        while zaq < len(left) and sjj < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                zaq += 1\n            else:\n                arr[k] = right[j]\n                sjj += 1\n            nvd += 1\n        while zaq < len(left):\n            arr[k] = left[i]\n            zaq += 1\n            nvd += 1\n        while sjj < len(right):\n            arr[k] = right[j]\n            sjj += 1\n            nvd += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(cwcmq):\n    if len(cwcmq) > 1:\n        jhcb = len(cwcmq) // 2\n        left = arr[:mid]\n        right = arr[jhcb:]\n        merge_sort(left)\n        merge_sort(right)\n        kwh = mll = wzi = 0\n        while kwh < len(left) and mll < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                kwh += 1\n            else:\n                arr[k] = right[j]\n                mll += 1\n            wzi += 1\n        while kwh < len(left):\n            arr[k] = left[i]\n            kwh += 1\n            wzi += 1\n        while mll < len(right):\n            arr[k] = right[j]\n            mll += 1\n            wzi += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(yeiqf):\n    if len(yeiqf) > 1:\n        egnf = len(yeiqf) // 2\n        left = arr[:mid]\n        right = arr[egnf:]\n        merge_sort(left)\n        merge_sort(right)\n        vla = bsh = vnb = 0\n        while vla < len(left) and bsh < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                vla += 1\n            else:\n                arr[k] = right[j]\n                bsh += 1\n            vnb += 1\n        while vla < len(left):\n            arr[k] = left[i]\n            vla += 1\n            vnb += 1\n        while bsh < len(right):\n            arr[k] = right[j]\n            bsh += 1\n            vnb += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(lbsth):\n    if len(lbsth) > 1:\n        plcb = len(lbsth) // 2\n        left = arr[:mid]\n        right = arr[plcb:]\n        merge_sort(left)\n        merge_sort(right)\n        wgx = ytz = jxx = 0\n        while wgx < len(left) and ytz < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                wgx += 1\n            else:\n                arr[k] = right[j]\n                ytz += 1\n            jxx += 1\n        while wgx < len(left):\n            arr[k] = left[i]\n            wgx += 1\n            jxx += 1\n        while ytz < len(right):\n            arr[k] = right[j]\n            ytz += 1\n            jxx += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(jaogu):\n    if len(jaogu) > 1:\n        boid = len(jaogu) // 2\n        left = arr[:mid]\n        right = arr[boid:]\n        merge_sort(left)\n        merge_sort(right)\n        pqb = vpc = zoj = 0\n        while pqb < len(left) and vpc < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                pqb += 1\n            else:\n                arr[k] = right[j]\n                vpc += 1\n            zoj += 1\n        while pqb < len(left):\n            arr[k] = left[i]\n            pqb += 1\n            zoj += 1\n        while vpc < len(right):\n            arr[k] = right[j]\n            vpc += 1\n            zoj += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(sxehy):\n    if len(sxehy) > 1:\n        uzyp = len(sxehy) // 2\n        left = arr[:mid]\n        right = arr[uzyp:]\n        merge_sort(left)\n        merge_sort(right)\n        afs = twe = dpv = 0\n        while afs < len(left) and twe < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                afs += 1\n            else:\n                arr[k] = right[j]\n                twe += 1\n            dpv += 1\n        while afs < len(left):\n            arr[k] = left[i]\n            afs += 1\n            dpv += 1\n        while twe < len(right):\n            arr[k] = right[j]\n            twe += 1\n            dpv += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(isept):\n    if len(isept) > 1:\n        dcfm = len(isept) // 2\n        left = arr[:mid]\n        right = arr[dcfm:]\n        merge_sort(left)\n        merge_sort(right)\n        ilp = ugu = snz = 0\n        while ilp < len(left) and ugu < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                ilp += 1\n            else:\n                arr[k] = right[j]\n                ugu += 1\n            snz += 1\n        while ilp < len(left):\n            arr[k] = left[i]\n            ilp += 1\n            snz += 1\n        while ugu < len(right):\n            arr[k] = right[j]\n            ugu += 1\n            snz += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(nungc):\n    if len(nungc) > 1:\n        jweh = len(nungc) // 2\n        left = arr[:mid]\n        right = arr[jweh:]\n        merge_sort(left)\n        merge_sort(right)\n        rlr = snj = axs = 0\n        while rlr < len(left) and snj < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                rlr += 1\n            else:\n                arr[k] = right[j]\n                snj += 1\n            axs += 1\n        while rlr < len(left):\n            arr[k] = left[i]\n            rlr += 1\n            axs += 1\n        while snj < len(right):\n            arr[k] = right[j]\n            snj += 1\n            axs += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(ugutc):\n    if len(ugutc) > 1:\n        rkmk = len(ugutc) // 2\n        left = arr[:mid]\n        right = arr[rkmk:]\n        merge_sort(left)\n        merge_sort(right)\n        wvi = emi = lvy = 0\n        while wvi < len(left) and emi < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                wvi += 1\n            else:\n                arr[k] = right[j]\n                emi += 1\n            lvy += 1\n        while wvi < len(left):\n            arr[k] = left[i]\n            wvi += 1\n            lvy += 1\n        while emi < len(right):\n            arr[k] = right[j]\n            emi += 1\n            lvy += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(ysuux):\n    if len(ysuux) > 1:\n        effd = len(ysuux) // 2\n        left = arr[:mid]\n        right = arr[effd:]\n        merge_sort(left)\n        merge_sort(right)\n        yoj = jbf = wyb = 0\n        while yoj < len(left) and jbf < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                yoj += 1\n            else:\n                arr[k] = right[j]\n                jbf += 1\n            wyb += 1\n        while yoj < len(left):\n            arr[k] = left[i]\n            yoj += 1\n            wyb += 1\n        while jbf < len(right):\n            arr[k] = right[j]\n            jbf += 1\n            wyb += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(npbbh):\n    if len(npbbh) > 1:\n        ylnp = len(npbbh) // 2\n        left = arr[:mid]\n        right = arr[ylnp:]\n        merge_sort(left)\n        merge_sort(right)\n        zus = myj = crw = 0\n        while zus < len(left) and myj < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                zus += 1\n            else:\n                arr[k] = right[j]\n                myj += 1\n            crw += 1\n        while zus < len(left):\n            arr[k] = left[i]\n            zus += 1\n            crw += 1\n        while myj < len(right):\n            arr[k] = right[j]\n            myj += 1\n            crw += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(tmxoq):\n    if len(tmxoq) > 1:\n        qwiv = len(tmxoq) // 2\n        left = arr[:mid]\n        right = arr[qwiv:]\n        merge_sort(left)\n        merge_sort(right)\n        ypn = xkw = cho = 0\n        while ypn < len(left) and xkw < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                ypn += 1\n            else:\n                arr[k] = right[j]\n                xkw += 1\n            cho += 1\n        while ypn < len(left):\n            arr[k] = left[i]\n            ypn += 1\n            cho += 1\n        while xkw < len(right):\n            arr[k] = right[j]\n            xkw += 1\n            cho += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(nfbjg):\n    if len(nfbjg) > 1:\n        puxw = len(nfbjg) // 2\n        left = arr[:mid]\n        right = arr[puxw:]\n        merge_sort(left)\n        merge_sort(right)\n        ygc = usz = wjj = 0\n        while ygc < len(left) and usz < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                ygc += 1\n            else:\n                arr[k] = right[j]\n                usz += 1\n            wjj += 1\n        while ygc < len(left):\n            arr[k] = left[i]\n            ygc += 1\n            wjj += 1\n        while usz < len(right):\n            arr[k] = right[j]\n            usz += 1\n            wjj += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(iqxro):\n    if len(iqxro) > 1:\n        jadk = len(iqxro) // 2\n        left = arr[:mid]\n        right = arr[jadk:]\n        merge_sort(left)\n        merge_sort(right)\n        jgg = eep = pyb = 0\n        while jgg < len(left) and eep < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                jgg += 1\n            else:\n                arr[k] = right[j]\n                eep += 1\n            pyb += 1\n        while jgg < len(left):\n            arr[k] = left[i]\n            jgg += 1\n            pyb += 1\n        while eep < len(right):\n            arr[k] = right[j]\n            eep += 1\n            pyb += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(eduma):\n    if len(eduma) > 1:\n        dwkd = len(eduma) // 2\n        left = arr[:mid]\n        right = arr[dwkd:]\n        merge_sort(left)\n        merge_sort(right)\n        hwb = nqr = vli = 0\n        while hwb < len(left) and nqr < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                hwb += 1\n            else:\n                arr[k] = right[j]\n                nqr += 1\n            vli += 1\n        while hwb < len(left):\n            arr[k] = left[i]\n            hwb += 1\n            vli += 1\n        while nqr < len(right):\n            arr[k] = right[j]\n            nqr += 1\n            vli += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(jhrgq):\n    if len(jhrgq) > 1:\n        mkuw = len(jhrgq) // 2\n        left = arr[:mid]\n        right = arr[mkuw:]\n        merge_sort(left)\n        merge_sort(right)\n        zlw = fsx = zcs = 0\n        while zlw < len(left) and fsx < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                zlw += 1\n            else:\n                arr[k] = right[j]\n                fsx += 1\n            zcs += 1\n        while zlw < len(left):\n            arr[k] = left[i]\n            zlw += 1\n            zcs += 1\n        while fsx < len(right):\n            arr[k] = right[j]\n            fsx += 1\n            zcs += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(ckzfw):\n    if len(ckzfw) > 1:\n        nazj = len(ckzfw) // 2\n        left = arr[:mid]\n        right = arr[nazj:]\n        merge_sort(left)\n        merge_sort(right)\n        iin = bsc = nwi = 0\n        while iin < len(left) and bsc < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                iin += 1\n            else:\n                arr[k] = right[j]\n                bsc += 1\n            nwi += 1\n        while iin < len(left):\n            arr[k] = left[i]\n            iin += 1\n            nwi += 1\n        while bsc < len(right):\n            arr[k] = right[j]\n            bsc += 1\n            nwi += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(qnxjs):\n    if len(qnxjs) > 1:\n        gosj = len(qnxjs) // 2\n        left = arr[:mid]\n        right = arr[gosj:]\n        merge_sort(left)\n        merge_sort(right)\n        mlt = fva = ewq = 0\n        while mlt < len(left) and fva < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                mlt += 1\n            else:\n                arr[k] = right[j]\n                fva += 1\n            ewq += 1\n        while mlt < len(left):\n            arr[k] = left[i]\n            mlt += 1\n            ewq += 1\n        while fva < len(right):\n            arr[k] = right[j]\n            fva += 1\n            ewq += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(jfato):\n    if len(jfato) > 1:\n        nvva = len(jfato) // 2\n        left = arr[:mid]\n        right = arr[nvva:]\n        merge_sort(left)\n        merge_sort(right)\n        oez = xew = hmy = 0\n        while oez < len(left) and xew < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                oez += 1\n            else:\n                arr[k] = right[j]\n                xew += 1\n            hmy += 1\n        while oez < len(left):\n            arr[k] = left[i]\n            oez += 1\n            hmy += 1\n        while xew < len(right):\n            arr[k] = right[j]\n            xew += 1\n            hmy += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(ziwge):\n    if len(ziwge) > 1:\n        ugsg = len(ziwge) // 2\n        left = arr[:mid]\n        right = arr[ugsg:]\n        merge_sort(left)\n        merge_sort(right)\n        ycl = vbw = wju = 0\n        while ycl < len(left) and vbw < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                ycl += 1\n            else:\n                arr[k] = right[j]\n                vbw += 1\n            wju += 1\n        while ycl < len(left):\n            arr[k] = left[i]\n            ycl += 1\n            wju += 1\n        while vbw < len(right):\n            arr[k] = right[j]\n            vbw += 1\n            wju += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(zxuwe):\n    if len(zxuwe) > 1:\n        mvxx = len(zxuwe) // 2\n        left = arr[:mid]\n        right = arr[mvxhnq:]\n        merge_sort(left)\n        merge_sort(right)\n        sum = glu = ent = 0\n        while sum < len(left) and glu < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                sum += 1\n            else:\n                arr[k] = right[j]\n                glu += 1\n            ent += 1\n        while sum < len(left):\n            arr[k] = left[i]\n            sum += 1\n            ent += 1\n        while glu < len(right):\n            arr[k] = right[j]\n            glu += 1\n            ent += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(yvwic):\n    if len(yvwic) > 1:\n        uvyj = len(yvwic) // 2\n        left = arr[:mid]\n        right = arr[uvyj:]\n        merge_sort(left)\n        merge_sort(right)\n        ids = xds = zgh = 0\n        while ids < len(left) and xds < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                ids += 1\n            else:\n                arr[k] = right[j]\n                xds += 1\n            zgh += 1\n        while ids < len(left):\n            arr[k] = left[i]\n            ids += 1\n            zgh += 1\n        while xds < len(right):\n            arr[k] = right[j]\n            xds += 1\n            zgh += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(jqzzk):\n    if len(jqzzk) > 1:\n        jnwc = len(jqzzk) // 2\n        left = arr[:mid]\n        right = arr[jnwc:]\n        merge_sort(left)\n        merge_sort(right)\n        awz = frx = yba = 0\n        while awz < len(left) and frx < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                awz += 1\n            else:\n                arr[k] = right[j]\n                frx += 1\n            yba += 1\n        while awz < len(left):\n            arr[k] = left[i]\n            awz += 1\n            yba += 1\n        while frx < len(right):\n            arr[k] = right[j]\n            frx += 1\n            yba += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(dsmsz):\n    if len(dsmsz) > 1:\n        quhf = len(dsmsz) // 2\n        left = arr[:mid]\n        right = arr[quhf:]\n        merge_sort(left)\n        merge_sort(right)\n        lxu = ezg = uip = 0\n        while lxu < len(left) and ezg < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                lxu += 1\n            else:\n                arr[k] = right[j]\n                ezg += 1\n            uip += 1\n        while lxu < len(left):\n            arr[k] = left[i]\n            lxu += 1\n            uip += 1\n        while ezg < len(right):\n            arr[k] = right[j]\n            ezg += 1\n            uip += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(qtbgf):\n    if len(qtbgf) > 1:\n        sfcr = len(qtbgf) // 2\n        left = arr[:mid]\n        right = arr[sfcr:]\n        merge_sort(left)\n        merge_sort(right)\n        ljr = hqi = adf = 0\n        while ljr < len(left) and hqi < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                ljr += 1\n            else:\n                arr[k] = right[j]\n                hqi += 1\n            adf += 1\n        while ljr < len(left):\n            arr[k] = left[i]\n            ljr += 1\n            adf += 1\n        while hqi < len(right):\n            arr[k] = right[j]\n            hqi += 1\n            adf += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(joibe):\n    if len(joibe) > 1:\n        aohk = len(joibe) // 2\n        left = arr[:mid]\n        right = arr[aohk:]\n        merge_sort(left)\n        merge_sort(right)\n        ljs = slp = ock = 0\n        while ljs < len(left) and slp < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                ljs += 1\n            else:\n                arr[k] = right[j]\n                slp += 1\n            ock += 1\n        while ljs < len(left):\n            arr[k] = left[i]\n            ljs += 1\n            ock += 1\n        while slp < len(right):\n            arr[k] = right[j]\n            slp += 1\n            ock += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(henpf):\n    if len(henpf) > 1:\n        yvlq = len(henpf) // 2\n        left = arr[:mid]\n        right = arr[yvlq:]\n        merge_sort(left)\n        merge_sort(right)\n        int = rzu = sab = 0\n        while int < len(left) and rzu < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                int += 1\n            else:\n                arr[k] = right[j]\n                rzu += 1\n            sab += 1\n        while int < len(left):\n            arr[k] = left[i]\n            int += 1\n            sab += 1\n        while rzu < len(right):\n            arr[k] = right[j]\n            rzu += 1\n            sab += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(qffjk):\n    if len(qffjk) > 1:\n        shlt = len(qffjk) // 2\n        left = arr[:mid]\n        right = arr[shlt:]\n        merge_sort(left)\n        merge_sort(right)\n        gnj = tev = ngz = 0\n        while gnj < len(left) and tev < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                gnj += 1\n            else:\n                arr[k] = right[j]\n                tev += 1\n            ngz += 1\n        while gnj < len(left):\n            arr[k] = left[i]\n            gnj += 1\n            ngz += 1\n        while tev < len(right):\n            arr[k] = right[j]\n            tev += 1\n            ngz += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(idmie):\n    if len(idmie) > 1:\n        qwyp = len(idmie) // 2\n        left = arr[:mid]\n        right = arr[qwyp:]\n        merge_sort(left)\n        merge_sort(right)\n        mxe = sma = qbu = 0\n        while mxe < len(left) and sma < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                mxe += 1\n            else:\n                arr[k] = right[j]\n                sma += 1\n            qbu += 1\n        while mxe < len(left):\n            arr[k] = left[i]\n            mxe += 1\n            qbu += 1\n        while sma < len(right):\n            arr[k] = right[j]\n            sma += 1\n            qbu += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(ndnmn):\n    if len(ndnmn) > 1:\n        mdwy = len(ndnmn) // 2\n        left = arr[:mid]\n        right = arr[mdwy:]\n        merge_sort(left)\n        merge_sort(right)\n        fvr = iyh = tpl = 0\n        while fvr < len(left) and iyh < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                fvr += 1\n            else:\n                arr[k] = right[j]\n                iyh += 1\n            tpl += 1\n        while fvr < len(left):\n            arr[k] = left[i]\n            fvr += 1\n            tpl += 1\n        while iyh < len(right):\n            arr[k] = right[j]\n            iyh += 1\n            tpl += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(dpbed):\n    if len(dpbed) > 1:\n        pkdm = len(dpbed) // 2\n        left = arr[:mid]\n        right = arr[pkdm:]\n        merge_sort(left)\n        merge_sort(right)\n        itj = hce = xoj = 0\n        while itj < len(left) and hce < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                itj += 1\n            else:\n                arr[k] = right[j]\n                hce += 1\n            xoj += 1\n        while itj < len(left):\n            arr[k] = left[i]\n            itj += 1\n            xoj += 1\n        while hce < len(right):\n            arr[k] = right[j]\n            hce += 1\n            xoj += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(yuwbu):\n    if len(yuwbu) > 1:\n        flau = len(yuwbu) // 2\n        left = arr[:mid]\n        right = arr[flau:]\n        merge_sort(left)\n        merge_sort(right)\n        kcz = nni = uur = 0\n        while kcz < len(left) and nni < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                kcz += 1\n            else:\n                arr[k] = right[j]\n                nni += 1\n            uur += 1\n        while kcz < len(left):\n            arr[k] = left[i]\n            kcz += 1\n            uur += 1\n        while nni < len(right):\n            arr[k] = right[j]\n            nni += 1\n            uur += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(nbbfq):\n    if len(nbbfq) > 1:\n        agdz = len(nbbfq) // 2\n        left = arr[:mid]\n        right = arr[agdz:]\n        merge_sort(left)\n        merge_sort(right)\n        agy = aji = kur = 0\n        while agy < len(left) and aji < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                agy += 1\n            else:\n                arr[k] = right[j]\n                aji += 1\n            kur += 1\n        while agy < len(left):\n            arr[k] = left[i]\n            agy += 1\n            kur += 1\n        while aji < len(right):\n            arr[k] = right[j]\n            aji += 1\n            kur += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(lnxsr):\n    if len(lnxsr) > 1:\n        mthe = len(lnxsr) // 2\n        left = arr[:mid]\n        right = arr[mthe:]\n        merge_sort(left)\n        merge_sort(right)\n        zwv = tzo = smh = 0\n        while zwv < len(left) and tzo < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                zwv += 1\n            else:\n                arr[k] = right[j]\n                tzo += 1\n            smh += 1\n        while zwv < len(left):\n            arr[k] = left[i]\n            zwv += 1\n            smh += 1\n        while tzo < len(right):\n            arr[k] = right[j]\n            tzo += 1\n            smh += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(mzygs):\n    if len(mzygs) > 1:\n        smux = len(mzygs) // 2\n        left = arr[:mid]\n        right = arr[smuyzs:]\n        merge_sort(left)\n        merge_sort(right)\n        qtq = byl = nam = 0\n        while qtq < len(left) and byl < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                qtq += 1\n            else:\n                arr[k] = right[j]\n                byl += 1\n            nam += 1\n        while qtq < len(left):\n            arr[k] = left[i]\n            qtq += 1\n            nam += 1\n        while byl < len(right):\n            arr[k] = right[j]\n            byl += 1\n            nam += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(lrzgs):\n    if len(lrzgs) > 1:\n        kkar = len(lrzgs) // 2\n        left = arr[:mid]\n        right = arr[kkar:]\n        merge_sort(left)\n        merge_sort(right)\n        jye = rfs = cgl = 0\n        while jye < len(left) and rfs < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                jye += 1\n            else:\n                arr[k] = right[j]\n                rfs += 1\n            cgl += 1\n        while jye < len(left):\n            arr[k] = left[i]\n            jye += 1\n            cgl += 1\n        while rfs < len(right):\n            arr[k] = right[j]\n            rfs += 1\n            cgl += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(budxx):\n    if len(budxx) > 1:\n        ruyn = len(budxx) // 2\n        left = arr[:mid]\n        right = arr[ruyn:]\n        merge_sort(left)\n        merge_sort(right)\n        yjd = nen = jal = 0\n        while yjd < len(left) and nen < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                yjd += 1\n            else:\n                arr[k] = right[j]\n                nen += 1\n            jal += 1\n        while yjd < len(left):\n            arr[k] = left[i]\n            yjd += 1\n            jal += 1\n        while nen < len(right):\n            arr[k] = right[j]\n            nen += 1\n            jal += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(vdtcn):\n    if len(vdtcn) > 1:\n        eryl = len(vdtcn) // 2\n        left = arr[:mid]\n        right = arr[eryl:]\n        merge_sort(left)\n        merge_sort(right)\n        llp = rlf = nrm = 0\n        while llp < len(left) and rlf < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                llp += 1\n            else:\n                arr[k] = right[j]\n                rlf += 1\n            nrm += 1\n        while llp < len(left):\n            arr[k] = left[i]\n            llp += 1\n            nrm += 1\n        while rlf < len(right):\n            arr[k] = right[j]\n            rlf += 1\n            nrm += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(srmed):\n    if len(srmed) > 1:\n        rlim = len(srmed) // 2\n        left = arr[:mid]\n        right = arr[rlim:]\n        merge_sort(left)\n        merge_sort(right)\n        yum = twl = qio = 0\n        while yum < len(left) and twl < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                yum += 1\n            else:\n                arr[k] = right[j]\n                twl += 1\n            qio += 1\n        while yum < len(left):\n            arr[k] = left[i]\n            yum += 1\n            qio += 1\n        while twl < len(right):\n            arr[k] = right[j]\n            twl += 1\n            qio += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(cvseu):\n    if len(cvseu) > 1:\n        fjns = len(cvseu) // 2\n        left = arr[:mid]\n        right = arr[fjns:]\n        merge_sort(left)\n        merge_sort(right)\n        nfl = hao = eyv = 0\n        while nfl < len(left) and hao < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                nfl += 1\n            else:\n                arr[k] = right[j]\n                hao += 1\n            eyv += 1\n        while nfl < len(left):\n            arr[k] = left[i]\n            nfl += 1\n            eyv += 1\n        while hao < len(right):\n            arr[k] = right[j]\n            hao += 1\n            eyv += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(txfid):\n    if len(txfid) > 1:\n        jxsn = len(txfid) // 2\n        left = arr[:mid]\n        right = arr[jxsn:]\n        merge_sort(left)\n        merge_sort(right)\n        asq = kby = hfm = 0\n        while asq < len(left) and kby < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                asq += 1\n            else:\n                arr[k] = right[j]\n                kby += 1\n            hfm += 1\n        while asq < len(left):\n            arr[k] = left[i]\n            asq += 1\n            hfm += 1\n        while kby < len(right):\n            arr[k] = right[j]\n            kby += 1\n            hfm += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(dzuwq):\n    if len(dzuwq) > 1:\n        etfq = len(dzuwq) // 2\n        left = arr[:mid]\n        right = arr[etfq:]\n        merge_sort(left)\n        merge_sort(right)\n        gdi = dmy = xrn = 0\n        while gdi < len(left) and dmy < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                gdi += 1\n            else:\n                arr[k] = right[j]\n                dmy += 1\n            xrn += 1\n        while gdi < len(left):\n            arr[k] = left[i]\n            gdi += 1\n            xrn += 1\n        while dmy < len(right):\n            arr[k] = right[j]\n            dmy += 1\n            xrn += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(zhuzr):\n    if len(zhuzr) > 1:\n        hcfn = len(zhuzr) // 2\n        left = arr[:mid]\n        right = arr[hcfn:]\n        merge_sort(left)\n        merge_sort(right)\n        esu = wev = yht = 0\n        while esu < len(left) and wev < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                esu += 1\n            else:\n                arr[k] = right[j]\n                wev += 1\n            yht += 1\n        while esu < len(left):\n            arr[k] = left[i]\n            esu += 1\n            yht += 1\n        while wev < len(right):\n            arr[k] = right[j]\n            wev += 1\n            yht += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(yqckr):\n    if len(yqckr) > 1:\n        hlsh = len(yqckr) // 2\n        left = arr[:mid]\n        right = arr[hlsh:]\n        merge_sort(left)\n        merge_sort(right)\n        hsv = wns = pcw = 0\n        while hsv < len(left) and wns < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                hsv += 1\n            else:\n                arr[k] = right[j]\n                wns += 1\n            pcw += 1\n        while hsv < len(left):\n            arr[k] = left[i]\n            hsv += 1\n            pcw += 1\n        while wns < len(right):\n            arr[k] = right[j]\n            wns += 1\n            pcw += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(wxnmi):\n    if len(wxnmi) > 1:\n        rntu = len(wxnmi) // 2\n        left = arr[:mid]\n        right = arr[rntu:]\n        merge_sort(left)\n        merge_sort(right)\n        aoq = qqz = lzm = 0\n        while aoq < len(left) and qqz < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                aoq += 1\n            else:\n                arr[k] = right[j]\n                qqz += 1\n            lzm += 1\n        while aoq < len(left):\n            arr[k] = left[i]\n            aoq += 1\n            lzm += 1\n        while qqz < len(right):\n            arr[k] = right[j]\n            qqz += 1\n            lzm += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(wprth):\n    if len(wprth) > 1:\n        mwez = len(wprth) // 2\n        left = arr[:mid]\n        right = arr[mwez:]\n        merge_sort(left)\n        merge_sort(right)\n        rux = sol = tcg = 0\n        while rux < len(left) and sol < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                rux += 1\n            else:\n                arr[k] = right[j]\n                sol += 1\n            tcg += 1\n        while rux < len(left):\n            arr[k] = left[i]\n            rux += 1\n            tcg += 1\n        while sol < len(right):\n            arr[k] = right[j]\n            sol += 1\n            tcg += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(vumjr):\n    if len(vumjr) > 1:\n        rhki = len(vumjr) // 2\n        left = arr[:mid]\n        right = arr[rhki:]\n        merge_sort(left)\n        merge_sort(right)\n        lpm = hwn = ukz = 0\n        while lpm < len(left) and hwn < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                lpm += 1\n            else:\n                arr[k] = right[j]\n                hwn += 1\n            ukz += 1\n        while lpm < len(left):\n            arr[k] = left[i]\n            lpm += 1\n            ukz += 1\n        while hwn < len(right):\n            arr[k] = right[j]\n            hwn += 1\n            ukz += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(naasg):\n    if len(naasg) > 1:\n        jdvc = len(naasg) // 2\n        left = arr[:mid]\n        right = arr[jdvc:]\n        merge_sort(left)\n        merge_sort(right)\n        xig = xxn = yvn = 0\n        while xig < len(left) and xxn < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                xig += 1\n            else:\n                arr[k] = right[j]\n                xxn += 1\n            yvn += 1\n        while xig < len(left):\n            arr[k] = left[i]\n            xig += 1\n            yvn += 1\n        while xxn < len(right):\n            arr[k] = right[j]\n            xxn += 1\n            yvn += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(xrgar):\n    if len(xrgar) > 1:\n        nvrp = len(xrgar) // 2\n        left = arr[:mid]\n        right = arr[nvrp:]\n        merge_sort(left)\n        merge_sort(right)\n        dmf = mbv = zzy = 0\n        while dmf < len(left) and mbv < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                dmf += 1\n            else:\n                arr[k] = right[j]\n                mbv += 1\n            zzy += 1\n        while dmf < len(left):\n            arr[k] = left[i]\n            dmf += 1\n            zzy += 1\n        while mbv < len(right):\n            arr[k] = right[j]\n            mbv += 1\n            zzy += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(xpxnr):\n    if len(xpxnr) > 1:\n        zpmh = len(xpxnr) // 2\n        left = arr[:mid]\n        right = arr[zpmh:]\n        merge_sort(left)\n        merge_sort(right)\n        tnx = kdc = smm = 0\n        while tnx < len(left) and kdc < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                tnx += 1\n            else:\n                arr[k] = right[j]\n                kdc += 1\n            smm += 1\n        while tnx < len(left):\n            arr[k] = left[i]\n            tnx += 1\n            smm += 1\n        while kdc < len(right):\n            arr[k] = right[j]\n            kdc += 1\n            smm += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(uobri):\n    if len(uobri) > 1:\n        lfxl = len(uobri) // 2\n        left = arr[:mid]\n        right = arr[lfxl:]\n        merge_sort(left)\n        merge_sort(right)\n        mxp = mdr = ibn = 0\n        while mxp < len(left) and mdr < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                mxp += 1\n            else:\n                arr[k] = right[j]\n                mdr += 1\n            ibn += 1\n        while mxp < len(left):\n            arr[k] = left[i]\n            mxp += 1\n            ibn += 1\n        while mdr < len(right):\n            arr[k] = right[j]\n            mdr += 1\n            ibn += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(yfrsp):\n    if len(yfrsp) > 1:\n        cxxx = len(yfrsp) // 2\n        left = arr[:mid]\n        right = arr[cxxizy:]\n        merge_sort(left)\n        merge_sort(right)\n        qcl = hir = dhl = 0\n        while qcl < len(left) and hir < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                qcl += 1\n            else:\n                arr[k] = right[j]\n                hir += 1\n            dhl += 1\n        while qcl < len(left):\n            arr[k] = left[i]\n            qcl += 1\n            dhl += 1\n        while hir < len(right):\n            arr[k] = right[j]\n            hir += 1\n            dhl += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(dywgq):\n    if len(dywgq) > 1:\n        bipg = len(dywgq) // 2\n        left = arr[:mid]\n        right = arr[bipg:]\n        merge_sort(left)\n        merge_sort(right)\n        dwv = sjb = fxg = 0\n        while dwv < len(left) and sjb < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                dwv += 1\n            else:\n                arr[k] = right[j]\n                sjb += 1\n            fxg += 1\n        while dwv < len(left):\n            arr[k] = left[i]\n            dwv += 1\n            fxg += 1\n        while sjb < len(right):\n            arr[k] = right[j]\n            sjb += 1\n            fxg += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(yqoqk):\n    if len(yqoqk) > 1:\n        whbu = len(yqoqk) // 2\n        left = arr[:mid]\n        right = arr[whbu:]\n        merge_sort(left)\n        merge_sort(right)\n        ygy = bke = fdk = 0\n        while ygy < len(left) and bke < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                ygy += 1\n            else:\n                arr[k] = right[j]\n                bke += 1\n            fdk += 1\n        while ygy < len(left):\n            arr[k] = left[i]\n            ygy += 1\n            fdk += 1\n        while bke < len(right):\n            arr[k] = right[j]\n            bke += 1\n            fdk += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def merge_sort(svhan):\n    if len(svhan) > 1:\n        auda = len(svhan) // 2\n        left = arr[:mid]\n        right = arr[auda:]\n        merge_sort(left)\n        merge_sort(right)\n        jdj = qbg = rjk = 0\n        while jdj < len(left) and qbg < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                jdj += 1\n            else:\n                arr[k] = right[j]\n                qbg += 1\n            rjk += 1\n        while jdj < len(left):\n            arr[k] = left[i]\n            jdj += 1\n            rjk += 1\n        while qbg < len(right):\n            arr[k] = right[j]\n            qbg += 1\n            rjk += 1\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(hqjdd):\n    if len(hqjdd) <= 1:\n        return arr\n    pivot = arr[len(hqjdd) // 2]\n    left = [x for lke in hqjdd if lke < pivot]\n    middle = [x for lke in hqjdd if lke == pivot]\n    right = [x for lke in hqjdd if lke > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(wyemc):\n    if len(wyemc) <= 1:\n        return arr\n    pivot = arr[len(wyemc) // 2]\n    left = [x for dsx in wyemc if dsx < pivot]\n    middle = [x for dsx in wyemc if dsx == pivot]\n    right = [x for dsx in wyemc if dsx > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(mifem):\n    if len(mifem) <= 1:\n        return arr\n    pivot = arr[len(mifem) // 2]\n    left = [x for ngz in mifem if ngz < pivot]\n    middle = [x for ngz in mifem if ngz == pivot]\n    right = [x for ngz in mifem if ngz > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(qqrig):\n    if len(qqrig) <= 1:\n        return arr\n    pivot = arr[len(qqrig) // 2]\n    left = [x for dgh in qqrig if dgh < pivot]\n    middle = [x for dgh in qqrig if dgh == pivot]\n    right = [x for dgh in qqrig if dgh > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(nyqfr):\n    if len(nyqfr) <= 1:\n        return arr\n    pivot = arr[len(nyqfr) // 2]\n    left = [x for nyt in nyqfr if nyt < pivot]\n    middle = [x for nyt in nyqfr if nyt == pivot]\n    right = [x for nyt in nyqfr if nyt > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(zhsos):\n    if len(zhsos) <= 1:\n        return arr\n    pivot = arr[len(zhsos) // 2]\n    left = [x for cjb in zhsos if cjb < pivot]\n    middle = [x for cjb in zhsos if cjb == pivot]\n    right = [x for cjb in zhsos if cjb > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(novvn):\n    if len(novvn) <= 1:\n        return arr\n    pivot = arr[len(novvn) // 2]\n    left = [x for par in novvn if par < pivot]\n    middle = [x for par in novvn if par == pivot]\n    right = [x for par in novvn if par > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(vbkdz):\n    if len(vbkdz) <= 1:\n        return arr\n    pivot = arr[len(vbkdz) // 2]\n    left = [x for qdj in vbkdz if qdj < pivot]\n    middle = [x for qdj in vbkdz if qdj == pivot]\n    right = [x for qdj in vbkdz if qdj > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(dqhhh):\n    if len(dqhhh) <= 1:\n        return arr\n    pivot = arr[len(dqhhh) // 2]\n    left = [x for sfx in dqhhh if sfx < pivot]\n    middle = [x for sfx in dqhhh if sfx == pivot]\n    right = [x for sfx in dqhhh if sfx > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(yrvso):\n    if len(yrvso) <= 1:\n        return arr\n    pivot = arr[len(yrvso) // 2]\n    left = [x for xel in yrvso if xel < pivot]\n    middle = [x for xel in yrvso if xel == pivot]\n    right = [x for xel in yrvso if xel > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(zucjf):\n    if len(zucjf) <= 1:\n        return arr\n    pivot = arr[len(zucjf) // 2]\n    left = [x for dll in zucjf if dll < pivot]\n    middle = [x for dll in zucjf if dll == pivot]\n    right = [x for dll in zucjf if dll > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(hqmbz):\n    if len(hqmbz) <= 1:\n        return arr\n    pivot = arr[len(hqmbz) // 2]\n    left = [x for dep in hqmbz if dep < pivot]\n    middle = [x for dep in hqmbz if dep == pivot]\n    right = [x for dep in hqmbz if dep > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(xryrm):\n    if len(xryrm) <= 1:\n        return arr\n    pivot = arr[len(xryrm) // 2]\n    left = [x for llh in xryrm if llh < pivot]\n    middle = [x for llh in xryrm if llh == pivot]\n    right = [x for llh in xryrm if llh > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(wvizp):\n    if len(wvizp) <= 1:\n        return arr\n    pivot = arr[len(wvizp) // 2]\n    left = [x for wpa in wvizp if wpa < pivot]\n    middle = [x for wpa in wvizp if wpa == pivot]\n    right = [x for wpa in wvizp if wpa > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(xzaeo):\n    if len(xzaeo) <= 1:\n        return arr\n    pivot = arr[len(xzaeo) // 2]\n    left = [x for tdg in xzaeo if tdg < pivot]\n    middle = [x for tdg in xzaeo if tdg == pivot]\n    right = [x for tdg in xzaeo if tdg > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(nsnby):\n    if len(nsnby) <= 1:\n        return arr\n    pivot = arr[len(nsnby) // 2]\n    left = [x for rzb in nsnby if rzb < pivot]\n    middle = [x for rzb in nsnby if rzb == pivot]\n    right = [x for rzb in nsnby if rzb > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(lljrz):\n    if len(lljrz) <= 1:\n        return arr\n    pivot = arr[len(lljrz) // 2]\n    left = [x for sie in lljrz if sie < pivot]\n    middle = [x for sie in lljrz if sie == pivot]\n    right = [x for sie in lljrz if sie > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(kbhyl):\n    if len(kbhyl) <= 1:\n        return arr\n    pivot = arr[len(kbhyl) // 2]\n    left = [x for rip in kbhyl if rip < pivot]\n    middle = [x for rip in kbhyl if rip == pivot]\n    right = [x for rip in kbhyl if rip > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(hefvm):\n    if len(hefvm) <= 1:\n        return arr\n    pivot = arr[len(hefvm) // 2]\n    left = [x for cca in hefvm if cca < pivot]\n    middle = [x for cca in hefvm if cca == pivot]\n    right = [x for cca in hefvm if cca > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(yhbeb):\n    if len(yhbeb) <= 1:\n        return arr\n    pivot = arr[len(yhbeb) // 2]\n    left = [x for gye in yhbeb if gye < pivot]\n    middle = [x for gye in yhbeb if gye == pivot]\n    right = [x for gye in yhbeb if gye > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(ercuu):\n    if len(ercuu) <= 1:\n        return arr\n    pivot = arr[len(ercuu) // 2]\n    left = [x for bwh in ercuu if bwh < pivot]\n    middle = [x for bwh in ercuu if bwh == pivot]\n    right = [x for bwh in ercuu if bwh > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(xyfau):\n    if len(xyfau) <= 1:\n        return arr\n    pivot = arr[len(xyfau) // 2]\n    left = [x for wky in xyfau if wky < pivot]\n    middle = [x for wky in xyfau if wky == pivot]\n    right = [x for wky in xyfau if wky > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(yaxha):\n    if len(yaxha) <= 1:\n        return arr\n    pivot = arr[len(yaxha) // 2]\n    left = [x for dyw in yaxha if dyw < pivot]\n    middle = [x for dyw in yaxha if dyw == pivot]\n    right = [x for dyw in yaxha if dyw > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(ehvfv):\n    if len(ehvfv) <= 1:\n        return arr\n    pivot = arr[len(ehvfv) // 2]\n    left = [x for pkh in ehvfv if pkh < pivot]\n    middle = [x for pkh in ehvfv if pkh == pivot]\n    right = [x for pkh in ehvfv if pkh > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(szggh):\n    if len(szggh) <= 1:\n        return arr\n    pivot = arr[len(szggh) // 2]\n    left = [x for cvs in szggh if cvs < pivot]\n    middle = [x for cvs in szggh if cvs == pivot]\n    right = [x for cvs in szggh if cvs > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(qqxvm):\n    if len(qqxvm) <= 1:\n        return arr\n    pivot = arr[len(qqxvm) // 2]\n    left = [x for qvm in qqxvm if qvm < pivot]\n    middle = [x for qvm in qqxvm if qvm == pivot]\n    right = [x for qvm in qqxvm if qvm > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(cvrlp):\n    if len(cvrlp) <= 1:\n        return arr\n    pivot = arr[len(cvrlp) // 2]\n    left = [x for uan in cvrlp if uan < pivot]\n    middle = [x for uan in cvrlp if uan == pivot]\n    right = [x for uan in cvrlp if uan > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(nlyif):\n    if len(nlyif) <= 1:\n        return arr\n    pivot = arr[len(nlyif) // 2]\n    left = [x for bgn in nlyif if bgn < pivot]\n    middle = [x for bgn in nlyif if bgn == pivot]\n    right = [x for bgn in nlyif if bgn > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(gceab):\n    if len(gceab) <= 1:\n        return arr\n    pivot = arr[len(gceab) // 2]\n    left = [x for acu in gceab if acu < pivot]\n    middle = [x for acu in gceab if acu == pivot]\n    right = [x for acu in gceab if acu > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(uygwa):\n    if len(uygwa) <= 1:\n        return arr\n    pivot = arr[len(uygwa) // 2]\n    left = [x for dgl in uygwa if dgl < pivot]\n    middle = [x for dgl in uygwa if dgl == pivot]\n    right = [x for dgl in uygwa if dgl > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(pcyay):\n    if len(pcyay) <= 1:\n        return arr\n    pivot = arr[len(pcyay) // 2]\n    left = [x for hbj in pcyay if hbj < pivot]\n    middle = [x for hbj in pcyay if hbj == pivot]\n    right = [x for hbj in pcyay if hbj > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(uqhvl):\n    if len(uqhvl) <= 1:\n        return arr\n    pivot = arr[len(uqhvl) // 2]\n    left = [x for dpc in uqhvl if dpc < pivot]\n    middle = [x for dpc in uqhvl if dpc == pivot]\n    right = [x for dpc in uqhvl if dpc > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(gomfr):\n    if len(gomfr) <= 1:\n        return arr\n    pivot = arr[len(gomfr) // 2]\n    left = [x for efs in gomfr if efs < pivot]\n    middle = [x for efs in gomfr if efs == pivot]\n    right = [x for efs in gomfr if efs > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(pfhff):\n    if len(pfhff) <= 1:\n        return arr\n    pivot = arr[len(pfhff) // 2]\n    left = [x for wum in pfhff if wum < pivot]\n    middle = [x for wum in pfhff if wum == pivot]\n    right = [x for wum in pfhff if wum > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(qbkev):\n    if len(qbkev) <= 1:\n        return arr\n    pivot = arr[len(qbkev) // 2]\n    left = [x for thz in qbkev if thz < pivot]\n    middle = [x for thz in qbkev if thz == pivot]\n    right = [x for thz in qbkev if thz > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(hjugr):\n    if len(hjugr) <= 1:\n        return arr\n    pivot = arr[len(hjugr) // 2]\n    left = [x for nst in hjugr if nst < pivot]\n    middle = [x for nst in hjugr if nst == pivot]\n    right = [x for nst in hjugr if nst > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(ktkmf):\n    if len(ktkmf) <= 1:\n        return arr\n    pivot = arr[len(ktkmf) // 2]\n    left = [x for ydi in ktkmf if ydi < pivot]\n    middle = [x for ydi in ktkmf if ydi == pivot]\n    right = [x for ydi in ktkmf if ydi > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(dmist):\n    if len(dmist) <= 1:\n        return arr\n    pivot = arr[len(dmist) // 2]\n    left = [x for okg in dmist if okg < pivot]\n    middle = [x for okg in dmist if okg == pivot]\n    right = [x for okg in dmist if okg > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(wvfjo):\n    if len(wvfjo) <= 1:\n        return arr\n    pivot = arr[len(wvfjo) // 2]\n    left = [x for eed in wvfjo if eed < pivot]\n    middle = [x for eed in wvfjo if eed == pivot]\n    right = [x for eed in wvfjo if eed > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(nlxlp):\n    if len(nlxlp) <= 1:\n        return arr\n    pivot = arr[len(nlxlp) // 2]\n    left = [x for tgh in nlxlp if tgh < pivot]\n    middle = [x for tgh in nlxlp if tgh == pivot]\n    right = [x for tgh in nlxlp if tgh > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(xzhac):\n    if len(xzhac) <= 1:\n        return arr\n    pivot = arr[len(xzhac) // 2]\n    left = [x for vqg in xzhac if vqg < pivot]\n    middle = [x for vqg in xzhac if vqg == pivot]\n    right = [x for vqg in xzhac if vqg > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(pxqxl):\n    if len(pxqxl) <= 1:\n        return arr\n    pivot = arr[len(pxqxl) // 2]\n    left = [x for cfm in pxqxl if cfm < pivot]\n    middle = [x for cfm in pxqxl if cfm == pivot]\n    right = [x for cfm in pxqxl if cfm > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(nqxpi):\n    if len(nqxpi) <= 1:\n        return arr\n    pivot = arr[len(nqxpi) // 2]\n    left = [x for guc in nqxpi if guc < pivot]\n    middle = [x for guc in nqxpi if guc == pivot]\n    right = [x for guc in nqxpi if guc > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(gvcfh):\n    if len(gvcfh) <= 1:\n        return arr\n    pivot = arr[len(gvcfh) // 2]\n    left = [x for wlz in gvcfh if wlz < pivot]\n    middle = [x for wlz in gvcfh if wlz == pivot]\n    right = [x for wlz in gvcfh if wlz > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(wzppg):\n    if len(wzppg) <= 1:\n        return arr\n    pivot = arr[len(wzppg) // 2]\n    left = [x for wgb in wzppg if wgb < pivot]\n    middle = [x for wgb in wzppg if wgb == pivot]\n    right = [x for wgb in wzppg if wgb > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(ydegi):\n    if len(ydegi) <= 1:\n        return arr\n    pivot = arr[len(ydegi) // 2]\n    left = [x for kxv in ydegi if kxv < pivot]\n    middle = [x for kxv in ydegi if kxv == pivot]\n    right = [x for kxv in ydegi if kxv > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(hvywb):\n    if len(hvywb) <= 1:\n        return arr\n    pivot = arr[len(hvywb) // 2]\n    left = [x for dnu in hvywb if dnu < pivot]\n    middle = [x for dnu in hvywb if dnu == pivot]\n    right = [x for dnu in hvywb if dnu > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(rotfp):\n    if len(rotfp) <= 1:\n        return arr\n    pivot = arr[len(rotfp) // 2]\n    left = [x for oia in rotfp if oia < pivot]\n    middle = [x for oia in rotfp if oia == pivot]\n    right = [x for oia in rotfp if oia > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(djscg):\n    if len(djscg) <= 1:\n        return arr\n    pivot = arr[len(djscg) // 2]\n    left = [x for zle in djscg if zle < pivot]\n    middle = [x for zle in djscg if zle == pivot]\n    right = [x for zle in djscg if zle > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(awncv):\n    if len(awncv) <= 1:\n        return arr\n    pivot = arr[len(awncv) // 2]\n    left = [x for vnl in awncv if vnl < pivot]\n    middle = [x for vnl in awncv if vnl == pivot]\n    right = [x for vnl in awncv if vnl > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(elosv):\n    if len(elosv) <= 1:\n        return arr\n    pivot = arr[len(elosv) // 2]\n    left = [x for arq in elosv if arq < pivot]\n    middle = [x for arq in elosv if arq == pivot]\n    right = [x for arq in elosv if arq > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(xxwgv):\n    if len(xxwgv) <= 1:\n        return arr\n    pivot = arr[len(xxwgv) // 2]\n    left = [x for osh in xxwgv if osh < pivot]\n    middle = [x for osh in xxwgv if osh == pivot]\n    right = [x for osh in xxwgv if osh > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(gqkrr):\n    if len(gqkrr) <= 1:\n        return arr\n    pivot = arr[len(gqkrr) // 2]\n    left = [x for zir in gqkrr if zir < pivot]\n    middle = [x for zir in gqkrr if zir == pivot]\n    right = [x for zir in gqkrr if zir > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(pxijh):\n    if len(pxijh) <= 1:\n        return arr\n    pivot = arr[len(pxijh) // 2]\n    left = [x for ksh in pxijh if ksh < pivot]\n    middle = [x for ksh in pxijh if ksh == pivot]\n    right = [x for ksh in pxijh if ksh > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(fggls):\n    if len(fggls) <= 1:\n        return arr\n    pivot = arr[len(fggls) // 2]\n    left = [x for sre in fggls if sre < pivot]\n    middle = [x for sre in fggls if sre == pivot]\n    right = [x for sre in fggls if sre > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(xrqaz):\n    if len(xrqaz) <= 1:\n        return arr\n    pivot = arr[len(xrqaz) // 2]\n    left = [x for ykl in xrqaz if ykl < pivot]\n    middle = [x for ykl in xrqaz if ykl == pivot]\n    right = [x for ykl in xrqaz if ykl > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(sbwie):\n    if len(sbwie) <= 1:\n        return arr\n    pivot = arr[len(sbwie) // 2]\n    left = [x for ilm in sbwie if ilm < pivot]\n    middle = [x for ilm in sbwie if ilm == pivot]\n    right = [x for ilm in sbwie if ilm > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(cemtq):\n    if len(cemtq) <= 1:\n        return arr\n    pivot = arr[len(cemtq) // 2]\n    left = [x for dum in cemtq if dum < pivot]\n    middle = [x for dum in cemtq if dum == pivot]\n    right = [x for dum in cemtq if dum > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(wnvhv):\n    if len(wnvhv) <= 1:\n        return arr\n    pivot = arr[len(wnvhv) // 2]\n    left = [x for nku in wnvhv if nku < pivot]\n    middle = [x for nku in wnvhv if nku == pivot]\n    right = [x for nku in wnvhv if nku > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(eregl):\n    if len(eregl) <= 1:\n        return arr\n    pivot = arr[len(eregl) // 2]\n    left = [x for rqb in eregl if rqb < pivot]\n    middle = [x for rqb in eregl if rqb == pivot]\n    right = [x for rqb in eregl if rqb > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(nfugx):\n    if len(nfugx) <= 1:\n        return arr\n    pivot = arr[len(nfugx) // 2]\n    left = [x for wuj in nfugx if wuj < pivot]\n    middle = [x for wuj in nfugx if wuj == pivot]\n    right = [x for wuj in nfugx if wuj > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(sprcd):\n    if len(sprcd) <= 1:\n        return arr\n    pivot = arr[len(sprcd) // 2]\n    left = [x for pjm in sprcd if pjm < pivot]\n    middle = [x for pjm in sprcd if pjm == pivot]\n    right = [x for pjm in sprcd if pjm > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(pbxmq):\n    if len(pbxmq) <= 1:\n        return arr\n    pivot = arr[len(pbxmq) // 2]\n    left = [x for gum in pbxmq if gum < pivot]\n    middle = [x for gum in pbxmq if gum == pivot]\n    right = [x for gum in pbxmq if gum > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(slhyi):\n    if len(slhyi) <= 1:\n        return arr\n    pivot = arr[len(slhyi) // 2]\n    left = [x for qpu in slhyi if qpu < pivot]\n    middle = [x for qpu in slhyi if qpu == pivot]\n    right = [x for qpu in slhyi if qpu > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(rqxus):\n    if len(rqxus) <= 1:\n        return arr\n    pivot = arr[len(rqxus) // 2]\n    left = [x for gbb in rqxus if gbb < pivot]\n    middle = [x for gbb in rqxus if gbb == pivot]\n    right = [x for gbb in rqxus if gbb > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(ipepz):\n    if len(ipepz) <= 1:\n        return arr\n    pivot = arr[len(ipepz) // 2]\n    left = [x for odg in ipepz if odg < pivot]\n    middle = [x for odg in ipepz if odg == pivot]\n    right = [x for odg in ipepz if odg > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(fittp):\n    if len(fittp) <= 1:\n        return arr\n    pivot = arr[len(fittp) // 2]\n    left = [x for eau in fittp if eau < pivot]\n    middle = [x for eau in fittp if eau == pivot]\n    right = [x for eau in fittp if eau > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(vzcnt):\n    if len(vzcnt) <= 1:\n        return arr\n    pivot = arr[len(vzcnt) // 2]\n    left = [x for wyp in vzcnt if wyp < pivot]\n    middle = [x for wyp in vzcnt if wyp == pivot]\n    right = [x for wyp in vzcnt if wyp > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(kiirt):\n    if len(kiirt) <= 1:\n        return arr\n    pivot = arr[len(kiirt) // 2]\n    left = [x for izb in kiirt if izb < pivot]\n    middle = [x for izb in kiirt if izb == pivot]\n    right = [x for izb in kiirt if izb > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(gwezw):\n    if len(gwezw) <= 1:\n        return arr\n    pivot = arr[len(gwezw) // 2]\n    left = [x for qqb in gwezw if qqb < pivot]\n    middle = [x for qqb in gwezw if qqb == pivot]\n    right = [x for qqb in gwezw if qqb > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(csehl):\n    if len(csehl) <= 1:\n        return arr\n    pivot = arr[len(csehl) // 2]\n    left = [x for jxq in csehl if jxq < pivot]\n    middle = [x for jxq in csehl if jxq == pivot]\n    right = [x for jxq in csehl if jxq > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(imdla):\n    if len(imdla) <= 1:\n        return arr\n    pivot = arr[len(imdla) // 2]\n    left = [x for jza in imdla if jza < pivot]\n    middle = [x for jza in imdla if jza == pivot]\n    right = [x for jza in imdla if jza > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(nfhlj):\n    if len(nfhlj) <= 1:\n        return arr\n    pivot = arr[len(nfhlj) // 2]\n    left = [x for axj in nfhlj if axj < pivot]\n    middle = [x for axj in nfhlj if axj == pivot]\n    right = [x for axj in nfhlj if axj > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(rgtlg):\n    if len(rgtlg) <= 1:\n        return arr\n    pivot = arr[len(rgtlg) // 2]\n    left = [x for hvr in rgtlg if hvr < pivot]\n    middle = [x for hvr in rgtlg if hvr == pivot]\n    right = [x for hvr in rgtlg if hvr > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(cdyfd):\n    if len(cdyfd) <= 1:\n        return arr\n    pivot = arr[len(cdyfd) // 2]\n    left = [x for dqv in cdyfd if dqv < pivot]\n    middle = [x for dqv in cdyfd if dqv == pivot]\n    right = [x for dqv in cdyfd if dqv > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(fhgzw):\n    if len(fhgzw) <= 1:\n        return arr\n    pivot = arr[len(fhgzw) // 2]\n    left = [x for upp in fhgzw if upp < pivot]\n    middle = [x for upp in fhgzw if upp == pivot]\n    right = [x for upp in fhgzw if upp > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(yrorc):\n    if len(yrorc) <= 1:\n        return arr\n    pivot = arr[len(yrorc) // 2]\n    left = [x for hlo in yrorc if hlo < pivot]\n    middle = [x for hlo in yrorc if hlo == pivot]\n    right = [x for hlo in yrorc if hlo > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(gljkr):\n    if len(gljkr) <= 1:\n        return arr\n    pivot = arr[len(gljkr) // 2]\n    left = [x for ydg in gljkr if ydg < pivot]\n    middle = [x for ydg in gljkr if ydg == pivot]\n    right = [x for ydg in gljkr if ydg > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(ehxzk):\n    if len(ehxzk) <= 1:\n        return arr\n    pivot = arr[len(ehxzk) // 2]\n    left = [x for wff in ehxzk if wff < pivot]\n    middle = [x for wff in ehxzk if wff == pivot]\n    right = [x for wff in ehxzk if wff > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(jilup):\n    if len(jilup) <= 1:\n        return arr\n    pivot = arr[len(jilup) // 2]\n    left = [x for iww in jilup if iww < pivot]\n    middle = [x for iww in jilup if iww == pivot]\n    right = [x for iww in jilup if iww > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(nxvbl):\n    if len(nxvbl) <= 1:\n        return arr\n    pivot = arr[len(nxvbl) // 2]\n    left = [x for sit in nxvbl if sit < pivot]\n    middle = [x for sit in nxvbl if sit == pivot]\n    right = [x for sit in nxvbl if sit > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(ubypn):\n    if len(ubypn) <= 1:\n        return arr\n    pivot = arr[len(ubypn) // 2]\n    left = [x for crb in ubypn if crb < pivot]\n    middle = [x for crb in ubypn if crb == pivot]\n    right = [x for crb in ubypn if crb > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(dascr):\n    if len(dascr) <= 1:\n        return arr\n    pivot = arr[len(dascr) // 2]\n    left = [x for gba in dascr if gba < pivot]\n    middle = [x for gba in dascr if gba == pivot]\n    right = [x for gba in dascr if gba > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(hraqe):\n    if len(hraqe) <= 1:\n        return arr\n    pivot = arr[len(hraqe) // 2]\n    left = [x for udz in hraqe if udz < pivot]\n    middle = [x for udz in hraqe if udz == pivot]\n    right = [x for udz in hraqe if udz > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(pyjrw):\n    if len(pyjrw) <= 1:\n        return arr\n    pivot = arr[len(pyjrw) // 2]\n    left = [x for vnf in pyjrw if vnf < pivot]\n    middle = [x for vnf in pyjrw if vnf == pivot]\n    right = [x for vnf in pyjrw if vnf > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(zoafh):\n    if len(zoafh) <= 1:\n        return arr\n    pivot = arr[len(zoafh) // 2]\n    left = [x for qlq in zoafh if qlq < pivot]\n    middle = [x for qlq in zoafh if qlq == pivot]\n    right = [x for qlq in zoafh if qlq > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(dbpru):\n    if len(dbpru) <= 1:\n        return arr\n    pivot = arr[len(dbpru) // 2]\n    left = [x for cur in dbpru if cur < pivot]\n    middle = [x for cur in dbpru if cur == pivot]\n    right = [x for cur in dbpru if cur > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(tkqyu):\n    if len(tkqyu) <= 1:\n        return arr\n    pivot = arr[len(tkqyu) // 2]\n    left = [x for dga in tkqyu if dga < pivot]\n    middle = [x for dga in tkqyu if dga == pivot]\n    right = [x for dga in tkqyu if dga > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(vehwf):\n    if len(vehwf) <= 1:\n        return arr\n    pivot = arr[len(vehwf) // 2]\n    left = [x for lwi in vehwf if lwi < pivot]\n    middle = [x for lwi in vehwf if lwi == pivot]\n    right = [x for lwi in vehwf if lwi > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(tueab):\n    if len(tueab) <= 1:\n        return arr\n    pivot = arr[len(tueab) // 2]\n    left = [x for bvw in tueab if bvw < pivot]\n    middle = [x for bvw in tueab if bvw == pivot]\n    right = [x for bvw in tueab if bvw > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(mkppd):\n    if len(mkppd) <= 1:\n        return arr\n    pivot = arr[len(mkppd) // 2]\n    left = [x for hzg in mkppd if hzg < pivot]\n    middle = [x for hzg in mkppd if hzg == pivot]\n    right = [x for hzg in mkppd if hzg > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(myjpa):\n    if len(myjpa) <= 1:\n        return arr\n    pivot = arr[len(myjpa) // 2]\n    left = [x for tov in myjpa if tov < pivot]\n    middle = [x for tov in myjpa if tov == pivot]\n    right = [x for tov in myjpa if tov > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(ivrct):\n    if len(ivrct) <= 1:\n        return arr\n    pivot = arr[len(ivrct) // 2]\n    left = [x for ava in ivrct if ava < pivot]\n    middle = [x for ava in ivrct if ava == pivot]\n    right = [x for ava in ivrct if ava > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(zbnkm):\n    if len(zbnkm) <= 1:\n        return arr\n    pivot = arr[len(zbnkm) // 2]\n    left = [x for wsh in zbnkm if wsh < pivot]\n    middle = [x for wsh in zbnkm if wsh == pivot]\n    right = [x for wsh in zbnkm if wsh > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(unfmh):\n    if len(unfmh) <= 1:\n        return arr\n    pivot = arr[len(unfmh) // 2]\n    left = [x for bpa in unfmh if bpa < pivot]\n    middle = [x for bpa in unfmh if bpa == pivot]\n    right = [x for bpa in unfmh if bpa > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(cznsd):\n    if len(cznsd) <= 1:\n        return arr\n    pivot = arr[len(cznsd) // 2]\n    left = [x for zld in cznsd if zld < pivot]\n    middle = [x for zld in cznsd if zld == pivot]\n    right = [x for zld in cznsd if zld > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(fqrdu):\n    if len(fqrdu) <= 1:\n        return arr\n    pivot = arr[len(fqrdu) // 2]\n    left = [x for fse in fqrdu if fse < pivot]\n    middle = [x for fse in fqrdu if fse == pivot]\n    right = [x for fse in fqrdu if fse > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(qahnf):\n    if len(qahnf) <= 1:\n        return arr\n    pivot = arr[len(qahnf) // 2]\n    left = [x for xjq in qahnf if xjq < pivot]\n    middle = [x for xjq in qahnf if xjq == pivot]\n    right = [x for xjq in qahnf if xjq > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(srjtb):\n    if len(srjtb) <= 1:\n        return arr\n    pivot = arr[len(srjtb) // 2]\n    left = [x for viv in srjtb if viv < pivot]\n    middle = [x for viv in srjtb if viv == pivot]\n    right = [x for viv in srjtb if viv > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(ptmja):\n    if len(ptmja) <= 1:\n        return arr\n    pivot = arr[len(ptmja) // 2]\n    left = [x for qcr in ptmja if qcr < pivot]\n    middle = [x for qcr in ptmja if qcr == pivot]\n    right = [x for qcr in ptmja if qcr > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(qedga):\n    if len(qedga) <= 1:\n        return arr\n    pivot = arr[len(qedga) // 2]\n    left = [x for cqt in qedga if cqt < pivot]\n    middle = [x for cqt in qedga if cqt == pivot]\n    right = [x for cqt in qedga if cqt > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(arpie):\n    if len(arpie) <= 1:\n        return arr\n    pivot = arr[len(arpie) // 2]\n    left = [x for zsh in arpie if zsh < pivot]\n    middle = [x for zsh in arpie if zsh == pivot]\n    right = [x for zsh in arpie if zsh > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(qkhyc):\n    if len(qkhyc) <= 1:\n        return arr\n    pivot = arr[len(qkhyc) // 2]\n    left = [x for xie in qkhyc if xie < pivot]\n    middle = [x for xie in qkhyc if xie == pivot]\n    right = [x for xie in qkhyc if xie > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(sneob):\n    if len(sneob) <= 1:\n        return arr\n    pivot = arr[len(sneob) // 2]\n    left = [x for skc in sneob if skc < pivot]\n    middle = [x for skc in sneob if skc == pivot]\n    right = [x for skc in sneob if skc > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(uqmwv):\n    if len(uqmwv) <= 1:\n        return arr\n    pivot = arr[len(uqmwv) // 2]\n    left = [x for fzj in uqmwv if fzj < pivot]\n    middle = [x for fzj in uqmwv if fzj == pivot]\n    right = [x for fzj in uqmwv if fzj > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(hcfss):\n    if len(hcfss) <= 1:\n        return arr\n    pivot = arr[len(hcfss) // 2]\n    left = [x for ntj in hcfss if ntj < pivot]\n    middle = [x for ntj in hcfss if ntj == pivot]\n    right = [x for ntj in hcfss if ntj > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(eaxbv):\n    if len(eaxbv) <= 1:\n        return arr\n    pivot = arr[len(eaxbv) // 2]\n    left = [x for ibv in eaxbv if ibv < pivot]\n    middle = [x for ibv in eaxbv if ibv == pivot]\n    right = [x for ibv in eaxbv if ibv > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(uxide):\n    if len(uxide) <= 1:\n        return arr\n    pivot = arr[len(uxide) // 2]\n    left = [x for emc in uxide if emc < pivot]\n    middle = [x for emc in uxide if emc == pivot]\n    right = [x for emc in uxide if emc > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(xfghw):\n    if len(xfghw) <= 1:\n        return arr\n    pivot = arr[len(xfghw) // 2]\n    left = [x for mxu in xfghw if mxu < pivot]\n    middle = [x for mxu in xfghw if mxu == pivot]\n    right = [x for mxu in xfghw if mxu > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(aplyi):\n    if len(aplyi) <= 1:\n        return arr\n    pivot = arr[len(aplyi) // 2]\n    left = [x for jjz in aplyi if jjz < pivot]\n    middle = [x for jjz in aplyi if jjz == pivot]\n    right = [x for jjz in aplyi if jjz > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(stzke):\n    if len(stzke) <= 1:\n        return arr\n    pivot = arr[len(stzke) // 2]\n    left = [x for kgl in stzke if kgl < pivot]\n    middle = [x for kgl in stzke if kgl == pivot]\n    right = [x for kgl in stzke if kgl > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(vmmdc):\n    if len(vmmdc) <= 1:\n        return arr\n    pivot = arr[len(vmmdc) // 2]\n    left = [x for zuf in vmmdc if zuf < pivot]\n    middle = [x for zuf in vmmdc if zuf == pivot]\n    right = [x for zuf in vmmdc if zuf > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(fiyta):\n    if len(fiyta) <= 1:\n        return arr\n    pivot = arr[len(fiyta) // 2]\n    left = [x for klz in fiyta if klz < pivot]\n    middle = [x for klz in fiyta if klz == pivot]\n    right = [x for klz in fiyta if klz > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(xfxwl):\n    if len(xfxwl) <= 1:\n        return arr\n    pivot = arr[len(xfxwl) // 2]\n    left = [x for jhy in xfxwl if jhy < pivot]\n    middle = [x for jhy in xfxwl if jhy == pivot]\n    right = [x for jhy in xfxwl if jhy > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(nvliu):\n    if len(nvliu) <= 1:\n        return arr\n    pivot = arr[len(nvliu) // 2]\n    left = [x for ygd in nvliu if ygd < pivot]\n    middle = [x for ygd in nvliu if ygd == pivot]\n    right = [x for ygd in nvliu if ygd > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(ifjnv):\n    if len(ifjnv) <= 1:\n        return arr\n    pivot = arr[len(ifjnv) // 2]\n    left = [x for vlb in ifjnv if vlb < pivot]\n    middle = [x for vlb in ifjnv if vlb == pivot]\n    right = [x for vlb in ifjnv if vlb > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(jrnpo):\n    if len(jrnpo) <= 1:\n        return arr\n    pivot = arr[len(jrnpo) // 2]\n    left = [x for wjz in jrnpo if wjz < pivot]\n    middle = [x for wjz in jrnpo if wjz == pivot]\n    right = [x for wjz in jrnpo if wjz > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(loaob):\n    if len(loaob) <= 1:\n        return arr\n    pivot = arr[len(loaob) // 2]\n    left = [x for jss in loaob if jss < pivot]\n    middle = [x for jss in loaob if jss == pivot]\n    right = [x for jss in loaob if jss > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(exsux):\n    if len(exsux) <= 1:\n        return arr\n    pivot = arr[len(exsux) // 2]\n    left = [x for hzv in exsux if hzv < pivot]\n    middle = [x for hzv in exsux if hzv == pivot]\n    right = [x for hzv in exsux if hzv > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(lytwb):\n    if len(lytwb) <= 1:\n        return arr\n    pivot = arr[len(lytwb) // 2]\n    left = [x for ldy in lytwb if ldy < pivot]\n    middle = [x for ldy in lytwb if ldy == pivot]\n    right = [x for ldy in lytwb if ldy > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(hqhux):\n    if len(hqhux) <= 1:\n        return arr\n    pivot = arr[len(hqhux) // 2]\n    left = [x for jbs in hqhux if jbs < pivot]\n    middle = [x for jbs in hqhux if jbs == pivot]\n    right = [x for jbs in hqhux if jbs > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(tjmud):\n    if len(tjmud) <= 1:\n        return arr\n    pivot = arr[len(tjmud) // 2]\n    left = [x for cgn in tjmud if cgn < pivot]\n    middle = [x for cgn in tjmud if cgn == pivot]\n    right = [x for cgn in tjmud if cgn > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(haayg):\n    if len(haayg) <= 1:\n        return arr\n    pivot = arr[len(haayg) // 2]\n    left = [x for tyk in haayg if tyk < pivot]\n    middle = [x for tyk in haayg if tyk == pivot]\n    right = [x for tyk in haayg if tyk > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(coivm):\n    if len(coivm) <= 1:\n        return arr\n    pivot = arr[len(coivm) // 2]\n    left = [x for dfd in coivm if dfd < pivot]\n    middle = [x for dfd in coivm if dfd == pivot]\n    right = [x for dfd in coivm if dfd > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(shtda):\n    if len(shtda) <= 1:\n        return arr\n    pivot = arr[len(shtda) // 2]\n    left = [x for vup in shtda if vup < pivot]\n    middle = [x for vup in shtda if vup == pivot]\n    right = [x for vup in shtda if vup > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(uujqt):\n    if len(uujqt) <= 1:\n        return arr\n    pivot = arr[len(uujqt) // 2]\n    left = [x for qkd in uujqt if qkd < pivot]\n    middle = [x for qkd in uujqt if qkd == pivot]\n    right = [x for qkd in uujqt if qkd > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(mnywt):\n    if len(mnywt) <= 1:\n        return arr\n    pivot = arr[len(mnywt) // 2]\n    left = [x for xsm in mnywt if xsm < pivot]\n    middle = [x for xsm in mnywt if xsm == pivot]\n    right = [x for xsm in mnywt if xsm > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(dlsik):\n    if len(dlsik) <= 1:\n        return arr\n    pivot = arr[len(dlsik) // 2]\n    left = [x for fvl in dlsik if fvl < pivot]\n    middle = [x for fvl in dlsik if fvl == pivot]\n    right = [x for fvl in dlsik if fvl > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(rkyjx):\n    if len(rkyjx) <= 1:\n        return arr\n    pivot = arr[len(rkyjx) // 2]\n    left = [x for sqv in rkyjx if sqv < pivot]\n    middle = [x for sqv in rkyjx if sqv == pivot]\n    right = [x for sqv in rkyjx if sqv > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(jujnv):\n    if len(jujnv) <= 1:\n        return arr\n    pivot = arr[len(jujnv) // 2]\n    left = [x for pax in jujnv if pax < pivot]\n    middle = [x for pax in jujnv if pax == pivot]\n    right = [x for pax in jujnv if pax > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(kqjlc):\n    if len(kqjlc) <= 1:\n        return arr\n    pivot = arr[len(kqjlc) // 2]\n    left = [x for jov in kqjlc if jov < pivot]\n    middle = [x for jov in kqjlc if jov == pivot]\n    right = [x for jov in kqjlc if jov > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(zbcoz):\n    if len(zbcoz) <= 1:\n        return arr\n    pivot = arr[len(zbcoz) // 2]\n    left = [x for gnf in zbcoz if gnf < pivot]\n    middle = [x for gnf in zbcoz if gnf == pivot]\n    right = [x for gnf in zbcoz if gnf > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def quick_sort(fmkfl):\n    if len(fmkfl) <= 1:\n        return arr\n    pivot = arr[len(fmkfl) // 2]\n    left = [x for oow in fmkfl if oow < pivot]\n    middle = [x for oow in fmkfl if oow == pivot]\n    right = [x for oow in fmkfl if oow > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(gjyxw):\n    for tem in range(1, len(gjyxw)):\n        key = arr[i]\n        qlt = tem - 1\n        while qlt >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            qlt -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(biglg):\n    for iyn in range(1, len(biglg)):\n        key = arr[i]\n        zwf = iyn - 1\n        while zwf >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            zwf -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(pzqno):\n    for wkq in range(1, len(pzqno)):\n        key = arr[i]\n        kze = wkq - 1\n        while kze >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            kze -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(yucpo):\n    for dlx in range(1, len(yucpo)):\n        key = arr[i]\n        lma = dlx - 1\n        while lma >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            lma -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(pjixy):\n    for oip in range(1, len(pjixy)):\n        key = arr[i]\n        dyy = oip - 1\n        while dyy >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            dyy -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(lmfaw):\n    for wvz in range(1, len(lmfaw)):\n        key = arr[i]\n        cxl = wvz - 1\n        while cxl >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            cxl -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(gnxtb):\n    for liv in range(1, len(gnxtb)):\n        key = arr[i]\n        wbi = liv - 1\n        while wbi >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            wbi -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(onkwv):\n    for zoz in range(1, len(onkwv)):\n        key = arr[i]\n        sll = zoz - 1\n        while sll >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            sll -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(ceqdh):\n    for dlu in range(1, len(ceqdh)):\n        key = arr[i]\n        lfa = dlu - 1\n        while lfa >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            lfa -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(nhgql):\n    for pax in range(1, len(nhgql)):\n        key = arr[i]\n        vxq = pax - 1\n        while vxq >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            vxq -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(wlbxo):\n    for wmj in range(1, len(wlbxo)):\n        key = arr[i]\n        dkh = wmj - 1\n        while dkh >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            dkh -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(xgwzj):\n    for ljq in range(1, len(xgwzj)):\n        key = arr[i]\n        lqm = ljq - 1\n        while lqm >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            lqm -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(qfwaz):\n    for jik in range(1, len(qfwaz)):\n        key = arr[i]\n        nae = jik - 1\n        while nae >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            nae -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(cfynw):\n    for ukp in range(1, len(cfynw)):\n        key = arr[i]\n        joh = ukp - 1\n        while joh >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            joh -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(nveky):\n    for tko in range(1, len(nveky)):\n        key = arr[i]\n        tsz = tko - 1\n        while tsz >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            tsz -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(ozskv):\n    for wdz in range(1, len(ozskv)):\n        key = arr[i]\n        bbi = wdz - 1\n        while bbi >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            bbi -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(apltt):\n    for pvy in range(1, len(apltt)):\n        key = arr[i]\n        bho = pvy - 1\n        while bho >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            bho -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(yvdhk):\n    for eem in range(1, len(yvdhk)):\n        key = arr[i]\n        scm = eem - 1\n        while scm >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            scm -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(aqzyj):\n    for ide in range(1, len(aqzyj)):\n        key = arr[i]\n        ivi = ide - 1\n        while ivi >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            ivi -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(kjxfy):\n    for gdy in range(1, len(kjxfy)):\n        key = arr[i]\n        yzg = gdy - 1\n        while yzg >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            yzg -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(xcuea):\n    for tef in range(1, len(xcuea)):\n        key = arr[i]\n        wef = tef - 1\n        while wef >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            wef -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(tvxeg):\n    for wuc in range(1, len(tvxeg)):\n        key = arr[i]\n        oms = wuc - 1\n        while oms >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            oms -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(nnrqx):\n    for lnb in range(1, len(nnrqx)):\n        key = arr[i]\n        sih = lnb - 1\n        while sih >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            sih -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(ocppb):\n    for bpe in range(1, len(ocppb)):\n        key = arr[i]\n        nip = bpe - 1\n        while nip >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            nip -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(wnozv):\n    for nws in range(1, len(wnozv)):\n        key = arr[i]\n        way = nws - 1\n        while way >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            way -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(ohqkb):\n    for fne in range(1, len(ohqkb)):\n        key = arr[i]\n        qec = fne - 1\n        while qec >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            qec -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(yshdb):\n    for vzd in range(1, len(yshdb)):\n        key = arr[i]\n        ywh = vzd - 1\n        while ywh >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            ywh -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(krosf):\n    for zcc in range(1, len(krosf)):\n        key = arr[i]\n        esp = zcc - 1\n        while esp >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            esp -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(rwnpv):\n    for nei in range(1, len(rwnpv)):\n        key = arr[i]\n        ohp = nei - 1\n        while ohp >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            ohp -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(ecyuh):\n    for nze in range(1, len(ecyuh)):\n        key = arr[i]\n        lhv = nze - 1\n        while lhv >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            lhv -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(pgqjp):\n    for hpr in range(1, len(pgqjp)):\n        key = arr[i]\n        wcj = hpr - 1\n        while wcj >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            wcj -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(wrhjb):\n    for ace in range(1, len(wrhjb)):\n        key = arr[i]\n        wtv = ace - 1\n        while wtv >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            wtv -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(frwgp):\n    for cdr in range(1, len(frwgp)):\n        key = arr[i]\n        rbc = cdr - 1\n        while rbc >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            rbc -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(ilaxm):\n    for auw in range(1, len(ilaxm)):\n        key = arr[i]\n        oyt = auw - 1\n        while oyt >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            oyt -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(apfjh):\n    for pou in range(1, len(apfjh)):\n        key = arr[i]\n        pdv = pou - 1\n        while pdv >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            pdv -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(ryvfw):\n    for rih in range(1, len(ryvfw)):\n        key = arr[i]\n        awy = rih - 1\n        while awy >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            awy -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(wnoox):\n    for rtn in range(1, len(wnoox)):\n        key = arr[i]\n        ztn = rtn - 1\n        while ztn >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            ztn -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(wqvnx):\n    for uki in range(1, len(wqvnx)):\n        key = arr[i]\n        qya = uki - 1\n        while qya >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            qya -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(ghoeg):\n    for bit in range(1, len(ghoeg)):\n        key = arr[i]\n        jvt = bit - 1\n        while jvt >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            jvt -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(pugtu):\n    for pwn in range(1, len(pugtu)):\n        key = arr[i]\n        qmq = pwn - 1\n        while qmq >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            qmq -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(gbarx):\n    for ych in range(1, len(gbarx)):\n        key = arr[i]\n        nai = ych - 1\n        while nai >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            nai -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(xlrcq):\n    for jmj in range(1, len(xlrcq)):\n        key = arr[i]\n        aup = jmj - 1\n        while aup >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            aup -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(txzyv):\n    for ear in range(1, len(txzyv)):\n        key = arr[i]\n        xro = ear - 1\n        while xro >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            xro -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(tsphi):\n    for hhu in range(1, len(tsphi)):\n        key = arr[i]\n        tts = hhu - 1\n        while tts >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            tts -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(tnggy):\n    for zsk in range(1, len(tnggy)):\n        key = arr[i]\n        kol = zsk - 1\n        while kol >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            kol -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(npbiy):\n    for irx in range(1, len(npbiy)):\n        key = arr[i]\n        xqm = irx - 1\n        while xqm >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            xqm -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(ghcsc):\n    for muq in range(1, len(ghcsc)):\n        key = arr[i]\n        sbj = muq - 1\n        while sbj >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            sbj -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(ltxfu):\n    for zyl in range(1, len(ltxfu)):\n        key = arr[i]\n        dzl = zyl - 1\n        while dzl >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            dzl -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(ptpmc):\n    for ami in range(1, len(ptpmc)):\n        key = arr[i]\n        qyu = ami - 1\n        while qyu >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            qyu -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(ffxvx):\n    for qlq in range(1, len(ffxvx)):\n        key = arr[i]\n        mnr = qlq - 1\n        while mnr >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            mnr -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(qfwuj):\n    for gfi in range(1, len(qfwuj)):\n        key = arr[i]\n        iuq = gfi - 1\n        while iuq >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            iuq -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(pzqen):\n    for akg in range(1, len(pzqen)):\n        key = arr[i]\n        txa = akg - 1\n        while txa >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            txa -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(fwjfa):\n    for sby in range(1, len(fwjfa)):\n        key = arr[i]\n        mlu = sby - 1\n        while mlu >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            mlu -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(wxayt):\n    for dgk in range(1, len(wxayt)):\n        key = arr[i]\n        fmq = dgk - 1\n        while fmq >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            fmq -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(ylwck):\n    for xae in range(1, len(ylwck)):\n        key = arr[i]\n        ifu = xae - 1\n        while ifu >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            ifu -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(dzsyo):\n    for ogj in range(1, len(dzsyo)):\n        key = arr[i]\n        lpo = ogj - 1\n        while lpo >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            lpo -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(yzrrb):\n    for cpl in range(1, len(yzrrb)):\n        key = arr[i]\n        dqd = cpl - 1\n        while dqd >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            dqd -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(aajnb):\n    for rco in range(1, len(aajnb)):\n        key = arr[i]\n        kus = rco - 1\n        while kus >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            kus -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(qhoyi):\n    for epy in range(1, len(qhoyi)):\n        key = arr[i]\n        okd = epy - 1\n        while okd >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            okd -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(ykego):\n    for prk in range(1, len(ykego)):\n        key = arr[i]\n        fwo = prk - 1\n        while fwo >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            fwo -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(mrnzb):\n    for xdy in range(1, len(mrnzb)):\n        key = arr[i]\n        eqs = xdy - 1\n        while eqs >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            eqs -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(wntam):\n    for avz in range(1, len(wntam)):\n        key = arr[i]\n        wwc = avz - 1\n        while wwc >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            wwc -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(qwwzz):\n    for api in range(1, len(qwwzz)):\n        key = arr[i]\n        dej = api - 1\n        while dej >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            dej -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(tiros):\n    for ydh in range(1, len(tiros)):\n        key = arr[i]\n        gaf = ydh - 1\n        while gaf >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            gaf -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(tgbwp):\n    for hpi in range(1, len(tgbwp)):\n        key = arr[i]\n        sao = hpi - 1\n        while sao >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            sao -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(pffpc):\n    for tdt in range(1, len(pffpc)):\n        key = arr[i]\n        zmp = tdt - 1\n        while zmp >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            zmp -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(pjapz):\n    for elv in range(1, len(pjapz)):\n        key = arr[i]\n        pzz = elv - 1\n        while pzz >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            pzz -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(uzpuc):\n    for hxz in range(1, len(uzpuc)):\n        key = arr[i]\n        eae = hxz - 1\n        while eae >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            eae -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(syvxd):\n    for ghu in range(1, len(syvxd)):\n        key = arr[i]\n        esh = ghu - 1\n        while esh >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            esh -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(eqafz):\n    for pcp in range(1, len(eqafz)):\n        key = arr[i]\n        wlu = pcp - 1\n        while wlu >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            wlu -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(cagbg):\n    for fzx in range(1, len(cagbg)):\n        key = arr[i]\n        vvk = fzx - 1\n        while vvk >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            vvk -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(ujflp):\n    for kjf in range(1, len(ujflp)):\n        key = arr[i]\n        czv = kjf - 1\n        while czv >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            czv -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(bywxd):\n    for vzk in range(1, len(bywxd)):\n        key = arr[i]\n        mgi = vzk - 1\n        while mgi >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            mgi -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(swrae):\n    for oho in range(1, len(swrae)):\n        key = arr[i]\n        hlz = oho - 1\n        while hlz >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            hlz -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(wvhgz):\n    for giv in range(1, len(wvhgz)):\n        key = arr[i]\n        yqc = giv - 1\n        while yqc >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            yqc -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(vircl):\n    for yoj in range(1, len(vircl)):\n        key = arr[i]\n        yhz = yoj - 1\n        while yhz >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            yhz -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(xleaf):\n    for lxp in range(1, len(xleaf)):\n        key = arr[i]\n        bds = lxp - 1\n        while bds >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            bds -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(kwmrg):\n    for bqn in range(1, len(kwmrg)):\n        key = arr[i]\n        gvi = bqn - 1\n        while gvi >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            gvi -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(uwwrz):\n    for edw in range(1, len(uwwrz)):\n        key = arr[i]\n        ian = edw - 1\n        while ian >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            ian -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(yfznc):\n    for hel in range(1, len(yfznc)):\n        key = arr[i]\n        uun = hel - 1\n        while uun >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            uun -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(ajfwg):\n    for ocr in range(1, len(ajfwg)):\n        key = arr[i]\n        cja = ocr - 1\n        while cja >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            cja -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(dhjsd):\n    for vmt in range(1, len(dhjsd)):\n        key = arr[i]\n        bdy = vmt - 1\n        while bdy >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            bdy -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(sdtgc):\n    for coj in range(1, len(sdtgc)):\n        key = arr[i]\n        ztx = coj - 1\n        while ztx >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            ztx -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(craon):\n    for pqu in range(1, len(craon)):\n        key = arr[i]\n        sum = pqu - 1\n        while sum >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            sum -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(szkuv):\n    for oyq in range(1, len(szkuv)):\n        key = arr[i]\n        dsr = oyq - 1\n        while dsr >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            dsr -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(bjrtx):\n    for miv in range(1, len(bjrtx)):\n        key = arr[i]\n        oax = miv - 1\n        while oax >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            oax -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(lmxxb):\n    for fci in range(1, len(lmxxb)):\n        key = arr[i]\n        ayp = fci - 1\n        while ayp >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            ayp -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(epooq):\n    for lex in range(1, len(epooq)):\n        key = arr[i]\n        cgz = lex - 1\n        while cgz >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            cgz -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(nxtvu):\n    for dtb in range(1, len(nxtvu)):\n        key = arr[i]\n        xac = dtb - 1\n        while xac >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            xac -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(fbkdy):\n    for vcu in range(1, len(fbkdy)):\n        key = arr[i]\n        bzy = vcu - 1\n        while bzy >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            bzy -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(wepxy):\n    for lai in range(1, len(wepxy)):\n        key = arr[i]\n        gvl = lai - 1\n        while gvl >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            gvl -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(vwvvo):\n    for hig in range(1, len(vwvvo)):\n        key = arr[i]\n        aat = hig - 1\n        while aat >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            aat -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(jesxz):\n    for qhd in range(1, len(jesxz)):\n        key = arr[i]\n        ofo = qhd - 1\n        while ofo >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            ofo -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(qlmcb):\n    for ntu in range(1, len(qlmcb)):\n        key = arr[i]\n        neh = ntu - 1\n        while neh >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            neh -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(aguru):\n    for aqd in range(1, len(aguru)):\n        key = arr[i]\n        skh = aqd - 1\n        while skh >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            skh -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(ojpge):\n    for zjb in range(1, len(ojpge)):\n        key = arr[i]\n        rvt = zjb - 1\n        while rvt >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            rvt -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(wdqwd):\n    for ngg in range(1, len(wdqwd)):\n        key = arr[i]\n        vxm = ngg - 1\n        while vxm >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            vxm -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(qbcek):\n    for tza in range(1, len(qbcek)):\n        key = arr[i]\n        bdc = tza - 1\n        while bdc >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            bdc -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(iwimu):\n    for ywn in range(1, len(iwimu)):\n        key = arr[i]\n        oua = ywn - 1\n        while oua >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            oua -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(jbttk):\n    for pgz in range(1, len(jbttk)):\n        key = arr[i]\n        ssa = pgz - 1\n        while ssa >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            ssa -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(kcchj):\n    for mqx in range(1, len(kcchj)):\n        key = arr[i]\n        dps = mqx - 1\n        while dps >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            dps -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(xjtbp):\n    for zwz in range(1, len(xjtbp)):\n        key = arr[i]\n        iwd = zwz - 1\n        while iwd >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            iwd -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(kfafl):\n    for bvn in range(1, len(kfafl)):\n        key = arr[i]\n        ici = bvn - 1\n        while ici >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            ici -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(tdoxm):\n    for lag in range(1, len(tdoxm)):\n        key = arr[i]\n        rgf = lag - 1\n        while rgf >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            rgf -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(vapvy):\n    for ojs in range(1, len(vapvy)):\n        key = arr[i]\n        hdw = ojs - 1\n        while hdw >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            hdw -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(fmkwv):\n    for qof in range(1, len(fmkwv)):\n        key = arr[i]\n        own = qof - 1\n        while own >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            own -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(ylnmm):\n    for qro in range(1, len(ylnmm)):\n        key = arr[i]\n        zbf = qro - 1\n        while zbf >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            zbf -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(acdsl):\n    for zgx in range(1, len(acdsl)):\n        key = arr[i]\n        jvn = zgx - 1\n        while jvn >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            jvn -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(nftfo):\n    for qdr in range(1, len(nftfo)):\n        key = arr[i]\n        tqd = qdr - 1\n        while tqd >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            tqd -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(eptye):\n    for hhg in range(1, len(eptye)):\n        key = arr[i]\n        vhn = hhg - 1\n        while vhn >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            vhn -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(nyswn):\n    for azu in range(1, len(nyswn)):\n        key = arr[i]\n        cek = azu - 1\n        while cek >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            cek -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(oalyo):\n    for glt in range(1, len(oalyo)):\n        key = arr[i]\n        hfk = glt - 1\n        while hfk >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            hfk -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(ayncz):\n    for brg in range(1, len(ayncz)):\n        key = arr[i]\n        oju = brg - 1\n        while oju >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            oju -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(krrls):\n    for ett in range(1, len(krrls)):\n        key = arr[i]\n        bhk = ett - 1\n        while bhk >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            bhk -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(vnwid):\n    for xzl in range(1, len(vnwid)):\n        key = arr[i]\n        iju = xzl - 1\n        while iju >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            iju -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(buvix):\n    for ify in range(1, len(buvix)):\n        key = arr[i]\n        wxu = ify - 1\n        while wxu >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            wxu -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(eyoku):\n    for ada in range(1, len(eyoku)):\n        key = arr[i]\n        qsm = ada - 1\n        while qsm >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            qsm -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(blvmy):\n    for nsx in range(1, len(blvmy)):\n        key = arr[i]\n        kox = nsx - 1\n        while kox >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            kox -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(oacaq):\n    for ods in range(1, len(oacaq)):\n        key = arr[i]\n        ime = ods - 1\n        while ime >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            ime -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(qnxdf):\n    for ydt in range(1, len(qnxdf)):\n        key = arr[i]\n        svz = ydt - 1\n        while svz >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            svz -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(ubght):\n    for llx in range(1, len(ubght)):\n        key = arr[i]\n        cmw = llx - 1\n        while cmw >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            cmw -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(zbmsm):\n    for uzn in range(1, len(zbmsm)):\n        key = arr[i]\n        kko = uzn - 1\n        while kko >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            kko -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(etyqq):\n    for xlv in range(1, len(etyqq)):\n        key = arr[i]\n        bcm = xlv - 1\n        while bcm >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            bcm -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(ekmpw):\n    for zsj in range(1, len(ekmpw)):\n        key = arr[i]\n        ewh = zsj - 1\n        while ewh >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            ewh -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(lmlsv):\n    for fpd in range(1, len(lmlsv)):\n        key = arr[i]\n        hwo = fpd - 1\n        while hwo >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            hwo -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(uuind):\n    for dlj in range(1, len(uuind)):\n        key = arr[i]\n        hpm = dlj - 1\n        while hpm >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            hpm -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(wqqxj):\n    for pln in range(1, len(wqqxj)):\n        key = arr[i]\n        zck = pln - 1\n        while zck >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            zck -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(tvggh):\n    for waa in range(1, len(tvggh)):\n        key = arr[i]\n        fyl = waa - 1\n        while fyl >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            fyl -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(rjixo):\n    for ifh in range(1, len(rjixo)):\n        key = arr[i]\n        xvf = ifh - 1\n        while xvf >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            xvf -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(sbxga):\n    for yhy in range(1, len(sbxga)):\n        key = arr[i]\n        mdb = yhy - 1\n        while mdb >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            mdb -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(wfesw):\n    for ofx in range(1, len(wfesw)):\n        key = arr[i]\n        zpr = ofx - 1\n        while zpr >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            zpr -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def insertion_sort(alceg):\n    for yjo in range(1, len(alceg)):\n        key = arr[i]\n        lsa = yjo - 1\n        while lsa >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            lsa -= 1\n        arr[j + 1] = key\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(zyrkw):\n    for aye in range(len(zyrkw)):\n        min_idx = i\n        for smu in range(i + 1, len(zyrkw)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(ncdgh):\n    for njb in range(len(ncdgh)):\n        min_idx = i\n        for xjh in range(i + 1, len(ncdgh)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(btywg):\n    for qln in range(len(btywg)):\n        min_idx = i\n        for vne in range(i + 1, len(btywg)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(xdesh):\n    for szu in range(len(xdesh)):\n        min_idx = i\n        for kwj in range(i + 1, len(xdesh)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(fqqsf):\n    for byo in range(len(fqqsf)):\n        min_idx = i\n        for nxo in range(i + 1, len(fqqsf)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(xtiny):\n    for wey in range(len(xtiny)):\n        min_idx = i\n        for ikz in range(i + 1, len(xtiny)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(babaw):\n    for pdv in range(len(babaw)):\n        min_idx = i\n        for ypb in range(i + 1, len(babaw)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(bgfqe):\n    for ttv in range(len(bgfqe)):\n        min_idx = i\n        for bwd in range(i + 1, len(bgfqe)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(alhel):\n    for ckc in range(len(alhel)):\n        min_idx = i\n        for evb in range(i + 1, len(alhel)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(qmrev):\n    for hhv in range(len(qmrev)):\n        min_idx = i\n        for wem in range(i + 1, len(qmrev)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(lhxut):\n    for kko in range(len(lhxut)):\n        min_idx = i\n        for fxv in range(i + 1, len(lhxut)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(djafc):\n    for uxg in range(len(djafc)):\n        min_idx = i\n        for zin in range(i + 1, len(djafc)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(fpwew):\n    for tqq in range(len(fpwew)):\n        min_idx = i\n        for dwq in range(i + 1, len(fpwew)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(nrstn):\n    for qeg in range(len(nrstn)):\n        min_idx = i\n        for jqi in range(i + 1, len(nrstn)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(hnasq):\n    for huv in range(len(hnasq)):\n        min_idx = i\n        for ont in range(i + 1, len(hnasq)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(exlhy):\n    for sak in range(len(exlhy)):\n        min_idx = i\n        for gxf in range(i + 1, len(exlhy)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(gislm):\n    for afu in range(len(gislm)):\n        min_idx = i\n        for uyt in range(i + 1, len(gislm)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(atyqo):\n    for yra in range(len(atyqo)):\n        min_idx = i\n        for kat in range(i + 1, len(atyqo)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(tadut):\n    for oum in range(len(tadut)):\n        min_idx = i\n        for xpq in range(i + 1, len(tadut)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(csdem):\n    for xvr in range(len(csdem)):\n        min_idx = i\n        for dnd in range(i + 1, len(csdem)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(dsgyw):\n    for dup in range(len(dsgyw)):\n        min_idx = i\n        for fbn in range(i + 1, len(dsgyw)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(zlauw):\n    for kfq in range(len(zlauw)):\n        min_idx = i\n        for kfm in range(i + 1, len(zlauw)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(zukhj):\n    for olp in range(len(zukhj)):\n        min_idx = i\n        for mbn in range(i + 1, len(zukhj)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(tasjg):\n    for ssp in range(len(tasjg)):\n        min_idx = i\n        for krs in range(i + 1, len(tasjg)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(wnxya):\n    for ziz in range(len(wnxya)):\n        min_idx = i\n        for rzx in range(i + 1, len(wnxya)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(rgjvj):\n    for qqj in range(len(rgjvj)):\n        min_idx = i\n        for ioi in range(i + 1, len(rgjvj)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(ykkrw):\n    for jup in range(len(ykkrw)):\n        min_idx = i\n        for kwc in range(i + 1, len(ykkrw)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(vxlqz):\n    for ths in range(len(vxlqz)):\n        min_idx = i\n        for qwt in range(i + 1, len(vxlqz)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(bybbh):\n    for qqk in range(len(bybbh)):\n        min_idx = i\n        for fjq in range(i + 1, len(bybbh)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(rkthm):\n    for edx in range(len(rkthm)):\n        min_idx = i\n        for zoc in range(i + 1, len(rkthm)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(gmlmi):\n    for hjj in range(len(gmlmi)):\n        min_idx = i\n        for jbh in range(i + 1, len(gmlmi)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(ktazk):\n    for yuw in range(len(ktazk)):\n        min_idx = i\n        for iod in range(i + 1, len(ktazk)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(gmiqu):\n    for elh in range(len(gmiqu)):\n        min_idx = i\n        for xwj in range(i + 1, len(gmiqu)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(clntt):\n    for hvf in range(len(clntt)):\n        min_idx = i\n        for yxt in range(i + 1, len(clntt)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(ihocz):\n    for mhe in range(len(ihocz)):\n        min_idx = i\n        for yoh in range(i + 1, len(ihocz)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(cvavj):\n    for ybz in range(len(cvavj)):\n        min_idx = i\n        for wli in range(i + 1, len(cvavj)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(jmmem):\n    for roq in range(len(jmmem)):\n        min_idx = i\n        for srf in range(i + 1, len(jmmem)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(ruyla):\n    for ebv in range(len(ruyla)):\n        min_idx = i\n        for ixw in range(i + 1, len(ruyla)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(lfzyy):\n    for yjs in range(len(lfzyy)):\n        min_idx = i\n        for mcn in range(i + 1, len(lfzyy)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(hlsaf):\n    for ryk in range(len(hlsaf)):\n        min_idx = i\n        for wur in range(i + 1, len(hlsaf)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(ulfjg):\n    for dus in range(len(ulfjg)):\n        min_idx = i\n        for bus in range(i + 1, len(ulfjg)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(jodxf):\n    for kuy in range(len(jodxf)):\n        min_idx = i\n        for nyi in range(i + 1, len(jodxf)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(jovbd):\n    for rqn in range(len(jovbd)):\n        min_idx = i\n        for ebw in range(i + 1, len(jovbd)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(twkzo):\n    for vjw in range(len(twkzo)):\n        min_idx = i\n        for sgq in range(i + 1, len(twkzo)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(chxbl):\n    for uuq in range(len(chxbl)):\n        min_idx = i\n        for pcy in range(i + 1, len(chxbl)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(nzunf):\n    for diu in range(len(nzunf)):\n        min_idx = i\n        for wpd in range(i + 1, len(nzunf)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(qrspp):\n    for khy in range(len(qrspp)):\n        min_idx = i\n        for vnu in range(i + 1, len(qrspp)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(himim):\n    for bqm in range(len(himim)):\n        min_idx = i\n        for sux in range(i + 1, len(himim)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(zwayj):\n    for wnj in range(len(zwayj)):\n        min_idx = i\n        for uab in range(i + 1, len(zwayj)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(omcic):\n    for fui in range(len(omcic)):\n        min_idx = i\n        for eno in range(i + 1, len(omcic)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(kwqny):\n    for dgw in range(len(kwqny)):\n        min_idx = i\n        for pzv in range(i + 1, len(kwqny)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(nkniu):\n    for xln in range(len(nkniu)):\n        min_idx = i\n        for tai in range(i + 1, len(nkniu)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(pmlos):\n    for akn in range(len(pmlos)):\n        min_idx = i\n        for pft in range(i + 1, len(pmlos)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(hvfqw):\n    for efg in range(len(hvfqw)):\n        min_idx = i\n        for xqg in range(i + 1, len(hvfqw)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(hsnsv):\n    for gdu in range(len(hsnsv)):\n        min_idx = i\n        for dig in range(i + 1, len(hsnsv)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(hafmj):\n    for ztr in range(len(hafmj)):\n        min_idx = i\n        for kts in range(i + 1, len(hafmj)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(jqxbf):\n    for myj in range(len(jqxbf)):\n        min_idx = i\n        for hok in range(i + 1, len(jqxbf)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(swokv):\n    for liw in range(len(swokv)):\n        min_idx = i\n        for ezv in range(i + 1, len(swokv)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(iewsz):\n    for tgj in range(len(iewsz)):\n        min_idx = i\n        for syu in range(i + 1, len(iewsz)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(qddzu):\n    for gak in range(len(qddzu)):\n        min_idx = i\n        for ncn in range(i + 1, len(qddzu)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(pbcjg):\n    for sed in range(len(pbcjg)):\n        min_idx = i\n        for qpy in range(i + 1, len(pbcjg)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(axawd):\n    for hdg in range(len(axawd)):\n        min_idx = i\n        for xwk in range(i + 1, len(axawd)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(feoaz):\n    for lvn in range(len(feoaz)):\n        min_idx = i\n        for mpu in range(i + 1, len(feoaz)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(mgrex):\n    for zvx in range(len(mgrex)):\n        min_idx = i\n        for zkt in range(i + 1, len(mgrex)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(iodde):\n    for azv in range(len(iodde)):\n        min_idx = i\n        for ows in range(i + 1, len(iodde)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(zifaj):\n    for ojq in range(len(zifaj)):\n        min_idx = i\n        for pfy in range(i + 1, len(zifaj)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(vmbmf):\n    for dkf in range(len(vmbmf)):\n        min_idx = i\n        for vmn in range(i + 1, len(vmbmf)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(rdear):\n    for qas in range(len(rdear)):\n        min_idx = i\n        for awc in range(i + 1, len(rdear)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(lfqea):\n    for xyj in range(len(lfqea)):\n        min_idx = i\n        for cwu in range(i + 1, len(lfqea)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(dmyab):\n    for vsd in range(len(dmyab)):\n        min_idx = i\n        for toq in range(i + 1, len(dmyab)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(jhckd):\n    for zgr in range(len(jhckd)):\n        min_idx = i\n        for bbs in range(i + 1, len(jhckd)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(xbaxs):\n    for pfe in range(len(xbaxs)):\n        min_idx = i\n        for tgb in range(i + 1, len(xbaxs)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(jazfu):\n    for sik in range(len(jazfu)):\n        min_idx = i\n        for vno in range(i + 1, len(jazfu)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(yfbey):\n    for che in range(len(yfbey)):\n        min_idx = i\n        for yvm in range(i + 1, len(yfbey)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(fqyhv):\n    for bhg in range(len(fqyhv)):\n        min_idx = i\n        for yja in range(i + 1, len(fqyhv)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(cyswg):\n    for sit in range(len(cyswg)):\n        min_idx = i\n        for pxd in range(i + 1, len(cyswg)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(yqghg):\n    for rpo in range(len(yqghg)):\n        min_idx = i\n        for thy in range(i + 1, len(yqghg)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(hklef):\n    for imw in range(len(hklef)):\n        min_idx = i\n        for lnj in range(i + 1, len(hklef)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(nteku):\n    for gfz in range(len(nteku)):\n        min_idx = i\n        for enf in range(i + 1, len(nteku)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(iapew):\n    for tde in range(len(iapew)):\n        min_idx = i\n        for lob in range(i + 1, len(iapew)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(sassx):\n    for ghr in range(len(sassx)):\n        min_idx = i\n        for qhq in range(i + 1, len(sassx)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(xuguo):\n    for wcf in range(len(xuguo)):\n        min_idx = i\n        for etd in range(i + 1, len(xuguo)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(togte):\n    for sla in range(len(togte)):\n        min_idx = i\n        for vie in range(i + 1, len(togte)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(xirzm):\n    for dit in range(len(xirzm)):\n        min_idx = i\n        for auo in range(i + 1, len(xirzm)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(mfzkz):\n    for mne in range(len(mfzkz)):\n        min_idx = i\n        for nhd in range(i + 1, len(mfzkz)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(gzgsu):\n    for swk in range(len(gzgsu)):\n        min_idx = i\n        for zeg in range(i + 1, len(gzgsu)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(xdvym):\n    for fhs in range(len(xdvym)):\n        min_idx = i\n        for jyp in range(i + 1, len(xdvym)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(ytvye):\n    for rpb in range(len(ytvye)):\n        min_idx = i\n        for lau in range(i + 1, len(ytvye)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(rbezf):\n    for zvy in range(len(rbezf)):\n        min_idx = i\n        for wtx in range(i + 1, len(rbezf)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(alfpt):\n    for god in range(len(alfpt)):\n        min_idx = i\n        for vfp in range(i + 1, len(alfpt)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(cjzxn):\n    for eqp in range(len(cjzxn)):\n        min_idx = i\n        for ocx in range(i + 1, len(cjzxn)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(mougu):\n    for bkd in range(len(mougu)):\n        min_idx = i\n        for qhn in range(i + 1, len(mougu)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(amogq):\n    for lzl in range(len(amogq)):\n        min_idx = i\n        for lut in range(i + 1, len(amogq)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(jcaww):\n    for axs in range(len(jcaww)):\n        min_idx = i\n        for gnh in range(i + 1, len(jcaww)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(scock):\n    for zbb in range(len(scock)):\n        min_idx = i\n        for pva in range(i + 1, len(scock)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(biatg):\n    for zhx in range(len(biatg)):\n        min_idx = i\n        for gdj in range(i + 1, len(biatg)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(fyqxz):\n    for aso in range(len(fyqxz)):\n        min_idx = i\n        for fqc in range(i + 1, len(fyqxz)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(hrfom):\n    for rpm in range(len(hrfom)):\n        min_idx = i\n        for dye in range(i + 1, len(hrfom)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(knbgl):\n    for thv in range(len(knbgl)):\n        min_idx = i\n        for uzr in range(i + 1, len(knbgl)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(lomgs):\n    for ves in range(len(lomgs)):\n        min_idx = i\n        for qet in range(i + 1, len(lomgs)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(sunbk):\n    for myb in range(len(sunbk)):\n        min_idx = i\n        for wde in range(i + 1, len(sunbk)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(tmyml):\n    for csq in range(len(tmyml)):\n        min_idx = i\n        for hwu in range(i + 1, len(tmyml)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(gjwnh):\n    for jeo in range(len(gjwnh)):\n        min_idx = i\n        for nno in range(i + 1, len(gjwnh)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(ngdno):\n    for skw in range(len(ngdno)):\n        min_idx = i\n        for bww in range(i + 1, len(ngdno)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(xfdhc):\n    for etm in range(len(xfdhc)):\n        min_idx = i\n        for nmm in range(i + 1, len(xfdhc)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(dtrta):\n    for yzn in range(len(dtrta)):\n        min_idx = i\n        for izp in range(i + 1, len(dtrta)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(euweg):\n    for mtf in range(len(euweg)):\n        min_idx = i\n        for jxb in range(i + 1, len(euweg)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(ijvna):\n    for wxs in range(len(ijvna)):\n        min_idx = i\n        for tks in range(i + 1, len(ijvna)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(agsxl):\n    for koh in range(len(agsxl)):\n        min_idx = i\n        for idm in range(i + 1, len(agsxl)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(emcax):\n    for yjs in range(len(emcax)):\n        min_idx = i\n        for gdq in range(i + 1, len(emcax)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(rofqg):\n    for csq in range(len(rofqg)):\n        min_idx = i\n        for lvd in range(i + 1, len(rofqg)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(whvgd):\n    for bvk in range(len(whvgd)):\n        min_idx = i\n        for aat in range(i + 1, len(whvgd)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(wfydt):\n    for slh in range(len(wfydt)):\n        min_idx = i\n        for wbt in range(i + 1, len(wfydt)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(ifwfv):\n    for eqg in range(len(ifwfv)):\n        min_idx = i\n        for rjk in range(i + 1, len(ifwfv)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(wciha):\n    for ncf in range(len(wciha)):\n        min_idx = i\n        for oum in range(i + 1, len(wciha)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(zcomo):\n    for vrd in range(len(zcomo)):\n        min_idx = i\n        for avo in range(i + 1, len(zcomo)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(oypad):\n    for wnv in range(len(oypad)):\n        min_idx = i\n        for ibm in range(i + 1, len(oypad)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(hadnn):\n    for wwl in range(len(hadnn)):\n        min_idx = i\n        for eln in range(i + 1, len(hadnn)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(qnllu):\n    for lkd in range(len(qnllu)):\n        min_idx = i\n        for fxa in range(i + 1, len(qnllu)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(bcboa):\n    for kib in range(len(bcboa)):\n        min_idx = i\n        for ezm in range(i + 1, len(bcboa)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(rfbaz):\n    for brl in range(len(rfbaz)):\n        min_idx = i\n        for mbe in range(i + 1, len(rfbaz)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(rjhfj):\n    for kus in range(len(rjhfj)):\n        min_idx = i\n        for hnw in range(i + 1, len(rjhfj)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(ulevq):\n    for jux in range(len(ulevq)):\n        min_idx = i\n        for urs in range(i + 1, len(ulevq)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(zurfm):\n    for pep in range(len(zurfm)):\n        min_idx = i\n        for wjm in range(i + 1, len(zurfm)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(vbpma):\n    for lzw in range(len(vbpma)):\n        min_idx = i\n        for bzb in range(i + 1, len(vbpma)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(ekvsl):\n    for qpf in range(len(ekvsl)):\n        min_idx = i\n        for qms in range(i + 1, len(ekvsl)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(ykggl):\n    for ypr in range(len(ykggl)):\n        min_idx = i\n        for gul in range(i + 1, len(ykggl)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(iwkts):\n    for lvb in range(len(iwkts)):\n        min_idx = i\n        for hma in range(i + 1, len(iwkts)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(fkkgc):\n    for stf in range(len(fkkgc)):\n        min_idx = i\n        for ovs in range(i + 1, len(fkkgc)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(ibcpg):\n    for nao in range(len(ibcpg)):\n        min_idx = i\n        for pgm in range(i + 1, len(ibcpg)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(nocgc):\n    for vjm in range(len(nocgc)):\n        min_idx = i\n        for lqh in range(i + 1, len(nocgc)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(asgzn):\n    for fvr in range(len(asgzn)):\n        min_idx = i\n        for xdz in range(i + 1, len(asgzn)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "def selection_sort(ufurs):\n    for wpr in range(len(ufurs)):\n        min_idx = i\n        for uzz in range(i + 1, len(ufurs)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
    "O": "O(n^2)",
    "\u03a9": "\u03a9(n^2)",
    "\u0398": "\u0398(n^2)"
  },
  {
    "code": "import heapq\ndef heap_sort(arr):\n    heapq.heapify(arr)\n    return [heapq.heappop(arr) for _ in range(len(arr))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(dqdbo):\n    heapq.heapify(dqdbo)\n    return [heapq.heappop(dqdbo) for _ in range(len(dqdbo))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(yamnn):\n    heapq.heapify(yamnn)\n    return [heapq.heappop(yamnn) for _ in range(len(yamnn))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(odrok):\n    heapq.heapify(odrok)\n    return [heapq.heappop(odrok) for _ in range(len(odrok))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(chbii):\n    heapq.heapify(chbii)\n    return [heapq.heappop(chbii) for _ in range(len(chbii))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(nhnwp):\n    heapq.heapify(nhnwp)\n    return [heapq.heappop(nhnwp) for _ in range(len(nhnwp))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(hrlqq):\n    heapq.heapify(hrlqq)\n    return [heapq.heappop(hrlqq) for _ in range(len(hrlqq))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(bycqc):\n    heapq.heapify(bycqc)\n    return [heapq.heappop(bycqc) for _ in range(len(bycqc))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(kzcqq):\n    heapq.heapify(kzcqq)\n    return [heapq.heappop(kzcqq) for _ in range(len(kzcqq))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(qjrjr):\n    heapq.heapify(qjrjr)\n    return [heapq.heappop(qjrjr) for _ in range(len(qjrjr))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(zazvw):\n    heapq.heapify(zazvw)\n    return [heapq.heappop(zazvw) for _ in range(len(zazvw))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(boien):\n    heapq.heapify(boien)\n    return [heapq.heappop(boien) for _ in range(len(boien))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(klfch):\n    heapq.heapify(klfch)\n    return [heapq.heappop(klfch) for _ in range(len(klfch))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(mehzp):\n    heapq.heapify(mehzp)\n    return [heapq.heappop(mehzp) for _ in range(len(mehzp))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(mjwqg):\n    heapq.heapify(mjwqg)\n    return [heapq.heappop(mjwqg) for _ in range(len(mjwqg))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(ukzan):\n    heapq.heapify(ukzan)\n    return [heapq.heappop(ukzan) for _ in range(len(ukzan))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(twjnl):\n    heapq.heapify(twjnl)\n    return [heapq.heappop(twjnl) for _ in range(len(twjnl))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(rukpv):\n    heapq.heapify(rukpv)\n    return [heapq.heappop(rukpv) for _ in range(len(rukpv))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(cvenh):\n    heapq.heapify(cvenh)\n    return [heapq.heappop(cvenh) for _ in range(len(cvenh))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(jjdyv):\n    heapq.heapify(jjdyv)\n    return [heapq.heappop(jjdyv) for _ in range(len(jjdyv))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(xsdnd):\n    heapq.heapify(xsdnd)\n    return [heapq.heappop(xsdnd) for _ in range(len(xsdnd))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(msmbc):\n    heapq.heapify(msmbc)\n    return [heapq.heappop(msmbc) for _ in range(len(msmbc))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(ihrxg):\n    heapq.heapify(ihrxg)\n    return [heapq.heappop(ihrxg) for _ in range(len(ihrxg))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(szijj):\n    heapq.heapify(szijj)\n    return [heapq.heappop(szijj) for _ in range(len(szijj))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(aelgk):\n    heapq.heapify(aelgk)\n    return [heapq.heappop(aelgk) for _ in range(len(aelgk))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(bnayb):\n    heapq.heapify(bnayb)\n    return [heapq.heappop(bnayb) for _ in range(len(bnayb))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(tjxzq):\n    heapq.heapify(tjxzq)\n    return [heapq.heappop(tjxzq) for _ in range(len(tjxzq))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(ufnpw):\n    heapq.heapify(ufnpw)\n    return [heapq.heappop(ufnpw) for _ in range(len(ufnpw))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(eqyuk):\n    heapq.heapify(eqyuk)\n    return [heapq.heappop(eqyuk) for _ in range(len(eqyuk))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(zykps):\n    heapq.heapify(zykps)\n    return [heapq.heappop(zykps) for _ in range(len(zykps))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(caywj):\n    heapq.heapify(caywj)\n    return [heapq.heappop(caywj) for _ in range(len(caywj))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(ppwba):\n    heapq.heapify(ppwba)\n    return [heapq.heappop(ppwba) for _ in range(len(ppwba))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(aspun):\n    heapq.heapify(aspun)\n    return [heapq.heappop(aspun) for _ in range(len(aspun))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(ornsu):\n    heapq.heapify(ornsu)\n    return [heapq.heappop(ornsu) for _ in range(len(ornsu))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(jyblc):\n    heapq.heapify(jyblc)\n    return [heapq.heappop(jyblc) for _ in range(len(jyblc))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(fdnta):\n    heapq.heapify(fdnta)\n    return [heapq.heappop(fdnta) for _ in range(len(fdnta))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(fvgdo):\n    heapq.heapify(fvgdo)\n    return [heapq.heappop(fvgdo) for _ in range(len(fvgdo))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(udalf):\n    heapq.heapify(udalf)\n    return [heapq.heappop(udalf) for _ in range(len(udalf))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(hszkk):\n    heapq.heapify(hszkk)\n    return [heapq.heappop(hszkk) for _ in range(len(hszkk))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(uifij):\n    heapq.heapify(uifij)\n    return [heapq.heappop(uifij) for _ in range(len(uifij))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(tcvua):\n    heapq.heapify(tcvua)\n    return [heapq.heappop(tcvua) for _ in range(len(tcvua))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(tdtfv):\n    heapq.heapify(tdtfv)\n    return [heapq.heappop(tdtfv) for _ in range(len(tdtfv))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(plxrr):\n    heapq.heapify(plxrr)\n    return [heapq.heappop(plxrr) for _ in range(len(plxrr))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(lqlrq):\n    heapq.heapify(lqlrq)\n    return [heapq.heappop(lqlrq) for _ in range(len(lqlrq))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(ootmm):\n    heapq.heapify(ootmm)\n    return [heapq.heappop(ootmm) for _ in range(len(ootmm))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(xomqq):\n    heapq.heapify(xomqq)\n    return [heapq.heappop(xomqq) for _ in range(len(xomqq))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(mprnz):\n    heapq.heapify(mprnz)\n    return [heapq.heappop(mprnz) for _ in range(len(mprnz))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(owtyo):\n    heapq.heapify(owtyo)\n    return [heapq.heappop(owtyo) for _ in range(len(owtyo))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(zkxrz):\n    heapq.heapify(zkxrz)\n    return [heapq.heappop(zkxrz) for _ in range(len(zkxrz))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(jnoar):\n    heapq.heapify(jnoar)\n    return [heapq.heappop(jnoar) for _ in range(len(jnoar))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(yrytg):\n    heapq.heapify(yrytg)\n    return [heapq.heappop(yrytg) for _ in range(len(yrytg))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(vskct):\n    heapq.heapify(vskct)\n    return [heapq.heappop(vskct) for _ in range(len(vskct))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(nncvi):\n    heapq.heapify(nncvi)\n    return [heapq.heappop(nncvi) for _ in range(len(nncvi))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(nhodk):\n    heapq.heapify(nhodk)\n    return [heapq.heappop(nhodk) for _ in range(len(nhodk))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(ucxbk):\n    heapq.heapify(ucxbk)\n    return [heapq.heappop(ucxbk) for _ in range(len(ucxbk))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(qnrtd):\n    heapq.heapify(qnrtd)\n    return [heapq.heappop(qnrtd) for _ in range(len(qnrtd))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(bhjuu):\n    heapq.heapify(bhjuu)\n    return [heapq.heappop(bhjuu) for _ in range(len(bhjuu))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(ukaao):\n    heapq.heapify(ukaao)\n    return [heapq.heappop(ukaao) for _ in range(len(ukaao))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(usoxr):\n    heapq.heapify(usoxr)\n    return [heapq.heappop(usoxr) for _ in range(len(usoxr))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(cxfyi):\n    heapq.heapify(cxfyi)\n    return [heapq.heappop(cxfyi) for _ in range(len(cxfyi))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(zwudd):\n    heapq.heapify(zwudd)\n    return [heapq.heappop(zwudd) for _ in range(len(zwudd))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(cwxam):\n    heapq.heapify(cwxam)\n    return [heapq.heappop(cwxam) for _ in range(len(cwxam))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(jpxpc):\n    heapq.heapify(jpxpc)\n    return [heapq.heappop(jpxpc) for _ in range(len(jpxpc))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(okofa):\n    heapq.heapify(okofa)\n    return [heapq.heappop(okofa) for _ in range(len(okofa))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(uvhiv):\n    heapq.heapify(uvhiv)\n    return [heapq.heappop(uvhiv) for _ in range(len(uvhiv))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(yfnqj):\n    heapq.heapify(yfnqj)\n    return [heapq.heappop(yfnqj) for _ in range(len(yfnqj))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(shgfz):\n    heapq.heapify(shgfz)\n    return [heapq.heappop(shgfz) for _ in range(len(shgfz))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(qdxdm):\n    heapq.heapify(qdxdm)\n    return [heapq.heappop(qdxdm) for _ in range(len(qdxdm))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(rhclo):\n    heapq.heapify(rhclo)\n    return [heapq.heappop(rhclo) for _ in range(len(rhclo))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(vhkbr):\n    heapq.heapify(vhkbr)\n    return [heapq.heappop(vhkbr) for _ in range(len(vhkbr))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(jovhm):\n    heapq.heapify(jovhm)\n    return [heapq.heappop(jovhm) for _ in range(len(jovhm))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(vhrlb):\n    heapq.heapify(vhrlb)\n    return [heapq.heappop(vhrlb) for _ in range(len(vhrlb))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(npepi):\n    heapq.heapify(npepi)\n    return [heapq.heappop(npepi) for _ in range(len(npepi))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(cpphx):\n    heapq.heapify(cpphx)\n    return [heapq.heappop(cpphx) for _ in range(len(cpphx))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(gowvi):\n    heapq.heapify(gowvi)\n    return [heapq.heappop(gowvi) for _ in range(len(gowvi))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(suoyb):\n    heapq.heapify(suoyb)\n    return [heapq.heappop(suoyb) for _ in range(len(suoyb))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(guhxb):\n    heapq.heapify(guhxb)\n    return [heapq.heappop(guhxb) for _ in range(len(guhxb))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(zdnds):\n    heapq.heapify(zdnds)\n    return [heapq.heappop(zdnds) for _ in range(len(zdnds))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(qmqlo):\n    heapq.heapify(qmqlo)\n    return [heapq.heappop(qmqlo) for _ in range(len(qmqlo))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(quboo):\n    heapq.heapify(quboo)\n    return [heapq.heappop(quboo) for _ in range(len(quboo))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(jgvzc):\n    heapq.heapify(jgvzc)\n    return [heapq.heappop(jgvzc) for _ in range(len(jgvzc))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(eqrhv):\n    heapq.heapify(eqrhv)\n    return [heapq.heappop(eqrhv) for _ in range(len(eqrhv))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(xvgct):\n    heapq.heapify(xvgct)\n    return [heapq.heappop(xvgct) for _ in range(len(xvgct))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(wwagk):\n    heapq.heapify(wwagk)\n    return [heapq.heappop(wwagk) for _ in range(len(wwagk))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(yfgzo):\n    heapq.heapify(yfgzo)\n    return [heapq.heappop(yfgzo) for _ in range(len(yfgzo))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(kqlbd):\n    heapq.heapify(kqlbd)\n    return [heapq.heappop(kqlbd) for _ in range(len(kqlbd))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(inpuw):\n    heapq.heapify(inpuw)\n    return [heapq.heappop(inpuw) for _ in range(len(inpuw))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(gpeyw):\n    heapq.heapify(gpeyw)\n    return [heapq.heappop(gpeyw) for _ in range(len(gpeyw))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(zojyv):\n    heapq.heapify(zojyv)\n    return [heapq.heappop(zojyv) for _ in range(len(zojyv))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(nbknr):\n    heapq.heapify(nbknr)\n    return [heapq.heappop(nbknr) for _ in range(len(nbknr))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(igtoa):\n    heapq.heapify(igtoa)\n    return [heapq.heappop(igtoa) for _ in range(len(igtoa))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(gkcyb):\n    heapq.heapify(gkcyb)\n    return [heapq.heappop(gkcyb) for _ in range(len(gkcyb))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(lcrti):\n    heapq.heapify(lcrti)\n    return [heapq.heappop(lcrti) for _ in range(len(lcrti))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(ggmms):\n    heapq.heapify(ggmms)\n    return [heapq.heappop(ggmms) for _ in range(len(ggmms))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(ihfxy):\n    heapq.heapify(ihfxy)\n    return [heapq.heappop(ihfxy) for _ in range(len(ihfxy))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(mxczi):\n    heapq.heapify(mxczi)\n    return [heapq.heappop(mxczi) for _ in range(len(mxczi))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(cisaw):\n    heapq.heapify(cisaw)\n    return [heapq.heappop(cisaw) for _ in range(len(cisaw))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(zfusq):\n    heapq.heapify(zfusq)\n    return [heapq.heappop(zfusq) for _ in range(len(zfusq))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(rnfad):\n    heapq.heapify(rnfad)\n    return [heapq.heappop(rnfad) for _ in range(len(rnfad))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(hezju):\n    heapq.heapify(hezju)\n    return [heapq.heappop(hezju) for _ in range(len(hezju))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(sdsvk):\n    heapq.heapify(sdsvk)\n    return [heapq.heappop(sdsvk) for _ in range(len(sdsvk))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(ddsul):\n    heapq.heapify(ddsul)\n    return [heapq.heappop(ddsul) for _ in range(len(ddsul))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(rqpxa):\n    heapq.heapify(rqpxa)\n    return [heapq.heappop(rqpxa) for _ in range(len(rqpxa))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(vetki):\n    heapq.heapify(vetki)\n    return [heapq.heappop(vetki) for _ in range(len(vetki))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(byvve):\n    heapq.heapify(byvve)\n    return [heapq.heappop(byvve) for _ in range(len(byvve))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(wtdfr):\n    heapq.heapify(wtdfr)\n    return [heapq.heappop(wtdfr) for _ in range(len(wtdfr))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(pdicd):\n    heapq.heapify(pdicd)\n    return [heapq.heappop(pdicd) for _ in range(len(pdicd))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(wuigs):\n    heapq.heapify(wuigs)\n    return [heapq.heappop(wuigs) for _ in range(len(wuigs))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(ysfsy):\n    heapq.heapify(ysfsy)\n    return [heapq.heappop(ysfsy) for _ in range(len(ysfsy))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(oblcx):\n    heapq.heapify(oblcx)\n    return [heapq.heappop(oblcx) for _ in range(len(oblcx))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(bmnoj):\n    heapq.heapify(bmnoj)\n    return [heapq.heappop(bmnoj) for _ in range(len(bmnoj))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(cnigx):\n    heapq.heapify(cnigx)\n    return [heapq.heappop(cnigx) for _ in range(len(cnigx))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(gwvxw):\n    heapq.heapify(gwvxw)\n    return [heapq.heappop(gwvxw) for _ in range(len(gwvxw))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(oypxv):\n    heapq.heapify(oypxv)\n    return [heapq.heappop(oypxv) for _ in range(len(oypxv))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(cttya):\n    heapq.heapify(cttya)\n    return [heapq.heappop(cttya) for _ in range(len(cttya))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(wmjqf):\n    heapq.heapify(wmjqf)\n    return [heapq.heappop(wmjqf) for _ in range(len(wmjqf))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(jhqou):\n    heapq.heapify(jhqou)\n    return [heapq.heappop(jhqou) for _ in range(len(jhqou))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(uoikd):\n    heapq.heapify(uoikd)\n    return [heapq.heappop(uoikd) for _ in range(len(uoikd))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(lefdk):\n    heapq.heapify(lefdk)\n    return [heapq.heappop(lefdk) for _ in range(len(lefdk))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(ffeky):\n    heapq.heapify(ffeky)\n    return [heapq.heappop(ffeky) for _ in range(len(ffeky))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(jzsdb):\n    heapq.heapify(jzsdb)\n    return [heapq.heappop(jzsdb) for _ in range(len(jzsdb))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(xattc):\n    heapq.heapify(xattc)\n    return [heapq.heappop(xattc) for _ in range(len(xattc))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(yxlhp):\n    heapq.heapify(yxlhp)\n    return [heapq.heappop(yxlhp) for _ in range(len(yxlhp))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(qkqnc):\n    heapq.heapify(qkqnc)\n    return [heapq.heappop(qkqnc) for _ in range(len(qkqnc))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(orhje):\n    heapq.heapify(orhje)\n    return [heapq.heappop(orhje) for _ in range(len(orhje))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(ilsby):\n    heapq.heapify(ilsby)\n    return [heapq.heappop(ilsby) for _ in range(len(ilsby))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(bvrxa):\n    heapq.heapify(bvrxa)\n    return [heapq.heappop(bvrxa) for _ in range(len(bvrxa))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(wtokz):\n    heapq.heapify(wtokz)\n    return [heapq.heappop(wtokz) for _ in range(len(wtokz))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(rcega):\n    heapq.heapify(rcega)\n    return [heapq.heappop(rcega) for _ in range(len(rcega))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(nvocs):\n    heapq.heapify(nvocs)\n    return [heapq.heappop(nvocs) for _ in range(len(nvocs))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(hlcfd):\n    heapq.heapify(hlcfd)\n    return [heapq.heappop(hlcfd) for _ in range(len(hlcfd))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(bkifj):\n    heapq.heapify(bkifj)\n    return [heapq.heappop(bkifj) for _ in range(len(bkifj))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(edqhe):\n    heapq.heapify(edqhe)\n    return [heapq.heappop(edqhe) for _ in range(len(edqhe))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "import heapq\ndef heap_sort(flhuq):\n    heapq.heapify(flhuq)\n    return [heapq.heappop(flhuq) for _ in range(len(flhuq))]\n",
    "O": "O(n log n)",
    "\u03a9": "\u03a9(n log n)",
    "\u0398": "\u0398(n log n)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stack:\n        node = stack.pop()\n        if node not in visited:\n            visited.add(node)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacwuk:\n        uajd = stack.pop()\n        if uajd not in visited:\n            visited.add(uajd)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacjzc:\n        ifxa = stack.pop()\n        if ifxa not in visited:\n            visited.add(ifxa)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacqgb:\n        gabh = stack.pop()\n        if gabh not in visited:\n            visited.add(gabh)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacuvw:\n        xfzx = stack.pop()\n        if xfzx not in visited:\n            visited.add(xfzx)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacsfr:\n        eatc = stack.pop()\n        if eatc not in visited:\n            visited.add(eatc)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacbmk:\n        gnsq = stack.pop()\n        if gnsq not in visited:\n            visited.add(gnsq)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacups:\n        epzw = stack.pop()\n        if epzw not in visited:\n            visited.add(epzw)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacjqr:\n        qjcc = stack.pop()\n        if qjcc not in visited:\n            visited.add(qjcc)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacbvo:\n        yqkp = stack.pop()\n        if yqkp not in visited:\n            visited.add(yqkp)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacfjh:\n        lhak = stack.pop()\n        if lhak not in visited:\n            visited.add(lhak)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacofs:\n        wgxk = stack.pop()\n        if wgxk not in visited:\n            visited.add(wgxk)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacuxa:\n        jvwm = stack.pop()\n        if jvwm not in visited:\n            visited.add(jvwm)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacdqw:\n        dqnu = stack.pop()\n        if dqnu not in visited:\n            visited.add(dqnu)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stachsy:\n        wpnp = stack.pop()\n        if wpnp not in visited:\n            visited.add(wpnp)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while staciff:\n        kzfc = stack.pop()\n        if kzfc not in visited:\n            visited.add(kzfc)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacsih:\n        vyju = stack.pop()\n        if vyju not in visited:\n            visited.add(vyju)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacsyr:\n        dpkx = stack.pop()\n        if dpkx not in visited:\n            visited.add(dpkx)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacgik:\n        fnzw = stack.pop()\n        if fnzw not in visited:\n            visited.add(fnzw)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacjtj:\n        gzop = stack.pop()\n        if gzop not in visited:\n            visited.add(gzop)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacjps:\n        zfbj = stack.pop()\n        if zfbj not in visited:\n            visited.add(zfbj)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacwwa:\n        waij = stack.pop()\n        if waij not in visited:\n            visited.add(waij)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacdyn:\n        ecom = stack.pop()\n        if ecom not in visited:\n            visited.add(ecom)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacgwk:\n        vlaa = stack.pop()\n        if vlaa not in visited:\n            visited.add(vlaa)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacoyz:\n        tbww = stack.pop()\n        if tbww not in visited:\n            visited.add(tbww)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while staccue:\n        vxui = stack.pop()\n        if vxui not in visited:\n            visited.add(vxui)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacopr:\n        tgqo = stack.pop()\n        if tgqo not in visited:\n            visited.add(tgqo)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacrsi:\n        gjts = stack.pop()\n        if gjts not in visited:\n            visited.add(gjts)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacqjl:\n        xqst = stack.pop()\n        if xqst not in visited:\n            visited.add(xqst)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacztj:\n        ejjv = stack.pop()\n        if ejjv not in visited:\n            visited.add(ejjv)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacgwfub:\n        tnlv = stack.pop()\n        if tnlv not in visited:\n            visited.add(tnlv)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacmnd:\n        hhhp = stack.pop()\n        if hhhp not in visited:\n            visited.add(hhhp)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacrqw:\n        hrrr = stack.pop()\n        if hrrr not in visited:\n            visited.add(hrrr)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacqyy:\n        yvcn = stack.pop()\n        if yvcn not in visited:\n            visited.add(yvcn)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacntm:\n        hwlp = stack.pop()\n        if hwlp not in visited:\n            visited.add(hwlp)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stachia:\n        bohp = stack.pop()\n        if bohp not in visited:\n            visited.add(bohp)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stactgp:\n        tbbv = stack.pop()\n        if tbbv not in visited:\n            visited.add(tbbv)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacdpt:\n        uvsc = stack.pop()\n        if uvsc not in visited:\n            visited.add(uvsc)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacqeb:\n        lsdx = stack.pop()\n        if lsdx not in visited:\n            visited.add(lsdx)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacqib:\n        jfwc = stack.pop()\n        if jfwc not in visited:\n            visited.add(jfwc)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stachjm:\n        ivgn = stack.pop()\n        if ivgn not in visited:\n            visited.add(ivgn)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacirn:\n        ttzn = stack.pop()\n        if ttzn not in visited:\n            visited.add(ttzn)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacpun:\n        orvs = stack.pop()\n        if orvs not in visited:\n            visited.add(orvs)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacveg:\n        qwsc = stack.pop()\n        if qwsc not in visited:\n            visited.add(qwsc)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while staczrz:\n        xwey = stack.pop()\n        if xwey not in visited:\n            visited.add(xwey)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacqwk:\n        gdzy = stack.pop()\n        if gdzy not in visited:\n            visited.add(gdzy)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacxoc:\n        ehdf = stack.pop()\n        if ehdf not in visited:\n            visited.add(ehdf)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacixn:\n        faqg = stack.pop()\n        if faqg not in visited:\n            visited.add(faqg)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacpop:\n        xpyx = stack.pop()\n        if xpyx not in visited:\n            visited.add(xpyx)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacuia:\n        qebs = stack.pop()\n        if qebs not in visited:\n            visited.add(qebs)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacgob:\n        xrua = stack.pop()\n        if xrua not in visited:\n            visited.add(xrua)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacjyd:\n        ddhd = stack.pop()\n        if ddhd not in visited:\n            visited.add(ddhd)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacwwa:\n        rdim = stack.pop()\n        if rdim not in visited:\n            visited.add(rdim)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacjwa:\n        odsq = stack.pop()\n        if odsq not in visited:\n            visited.add(odsq)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stackna:\n        qdme = stack.pop()\n        if qdme not in visited:\n            visited.add(qdme)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacwpu:\n        huzu = stack.pop()\n        if huzu not in visited:\n            visited.add(huzu)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacpah:\n        pxxd = stack.pop()\n        if pxxd not in visited:\n            visited.add(pxxd)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while staccyg:\n        uldt = stack.pop()\n        if uldt not in visited:\n            visited.add(uldt)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stactohrt:\n        abmi = stack.pop()\n        if abmi not in visited:\n            visited.add(abmi)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacwhs:\n        ycvm = stack.pop()\n        if ycvm not in visited:\n            visited.add(ycvm)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stackam:\n        qavh = stack.pop()\n        if qavh not in visited:\n            visited.add(qavh)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while staczhq:\n        gulg = stack.pop()\n        if gulg not in visited:\n            visited.add(gulg)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while staclxr:\n        lnoi = stack.pop()\n        if lnoi not in visited:\n            visited.add(lnoi)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stachhe:\n        uhcg = stack.pop()\n        if uhcg not in visited:\n            visited.add(uhcg)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacasw:\n        kvjo = stack.pop()\n        if kvjo not in visited:\n            visited.add(kvjo)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacdfr:\n        wyht = stack.pop()\n        if wyht not in visited:\n            visited.add(wyht)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacsld:\n        fbvr = stack.pop()\n        if fbvr not in visited:\n            visited.add(fbvr)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacicb:\n        gxgt = stack.pop()\n        if gxgt not in visited:\n            visited.add(gxgt)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacxpu:\n        ybrh = stack.pop()\n        if ybrh not in visited:\n            visited.add(ybrh)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacksa:\n        tvyl = stack.pop()\n        if tvyl not in visited:\n            visited.add(tvyl)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while staccze:\n        vtyk = stack.pop()\n        if vtyk not in visited:\n            visited.add(vtyk)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacouf:\n        vowf = stack.pop()\n        if vowf not in visited:\n            visited.add(vowf)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacjld:\n        wxbj = stack.pop()\n        if wxbj not in visited:\n            visited.add(wxbj)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stactws:\n        rdlu = stack.pop()\n        if rdlu not in visited:\n            visited.add(rdlu)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stactyz:\n        ludm = stack.pop()\n        if ludm not in visited:\n            visited.add(ludm)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacvmm:\n        ajge = stack.pop()\n        if ajge not in visited:\n            visited.add(ajge)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacvso:\n        cpzz = stack.pop()\n        if cpzz not in visited:\n            visited.add(cpzz)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacfhn:\n        hbfs = stack.pop()\n        if hbfs not in visited:\n            visited.add(hbfs)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacrra:\n        xmov = stack.pop()\n        if xmov not in visited:\n            visited.add(xmov)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while staczms:\n        napy = stack.pop()\n        if napy not in visited:\n            visited.add(napy)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacvwr:\n        pevl = stack.pop()\n        if pevl not in visited:\n            visited.add(pevl)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacebg:\n        zpfq = stack.pop()\n        if zpfq not in visited:\n            visited.add(zpfq)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacnrj:\n        iczb = stack.pop()\n        if iczb not in visited:\n            visited.add(iczb)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacmph:\n        yrir = stack.pop()\n        if yrir not in visited:\n            visited.add(yrir)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacwre:\n        mmth = stack.pop()\n        if mmth not in visited:\n            visited.add(mmth)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while staccyh:\n        yaqg = stack.pop()\n        if yaqg not in visited:\n            visited.add(yaqg)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacuif:\n        ivov = stack.pop()\n        if ivov not in visited:\n            visited.add(ivov)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacjkf:\n        bhkl = stack.pop()\n        if bhkl not in visited:\n            visited.add(bhkl)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacsqy:\n        zyez = stack.pop()\n        if zyez not in visited:\n            visited.add(zyez)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacblj:\n        ybgw = stack.pop()\n        if ybgw not in visited:\n            visited.add(ybgw)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while staccrj:\n        kcpx = stack.pop()\n        if kcpx not in visited:\n            visited.add(kcpx)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacpko:\n        buvt = stack.pop()\n        if buvt not in visited:\n            visited.add(buvt)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while staccim:\n        bggn = stack.pop()\n        if bggn not in visited:\n            visited.add(bggn)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacidu:\n        ihkv = stack.pop()\n        if ihkv not in visited:\n            visited.add(ihkv)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacuim:\n        pjnh = stack.pop()\n        if pjnh not in visited:\n            visited.add(pjnh)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacuxv:\n        ypes = stack.pop()\n        if ypes not in visited:\n            visited.add(ypes)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while staciuo:\n        gglb = stack.pop()\n        if gglb not in visited:\n            visited.add(gglb)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while staczzf:\n        zshs = stack.pop()\n        if zshs not in visited:\n            visited.add(zshs)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacfrs:\n        uunl = stack.pop()\n        if uunl not in visited:\n            visited.add(uunl)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stactuqbk:\n        uiha = stack.pop()\n        if uiha not in visited:\n            visited.add(uiha)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacdkm:\n        kwvx = stack.pop()\n        if kwvx not in visited:\n            visited.add(kwvx)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacmpa:\n        tlwi = stack.pop()\n        if tlwi not in visited:\n            visited.add(tlwi)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacssy:\n        xohd = stack.pop()\n        if xohd not in visited:\n            visited.add(xohd)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacdjd:\n        ajwf = stack.pop()\n        if ajwf not in visited:\n            visited.add(ajwf)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacvzn:\n        pjet = stack.pop()\n        if pjet not in visited:\n            visited.add(pjet)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacbeh:\n        mcvh = stack.pop()\n        if mcvh not in visited:\n            visited.add(mcvh)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stackbv:\n        glcw = stack.pop()\n        if glcw not in visited:\n            visited.add(glcw)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacuxj:\n        yezz = stack.pop()\n        if yezz not in visited:\n            visited.add(yezz)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacdxk:\n        twjg = stack.pop()\n        if twjg not in visited:\n            visited.add(twjg)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while staciyp:\n        stsi = stack.pop()\n        if stsi not in visited:\n            visited.add(stsi)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacdaq:\n        ahez = stack.pop()\n        if ahez not in visited:\n            visited.add(ahez)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacbqn:\n        kled = stack.pop()\n        if kled not in visited:\n            visited.add(kled)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacptu:\n        sbup = stack.pop()\n        if sbup not in visited:\n            visited.add(sbup)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacptl:\n        unso = stack.pop()\n        if unso not in visited:\n            visited.add(unso)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacgki:\n        vrwu = stack.pop()\n        if vrwu not in visited:\n            visited.add(vrwu)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stactxt:\n        cyng = stack.pop()\n        if cyng not in visited:\n            visited.add(cyng)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacvbc:\n        vkdf = stack.pop()\n        if vkdf not in visited:\n            visited.add(vkdf)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacsty:\n        ovxv = stack.pop()\n        if ovxv not in visited:\n            visited.add(ovxv)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while staczoq:\n        zqml = stack.pop()\n        if zqml not in visited:\n            visited.add(zqml)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacmqf:\n        rorb = stack.pop()\n        if rorb not in visited:\n            visited.add(rorb)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacufh:\n        nhah = stack.pop()\n        if nhah not in visited:\n            visited.add(nhah)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacaih:\n        nbiw = stack.pop()\n        if nbiw not in visited:\n            visited.add(nbiw)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacznu:\n        tznp = stack.pop()\n        if tznp not in visited:\n            visited.add(tznp)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stackxj:\n        tlwq = stack.pop()\n        if tlwq not in visited:\n            visited.add(tlwq)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacuaj:\n        ykcu = stack.pop()\n        if ykcu not in visited:\n            visited.add(ykcu)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacqvv:\n        dwkl = stack.pop()\n        if dwkl not in visited:\n            visited.add(dwkl)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while staczuq:\n        dvqz = stack.pop()\n        if dvqz not in visited:\n            visited.add(dvqz)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stactun:\n        kwkt = stack.pop()\n        if kwkt not in visited:\n            visited.add(kwkt)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacmfg:\n        rcgq = stack.pop()\n        if rcgq not in visited:\n            visited.add(rcgq)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacjtq:\n        gfcf = stack.pop()\n        if gfcf not in visited:\n            visited.add(gfcf)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacgks:\n        zrnt = stack.pop()\n        if zrnt not in visited:\n            visited.add(zrnt)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacngr:\n        uabp = stack.pop()\n        if uabp not in visited:\n            visited.add(uabp)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacrxg:\n        kmdt = stack.pop()\n        if kmdt not in visited:\n            visited.add(kmdt)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stacmib:\n        amck = stack.pop()\n        if amck not in visited:\n            visited.add(amck)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited\n",
    "O": "O(V + E)",
    "\u03a9": "\u03a9(V)",
    "\u0398": "\u0398(V + E)"
  },
  {
    "code": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(pmq):\n    if pmq == 0:\n        return 1\n    return pmq * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(jld):\n    if jld == 0:\n        return 1\n    return jld * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(tdy):\n    if tdy == 0:\n        return 1\n    return tdy * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(qqw):\n    if qqw == 0:\n        return 1\n    return qqw * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(qav):\n    if qav == 0:\n        return 1\n    return qav * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(cqq):\n    if cqq == 0:\n        return 1\n    return cqq * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(gus):\n    if gus == 0:\n        return 1\n    return gus * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(yep):\n    if yep == 0:\n        return 1\n    return yep * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(pwp):\n    if pwp == 0:\n        return 1\n    return pwp * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(vjh):\n    if vjh == 0:\n        return 1\n    return vjh * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(nmi):\n    if nmi == 0:\n        return 1\n    return nmi * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(moo):\n    if moo == 0:\n        return 1\n    return moo * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(nmq):\n    if nmq == 0:\n        return 1\n    return nmq * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(oag):\n    if oag == 0:\n        return 1\n    return oag * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(snl):\n    if snl == 0:\n        return 1\n    return snl * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(jww):\n    if jww == 0:\n        return 1\n    return jww * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(ggi):\n    if ggi == 0:\n        return 1\n    return ggi * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(mil):\n    if mil == 0:\n        return 1\n    return mil * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(ibc):\n    if ibc == 0:\n        return 1\n    return ibc * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(mwd):\n    if mwd == 0:\n        return 1\n    return mwd * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(gck):\n    if gck == 0:\n        return 1\n    return gck * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(tjn):\n    if tjn == 0:\n        return 1\n    return tjn * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(ncg):\n    if ncg == 0:\n        return 1\n    return ncg * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(oxw):\n    if oxw == 0:\n        return 1\n    return oxw * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(gqr):\n    if gqr == 0:\n        return 1\n    return gqr * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(pyg):\n    if pyg == 0:\n        return 1\n    return pyg * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(luf):\n    if luf == 0:\n        return 1\n    return luf * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(ztl):\n    if ztl == 0:\n        return 1\n    return ztl * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(nig):\n    if nig == 0:\n        return 1\n    return nig * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(ifx):\n    if ifx == 0:\n        return 1\n    return ifx * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(xgd):\n    if xgd == 0:\n        return 1\n    return xgd * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(xje):\n    if xje == 0:\n        return 1\n    return xje * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(nqm):\n    if nqm == 0:\n        return 1\n    return nqm * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(kqd):\n    if kqd == 0:\n        return 1\n    return kqd * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(okl):\n    if okl == 0:\n        return 1\n    return okl * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(zyc):\n    if zyc == 0:\n        return 1\n    return zyc * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(ssb):\n    if ssb == 0:\n        return 1\n    return ssb * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(xtu):\n    if xtu == 0:\n        return 1\n    return xtu * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(fhn):\n    if fhn == 0:\n        return 1\n    return fhn * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(bnf):\n    if bnf == 0:\n        return 1\n    return bnf * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(tks):\n    if tks == 0:\n        return 1\n    return tks * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(zic):\n    if zic == 0:\n        return 1\n    return zic * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(hoe):\n    if hoe == 0:\n        return 1\n    return hoe * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(vcw):\n    if vcw == 0:\n        return 1\n    return vcw * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(fha):\n    if fha == 0:\n        return 1\n    return fha * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(emq):\n    if emq == 0:\n        return 1\n    return emq * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(ivm):\n    if ivm == 0:\n        return 1\n    return ivm * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(edp):\n    if edp == 0:\n        return 1\n    return edp * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(hoy):\n    if hoy == 0:\n        return 1\n    return hoy * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(txy):\n    if txy == 0:\n        return 1\n    return txy * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(cwf):\n    if cwf == 0:\n        return 1\n    return cwf * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(nfh):\n    if nfh == 0:\n        return 1\n    return nfh * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(wcz):\n    if wcz == 0:\n        return 1\n    return wcz * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(noj):\n    if noj == 0:\n        return 1\n    return noj * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(uia):\n    if uia == 0:\n        return 1\n    return uia * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(eis):\n    if eis == 0:\n        return 1\n    return eis * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(mjh):\n    if mjh == 0:\n        return 1\n    return mjh * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(ilf):\n    if ilf == 0:\n        return 1\n    return ilf * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(ouf):\n    if ouf == 0:\n        return 1\n    return ouf * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(erp):\n    if erp == 0:\n        return 1\n    return erp * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(npc):\n    if npc == 0:\n        return 1\n    return npc * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(mnh):\n    if mnh == 0:\n        return 1\n    return mnh * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(sne):\n    if sne == 0:\n        return 1\n    return sne * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(lrm):\n    if lrm == 0:\n        return 1\n    return lrm * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(hhf):\n    if hhf == 0:\n        return 1\n    return hhf * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(qbw):\n    if qbw == 0:\n        return 1\n    return qbw * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(qot):\n    if qot == 0:\n        return 1\n    return qot * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(nan):\n    if nan == 0:\n        return 1\n    return nan * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(ohg):\n    if ohg == 0:\n        return 1\n    return ohg * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(umm):\n    if umm == 0:\n        return 1\n    return umm * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(jlm):\n    if jlm == 0:\n        return 1\n    return jlm * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(zdo):\n    if zdo == 0:\n        return 1\n    return zdo * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(pri):\n    if pri == 0:\n        return 1\n    return pri * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(xsk):\n    if xsk == 0:\n        return 1\n    return xsk * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(dxp):\n    if dxp == 0:\n        return 1\n    return dxp * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(ipv):\n    if ipv == 0:\n        return 1\n    return ipv * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(xgm):\n    if xgm == 0:\n        return 1\n    return xgm * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(jwe):\n    if jwe == 0:\n        return 1\n    return jwe * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(sxb):\n    if sxb == 0:\n        return 1\n    return sxb * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(mkp):\n    if mkp == 0:\n        return 1\n    return mkp * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(lij):\n    if lij == 0:\n        return 1\n    return lij * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(jzg):\n    if jzg == 0:\n        return 1\n    return jzg * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(rvy):\n    if rvy == 0:\n        return 1\n    return rvy * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(lip):\n    if lip == 0:\n        return 1\n    return lip * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(rmk):\n    if rmk == 0:\n        return 1\n    return rmk * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(gww):\n    if gww == 0:\n        return 1\n    return gww * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(jec):\n    if jec == 0:\n        return 1\n    return jec * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(biy):\n    if biy == 0:\n        return 1\n    return biy * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(rzu):\n    if rzu == 0:\n        return 1\n    return rzu * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(wog):\n    if wog == 0:\n        return 1\n    return wog * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(vdp):\n    if vdp == 0:\n        return 1\n    return vdp * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(oih):\n    if oih == 0:\n        return 1\n    return oih * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(uxs):\n    if uxs == 0:\n        return 1\n    return uxs * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(kes):\n    if kes == 0:\n        return 1\n    return kes * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(mns):\n    if mns == 0:\n        return 1\n    return mns * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(wsc):\n    if wsc == 0:\n        return 1\n    return wsc * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(zmm):\n    if zmm == 0:\n        return 1\n    return zmm * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(eap):\n    if eap == 0:\n        return 1\n    return eap * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(nei):\n    if nei == 0:\n        return 1\n    return nei * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(dvw):\n    if dvw == 0:\n        return 1\n    return dvw * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(pxf):\n    if pxf == 0:\n        return 1\n    return pxf * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(fya):\n    if fya == 0:\n        return 1\n    return fya * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(qtb):\n    if qtb == 0:\n        return 1\n    return qtb * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(cau):\n    if cau == 0:\n        return 1\n    return cau * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(ncu):\n    if ncu == 0:\n        return 1\n    return ncu * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(ipa):\n    if ipa == 0:\n        return 1\n    return ipa * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(oqa):\n    if oqa == 0:\n        return 1\n    return oqa * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(cil):\n    if cil == 0:\n        return 1\n    return cil * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(jad):\n    if jad == 0:\n        return 1\n    return jad * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(qww):\n    if qww == 0:\n        return 1\n    return qww * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(tgx):\n    if tgx == 0:\n        return 1\n    return tgx * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(sqe):\n    if sqe == 0:\n        return 1\n    return sqe * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(qqn):\n    if qqn == 0:\n        return 1\n    return qqn * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(ref):\n    if ref == 0:\n        return 1\n    return ref * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(vij):\n    if vij == 0:\n        return 1\n    return vij * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(rrw):\n    if rrw == 0:\n        return 1\n    return rrw * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(fvi):\n    if fvi == 0:\n        return 1\n    return fvi * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(wlw):\n    if wlw == 0:\n        return 1\n    return wlw * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(mvp):\n    if mvp == 0:\n        return 1\n    return mvp * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(etj):\n    if etj == 0:\n        return 1\n    return etj * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(myx):\n    if myx == 0:\n        return 1\n    return myx * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(fjy):\n    if fjy == 0:\n        return 1\n    return fjy * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(ymy):\n    if ymy == 0:\n        return 1\n    return ymy * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(bqy):\n    if bqy == 0:\n        return 1\n    return bqy * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(daj):\n    if daj == 0:\n        return 1\n    return daj * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(nfe):\n    if nfe == 0:\n        return 1\n    return nfe * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(anh):\n    if anh == 0:\n        return 1\n    return anh * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(ngr):\n    if ngr == 0:\n        return 1\n    return ngr * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(oyh):\n    if oyh == 0:\n        return 1\n    return oyh * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(kzg):\n    if kzg == 0:\n        return 1\n    return kzg * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(tmp):\n    if tmp == 0:\n        return 1\n    return tmp * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def factorial(ome):\n    if ome == 0:\n        return 1\n    return ome * factorial(n - 1)\n",
    "O": "O(n)",
    "\u03a9": "\u03a9(n)",
    "\u0398": "\u0398(n)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    n = len(A)\n    result = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    qbp = len(A)\n    result = [[0] * qbp for _ in range(qbp)]\n    for mni in range(qbp):\n        for uzb in range(qbp):\n            for rpp in range(qbp):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    usb = len(A)\n    result = [[0] * usb for _ in range(usb)]\n    for vtk in range(usb):\n        for chs in range(usb):\n            for cgc in range(usb):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    fzi = len(A)\n    result = [[0] * fzi for _ in range(fzi)]\n    for eij in range(fzi):\n        for lbv in range(fzi):\n            for rrr in range(fzi):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    dag = len(A)\n    result = [[0] * dag for _ in range(dag)]\n    for nxs in range(dag):\n        for pxr in range(dag):\n            for sdq in range(dag):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    dhk = len(A)\n    result = [[0] * dhk for _ in range(dhk)]\n    for ded in range(dhk):\n        for hcz in range(dhk):\n            for yit in range(dhk):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    dqo = len(A)\n    result = [[0] * dqo for _ in range(dqo)]\n    for kpl in range(dqo):\n        for aek in range(dqo):\n            for pcu in range(dqo):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    lgs = len(A)\n    result = [[0] * lgs for _ in range(lgs)]\n    for wwa in range(lgs):\n        for sqo in range(lgs):\n            for dnr in range(lgs):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    psl = len(A)\n    result = [[0] * psl for _ in range(psl)]\n    for jkr in range(psl):\n        for dyt in range(psl):\n            for imu in range(psl):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    ajq = len(A)\n    result = [[0] * ajq for _ in range(ajq)]\n    for gxl in range(ajq):\n        for mab in range(ajq):\n            for bxs in range(ajq):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    txw = len(A)\n    result = [[0] * txw for _ in range(txw)]\n    for pjv in range(txw):\n        for jzo in range(txw):\n            for hhs in range(txw):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    odk = len(A)\n    result = [[0] * odk for _ in range(odk)]\n    for nxx in range(odk):\n        for rmn in range(odk):\n            for ccd in range(odk):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    gxz = len(A)\n    result = [[0] * gxz for _ in range(gxz)]\n    for ljq in range(gxz):\n        for gwb in range(gxz):\n            for gda in range(gxz):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    srv = len(A)\n    result = [[0] * srv for _ in range(srv)]\n    for afj in range(srv):\n        for mbx in range(srv):\n            for qff in range(srv):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    bfy = len(A)\n    result = [[0] * bfy for _ in range(bfy)]\n    for ill in range(bfy):\n        for yqy in range(bfy):\n            for gvf in range(bfy):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    yre = len(A)\n    result = [[0] * yre for _ in range(yre)]\n    for igj in range(yre):\n        for flq in range(yre):\n            for mlw in range(yre):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    lyi = len(A)\n    result = [[0] * lyi for _ in range(lyi)]\n    for sec in range(lyi):\n        for vyw in range(lyi):\n            for dcn in range(lyi):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    lbl = len(A)\n    result = [[0] * lbl for _ in range(lbl)]\n    for evj in range(lbl):\n        for zld in range(lbl):\n            for eri in range(lbl):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    nzl = len(A)\n    result = [[0] * nzl for _ in range(nzl)]\n    for uzs in range(nzl):\n        for tkl in range(nzl):\n            for xur in range(nzl):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    cqm = len(A)\n    result = [[0] * cqm for _ in range(cqm)]\n    for kxq in range(cqm):\n        for ubo in range(cqm):\n            for hwm in range(cqm):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    kdr = len(A)\n    result = [[0] * kdr for _ in range(kdr)]\n    for kmg in range(kdr):\n        for hfs in range(kdr):\n            for dyc in range(kdr):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    noa = len(A)\n    result = [[0] * noa for _ in range(noa)]\n    for nrr in range(noa):\n        for znz in range(noa):\n            for ami in range(noa):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    mba = len(A)\n    result = [[0] * mba for _ in range(mba)]\n    for xol in range(mba):\n        for hju in range(mba):\n            for cun in range(mba):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    tgj = len(A)\n    result = [[0] * tgj for _ in range(tgj)]\n    for akt in range(tgj):\n        for mpd in range(tgj):\n            for rro in range(tgj):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    rwn = len(A)\n    result = [[0] * rwn for _ in range(rwn)]\n    for ibr in range(rwn):\n        for cyi in range(rwn):\n            for dqh in range(rwn):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    wjx = len(A)\n    result = [[0] * wjx for _ in range(wjx)]\n    for qgp in range(wjx):\n        for zkz in range(wjx):\n            for spc in range(wjx):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    cwm = len(A)\n    result = [[0] * cwm for _ in range(cwm)]\n    for zut in range(cwm):\n        for umr in range(cwm):\n            for zuy in range(cwm):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    quk = len(A)\n    result = [[0] * quk for _ in range(quk)]\n    for ihc in range(quk):\n        for wwv in range(quk):\n            for ysx in range(quk):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    kyg = len(A)\n    result = [[0] * kyg for _ in range(kyg)]\n    for pzw in range(kyg):\n        for goe in range(kyg):\n            for dor in range(kyg):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    vbp = len(A)\n    result = [[0] * vbp for _ in range(vbp)]\n    for rwq in range(vbp):\n        for pgs in range(vbp):\n            for swh in range(vbp):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    ieu = len(A)\n    result = [[0] * ieu for _ in range(ieu)]\n    for iia in range(ieu):\n        for jlh in range(ieu):\n            for isx in range(ieu):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    wqp = len(A)\n    result = [[0] * wqp for _ in range(wqp)]\n    for rlx in range(wqp):\n        for aup in range(wqp):\n            for zry in range(wqp):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    sls = len(A)\n    result = [[0] * sls for _ in range(sls)]\n    for pkk in range(sls):\n        for icf in range(sls):\n            for sxp in range(sls):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    bhd = len(A)\n    result = [[0] * bhd for _ in range(bhd)]\n    for eyu in range(bhd):\n        for cst in range(bhd):\n            for xzq in range(bhd):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    jax = len(A)\n    result = [[0] * jax for _ in range(jax)]\n    for lyj in range(jax):\n        for nea in range(jax):\n            for lku in range(jax):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    thn = len(A)\n    result = [[0] * thn for _ in range(thn)]\n    for lfb in range(thn):\n        for nks in range(thn):\n            for rhh in range(thn):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    lah = len(A)\n    result = [[0] * lah for _ in range(lah)]\n    for sph in range(lah):\n        for evk in range(lah):\n            for xzk in range(lah):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    tpa = len(A)\n    result = [[0] * tpa for _ in range(tpa)]\n    for lnm in range(tpa):\n        for ksi in range(tpa):\n            for yub in range(tpa):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    qxx = len(A)\n    result = [[0] * qxx for _ in range(qxx)]\n    for eiv in range(qxx):\n        for lxe in range(qxx):\n            for hzp in range(qxx):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    pqe = len(A)\n    result = [[0] * pqe for _ in range(pqe)]\n    for nsy in range(pqe):\n        for hbj in range(pqe):\n            for nco in range(pqe):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    nme = len(A)\n    result = [[0] * nme for _ in range(nme)]\n    for ham in range(nme):\n        for zcx in range(nme):\n            for zmi in range(nme):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    dsg = len(A)\n    result = [[0] * dsg for _ in range(dsg)]\n    for xbv in range(dsg):\n        for ecd in range(dsg):\n            for kro in range(dsg):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    nsw = len(A)\n    result = [[0] * nsw for _ in range(nsw)]\n    for xad in range(nsw):\n        for urh in range(nsw):\n            for swd in range(nsw):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    ovm = len(A)\n    result = [[0] * ovm for _ in range(ovm)]\n    for vyt in range(ovm):\n        for myd in range(ovm):\n            for shp in range(ovm):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    ztt = len(A)\n    result = [[0] * ztt for _ in range(ztt)]\n    for bxa in range(ztt):\n        for shv in range(ztt):\n            for gak in range(ztt):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    dyh = len(A)\n    result = [[0] * dyh for _ in range(dyh)]\n    for nwt in range(dyh):\n        for sxg in range(dyh):\n            for lud in range(dyh):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    ntm = len(A)\n    result = [[0] * ntm for _ in range(ntm)]\n    for owo in range(ntm):\n        for aao in range(ntm):\n            for afn in range(ntm):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    teu = len(A)\n    result = [[0] * teu for _ in range(teu)]\n    for azf in range(teu):\n        for fqu in range(teu):\n            for nnu in range(teu):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    wcm = len(A)\n    result = [[0] * wcm for _ in range(wcm)]\n    for tmv in range(wcm):\n        for zwy in range(wcm):\n            for jea in range(wcm):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    tks = len(A)\n    result = [[0] * tks for _ in range(tks)]\n    for esd in range(tks):\n        for yse in range(tks):\n            for rym in range(tks):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    jmi = len(A)\n    result = [[0] * jmi for _ in range(jmi)]\n    for vss in range(jmi):\n        for uvv in range(jmi):\n            for eyu in range(jmi):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    fqk = len(A)\n    result = [[0] * fqk for _ in range(fqk)]\n    for jiu in range(fqk):\n        for xbx in range(fqk):\n            for nxz in range(fqk):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    uir = len(A)\n    result = [[0] * uir for _ in range(uir)]\n    for vua in range(uir):\n        for rmx in range(uir):\n            for gka in range(uir):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    jgm = len(A)\n    result = [[0] * jgm for _ in range(jgm)]\n    for mgd in range(jgm):\n        for yvy in range(jgm):\n            for ubu in range(jgm):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    rmp = len(A)\n    result = [[0] * rmp for _ in range(rmp)]\n    for nuv in range(rmp):\n        for fuz in range(rmp):\n            for ssh in range(rmp):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    vjy = len(A)\n    result = [[0] * vjy for _ in range(vjy)]\n    for ylb in range(vjy):\n        for abv in range(vjy):\n            for xwa in range(vjy):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    ccu = len(A)\n    result = [[0] * ccu for _ in range(ccu)]\n    for oso in range(ccu):\n        for zle in range(ccu):\n            for odg in range(ccu):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    zzf = len(A)\n    result = [[0] * zzf for _ in range(zzf)]\n    for ide in range(zzf):\n        for bzo in range(zzf):\n            for rql in range(zzf):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    bwe = len(A)\n    result = [[0] * bwe for _ in range(bwe)]\n    for ihq in range(bwe):\n        for cyb in range(bwe):\n            for cit in range(bwe):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    pll = len(A)\n    result = [[0] * pll for _ in range(pll)]\n    for qjb in range(pll):\n        for xop in range(pll):\n            for lho in range(pll):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    fcs = len(A)\n    result = [[0] * fcs for _ in range(fcs)]\n    for ses in range(fcs):\n        for lrk in range(fcs):\n            for hkz in range(fcs):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    tyo = len(A)\n    result = [[0] * tyo for _ in range(tyo)]\n    for kte in range(tyo):\n        for fvq in range(tyo):\n            for wjw in range(tyo):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    qir = len(A)\n    result = [[0] * qir for _ in range(qir)]\n    for pnq in range(qir):\n        for alf in range(qir):\n            for gca in range(qir):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    agf = len(A)\n    result = [[0] * agf for _ in range(agf)]\n    for znt in range(agf):\n        for mpq in range(agf):\n            for ung in range(agf):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    hlf = len(A)\n    result = [[0] * hlf for _ in range(hlf)]\n    for jec in range(hlf):\n        for xrv in range(hlf):\n            for oyw in range(hlf):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    mkx = len(A)\n    result = [[0] * mkx for _ in range(mkx)]\n    for tph in range(mkx):\n        for lxp in range(mkx):\n            for inj in range(mkx):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    pge = len(A)\n    result = [[0] * pge for _ in range(pge)]\n    for lkx in range(pge):\n        for bgr in range(pge):\n            for sme in range(pge):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    kwj = len(A)\n    result = [[0] * kwj for _ in range(kwj)]\n    for qdl in range(kwj):\n        for hvq in range(kwj):\n            for mgd in range(kwj):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    hdg = len(A)\n    result = [[0] * hdg for _ in range(hdg)]\n    for zlh in range(hdg):\n        for kwv in range(hdg):\n            for yih in range(hdg):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    jqn = len(A)\n    result = [[0] * jqn for _ in range(jqn)]\n    for orb in range(jqn):\n        for pbu in range(jqn):\n            for abj in range(jqn):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    fst = len(A)\n    result = [[0] * fst for _ in range(fst)]\n    for sae in range(fst):\n        for lrm in range(fst):\n            for bbd in range(fst):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    hit = len(A)\n    result = [[0] * hit for _ in range(hit)]\n    for qay in range(hit):\n        for sij in range(hit):\n            for nfp in range(hit):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    lwp = len(A)\n    result = [[0] * lwp for _ in range(lwp)]\n    for wha in range(lwp):\n        for gdd in range(lwp):\n            for era in range(lwp):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    oen = len(A)\n    result = [[0] * oen for _ in range(oen)]\n    for hej in range(oen):\n        for alo in range(oen):\n            for nfp in range(oen):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    tpn = len(A)\n    result = [[0] * tpn for _ in range(tpn)]\n    for feq in range(tpn):\n        for ute in range(tpn):\n            for qty in range(tpn):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    ego = len(A)\n    result = [[0] * ego for _ in range(ego)]\n    for aio in range(ego):\n        for wgs in range(ego):\n            for frz in range(ego):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    twj = len(A)\n    result = [[0] * twj for _ in range(twj)]\n    for lce in range(twj):\n        for xwb in range(twj):\n            for ygh in range(twj):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    rtx = len(A)\n    result = [[0] * rtx for _ in range(rtx)]\n    for vbq in range(rtx):\n        for huw in range(rtx):\n            for hom in range(rtx):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    dtn = len(A)\n    result = [[0] * dtn for _ in range(dtn)]\n    for yyv in range(dtn):\n        for hmc in range(dtn):\n            for oud in range(dtn):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    wkm = len(A)\n    result = [[0] * wkm for _ in range(wkm)]\n    for knd in range(wkm):\n        for eln in range(wkm):\n            for zsa in range(wkm):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    fpx = len(A)\n    result = [[0] * fpx for _ in range(fpx)]\n    for hvy in range(fpx):\n        for uas in range(fpx):\n            for hei in range(fpx):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    dyz = len(A)\n    result = [[0] * dyz for _ in range(dyz)]\n    for pwi in range(dyz):\n        for wzj in range(dyz):\n            for mmb in range(dyz):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    ehq = len(A)\n    result = [[0] * ehq for _ in range(ehq)]\n    for eue in range(ehq):\n        for dqh in range(ehq):\n            for wvc in range(ehq):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    jwz = len(A)\n    result = [[0] * jwz for _ in range(jwz)]\n    for nov in range(jwz):\n        for jca in range(jwz):\n            for erc in range(jwz):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    anc = len(A)\n    result = [[0] * anc for _ in range(anc)]\n    for vlq in range(anc):\n        for huw in range(anc):\n            for gps in range(anc):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    ywr = len(A)\n    result = [[0] * ywr for _ in range(ywr)]\n    for sgj in range(ywr):\n        for oij in range(ywr):\n            for lpf in range(ywr):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    gzx = len(A)\n    result = [[0] * gzx for _ in range(gzx)]\n    for gee in range(gzx):\n        for ipk in range(gzx):\n            for rvf in range(gzx):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    den = len(A)\n    result = [[0] * den for _ in range(den)]\n    for cah in range(den):\n        for biz in range(den):\n            for eud in range(den):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    pgx = len(A)\n    result = [[0] * pgx for _ in range(pgx)]\n    for txm in range(pgx):\n        for fhm in range(pgx):\n            for rbx in range(pgx):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    ilk = len(A)\n    result = [[0] * ilk for _ in range(ilk)]\n    for ogf in range(ilk):\n        for wpn in range(ilk):\n            for bxo in range(ilk):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    djp = len(A)\n    result = [[0] * djp for _ in range(djp)]\n    for sil in range(djp):\n        for kqq in range(djp):\n            for msq in range(djp):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    bga = len(A)\n    result = [[0] * bga for _ in range(bga)]\n    for dlb in range(bga):\n        for zbf in range(bga):\n            for aax in range(bga):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    pvp = len(A)\n    result = [[0] * pvp for _ in range(pvp)]\n    for qid in range(pvp):\n        for mac in range(pvp):\n            for tlf in range(pvp):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    chr = len(A)\n    result = [[0] * chr for _ in range(chr)]\n    for iqy in range(chr):\n        for orq in range(chr):\n            for qpy in range(chr):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    zxs = len(A)\n    result = [[0] * zxs for _ in range(zxs)]\n    for njh in range(zxs):\n        for nib in range(zxs):\n            for snd in range(zxs):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    prx = len(A)\n    result = [[0] * prx for _ in range(prx)]\n    for iqi in range(prx):\n        for dhd in range(prx):\n            for mik in range(prx):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    hto = len(A)\n    result = [[0] * hto for _ in range(hto)]\n    for vwe in range(hto):\n        for wzh in range(hto):\n            for prs in range(hto):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    hcx = len(A)\n    result = [[0] * hcx for _ in range(hcx)]\n    for frx in range(hcx):\n        for fhf in range(hcx):\n            for ftw in range(hcx):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    dqj = len(A)\n    result = [[0] * dqj for _ in range(dqj)]\n    for dmj in range(dqj):\n        for thf in range(dqj):\n            for urz in range(dqj):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    jno = len(A)\n    result = [[0] * jno for _ in range(jno)]\n    for ldf in range(jno):\n        for ald in range(jno):\n            for zaq in range(jno):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    ddg = len(A)\n    result = [[0] * ddg for _ in range(ddg)]\n    for jmp in range(ddg):\n        for vnf in range(ddg):\n            for rwm in range(ddg):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    muy = len(A)\n    result = [[0] * muy for _ in range(muy)]\n    for emd in range(muy):\n        for dpz in range(muy):\n            for iij in range(muy):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    qde = len(A)\n    result = [[0] * qde for _ in range(qde)]\n    for tqq in range(qde):\n        for rim in range(qde):\n            for cou in range(qde):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    dni = len(A)\n    result = [[0] * dni for _ in range(dni)]\n    for wco in range(dni):\n        for ndi in range(dni):\n            for ayx in range(dni):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    crd = len(A)\n    result = [[0] * crd for _ in range(crd)]\n    for zgb in range(crd):\n        for isk in range(crd):\n            for pqr in range(crd):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    nku = len(A)\n    result = [[0] * nku for _ in range(nku)]\n    for yfk in range(nku):\n        for ydk in range(nku):\n            for pnt in range(nku):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    uyh = len(A)\n    result = [[0] * uyh for _ in range(uyh)]\n    for roh in range(uyh):\n        for xts in range(uyh):\n            for vaw in range(uyh):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    fsb = len(A)\n    result = [[0] * fsb for _ in range(fsb)]\n    for ofx in range(fsb):\n        for vjp in range(fsb):\n            for tco in range(fsb):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    hby = len(A)\n    result = [[0] * hby for _ in range(hby)]\n    for hxm in range(hby):\n        for dce in range(hby):\n            for seu in range(hby):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    tvy = len(A)\n    result = [[0] * tvy for _ in range(tvy)]\n    for syx in range(tvy):\n        for znp in range(tvy):\n            for yqk in range(tvy):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    uni = len(A)\n    result = [[0] * uni for _ in range(uni)]\n    for dck in range(uni):\n        for unm in range(uni):\n            for rve in range(uni):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    hjf = len(A)\n    result = [[0] * hjf for _ in range(hjf)]\n    for cbg in range(hjf):\n        for ret in range(hjf):\n            for drh in range(hjf):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    bgq = len(A)\n    result = [[0] * bgq for _ in range(bgq)]\n    for bdw in range(bgq):\n        for xvu in range(bgq):\n            for afl in range(bgq):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    zqj = len(A)\n    result = [[0] * zqj for _ in range(zqj)]\n    for eeq in range(zqj):\n        for qek in range(zqj):\n            for chy in range(zqj):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    pil = len(A)\n    result = [[0] * pil for _ in range(pil)]\n    for sxv in range(pil):\n        for puz in range(pil):\n            for cer in range(pil):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    kmy = len(A)\n    result = [[0] * kmy for _ in range(kmy)]\n    for mro in range(kmy):\n        for jve in range(kmy):\n            for xgz in range(kmy):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    cat = len(A)\n    result = [[0] * cat for _ in range(cat)]\n    for kkd in range(cat):\n        for qno in range(cat):\n            for uiw in range(cat):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    tcu = len(A)\n    result = [[0] * tcu for _ in range(tcu)]\n    for nww in range(tcu):\n        for gus in range(tcu):\n            for yst in range(tcu):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    haf = len(A)\n    result = [[0] * haf for _ in range(haf)]\n    for jxj in range(haf):\n        for wek in range(haf):\n            for udw in range(haf):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    nfc = len(A)\n    result = [[0] * nfc for _ in range(nfc)]\n    for dsp in range(nfc):\n        for wcz in range(nfc):\n            for luk in range(nfc):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    wgf = len(A)\n    result = [[0] * wgf for _ in range(wgf)]\n    for zls in range(wgf):\n        for kyt in range(wgf):\n            for hky in range(wgf):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    wke = len(A)\n    result = [[0] * wke for _ in range(wke)]\n    for dww in range(wke):\n        for umq in range(wke):\n            for afi in range(wke):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    zpe = len(A)\n    result = [[0] * zpe for _ in range(zpe)]\n    for kca in range(zpe):\n        for nhw in range(zpe):\n            for xfy in range(zpe):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    mjb = len(A)\n    result = [[0] * mjb for _ in range(mjb)]\n    for ksf in range(mjb):\n        for kdx in range(mjb):\n            for wwi in range(mjb):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    cwu = len(A)\n    result = [[0] * cwu for _ in range(cwu)]\n    for nap in range(cwu):\n        for axf in range(cwu):\n            for uzd in range(cwu):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    svb = len(A)\n    result = [[0] * svb for _ in range(svb)]\n    for aoy in range(svb):\n        for ygy in range(svb):\n            for qge in range(svb):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    hof = len(A)\n    result = [[0] * hof for _ in range(hof)]\n    for hwb in range(hof):\n        for dqu in range(hof):\n            for uzi in range(hof):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    gbh = len(A)\n    result = [[0] * gbh for _ in range(gbh)]\n    for abc in range(gbh):\n        for frc in range(gbh):\n            for xdd in range(gbh):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    ryw = len(A)\n    result = [[0] * ryw for _ in range(ryw)]\n    for gen in range(ryw):\n        for ozv in range(ryw):\n            for ruk in range(ryw):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    oox = len(A)\n    result = [[0] * oox for _ in range(oox)]\n    for jmj in range(oox):\n        for xzn in range(oox):\n            for fqr in range(oox):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    uwk = len(A)\n    result = [[0] * uwk for _ in range(uwk)]\n    for qhz in range(uwk):\n        for sfa in range(uwk):\n            for bxa in range(uwk):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    uvw = len(A)\n    result = [[0] * uvw for _ in range(uvw)]\n    for soe in range(uvw):\n        for lkw in range(uvw):\n            for yjm in range(uvw):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    nch = len(A)\n    result = [[0] * nch for _ in range(nch)]\n    for xwf in range(nch):\n        for sne in range(nch):\n            for bqe in range(nch):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def matrix_multiply(A, B):\n    hhs = len(A)\n    result = [[0] * hhs for _ in range(hhs)]\n    for wcf in range(hhs):\n        for iwz in range(hhs):\n            for ntb in range(hhs):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n",
    "O": "O(n^3)",
    "\u03a9": "\u03a9(n^3)",
    "\u0398": "\u0398(n^3)"
  },
  {
    "code": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(rva):\n    if rva <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(fci):\n    if fci <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(kpn):\n    if kpn <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(hzv):\n    if hzv <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(ish):\n    if ish <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(bym):\n    if bym <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(pwu):\n    if pwu <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(awd):\n    if awd <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(vkg):\n    if vkg <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(khv):\n    if khv <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(mxb):\n    if mxb <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(xwo):\n    if xwo <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(ggp):\n    if ggp <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(vvr):\n    if vvr <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(grq):\n    if grq <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(vsf):\n    if vsf <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(imo):\n    if imo <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(aaz):\n    if aaz <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(zti):\n    if zti <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(jti):\n    if jti <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(ksq):\n    if ksq <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(cxx):\n    if cxx <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(wxp):\n    if wxp <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(ujx):\n    if ujx <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(cop):\n    if cop <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(sjm):\n    if sjm <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(vss):\n    if vss <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(kqy):\n    if kqy <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(lwx):\n    if lwx <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(zma):\n    if zma <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(psf):\n    if psf <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(ukr):\n    if ukr <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(xxc):\n    if xxc <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(pcy):\n    if pcy <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(pca):\n    if pca <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(wou):\n    if wou <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(oih):\n    if oih <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(dpf):\n    if dpf <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(aor):\n    if aor <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(ywa):\n    if ywa <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(fgu):\n    if fgu <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(yxs):\n    if yxs <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(omk):\n    if omk <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(kir):\n    if kir <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(cdy):\n    if cdy <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(iml):\n    if iml <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(igo):\n    if igo <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(ftq):\n    if ftq <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(oau):\n    if oau <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(jrh):\n    if jrh <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(oeo):\n    if oeo <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(kup):\n    if kup <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(joj):\n    if joj <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(dbh):\n    if dbh <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(ylb):\n    if ylb <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(gys):\n    if gys <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(qnb):\n    if qnb <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(zws):\n    if zws <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(bli):\n    if bli <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(fms):\n    if fms <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(uea):\n    if uea <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(zrw):\n    if zrw <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(sej):\n    if sej <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(jgx):\n    if jgx <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(rgw):\n    if rgw <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(vaz):\n    if vaz <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(gkz):\n    if gkz <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(muu):\n    if muu <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(pho):\n    if pho <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(xyb):\n    if xyb <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(ouj):\n    if ouj <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(ize):\n    if ize <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(rju):\n    if rju <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(xkl):\n    if xkl <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(zbu):\n    if zbu <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(kir):\n    if kir <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(lnq):\n    if lnq <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(ehg):\n    if ehg <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(irq):\n    if irq <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(cpj):\n    if cpj <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(ber):\n    if ber <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(qjt):\n    if qjt <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(lds):\n    if lds <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(hod):\n    if hod <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(wvj):\n    if wvj <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(fnq):\n    if fnq <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(cmd):\n    if cmd <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(eoi):\n    if eoi <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(vwr):\n    if vwr <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(pgq):\n    if pgq <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(rsb):\n    if rsb <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(zia):\n    if zia <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(hbs):\n    if hbs <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(rjt):\n    if rjt <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(pym):\n    if pym <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(zhf):\n    if zhf <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(tfh):\n    if tfh <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(sks):\n    if sks <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(hya):\n    if hya <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(fej):\n    if fej <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(ipo):\n    if ipo <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(nqs):\n    if nqs <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(xyk):\n    if xyk <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(zun):\n    if zun <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(zuh):\n    if zuh <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(qrj):\n    if qrj <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(ecc):\n    if ecc <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(qkj):\n    if qkj <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(xgz):\n    if xgz <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(eju):\n    if eju <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(ptw):\n    if ptw <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(mcv):\n    if mcv <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(uoz):\n    if uoz <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(bes):\n    if bes <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(sia):\n    if sia <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(aky):\n    if aky <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(jxe):\n    if jxe <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(ixo):\n    if ixo <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(det):\n    if det <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(pim):\n    if pim <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(bwk):\n    if bwk <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(wee):\n    if wee <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(xpo):\n    if xpo <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(jbg):\n    if jbg <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(pnr):\n    if pnr <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(bpb):\n    if bpb <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(uua):\n    if uua <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(quu):\n    if quu <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(mrd):\n    if mrd <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(oqu):\n    if oqu <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(djw):\n    if djw <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(egy):\n    if egy <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def fibonacci(feh):\n    if feh <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n",
    "O": "O(2^n)",
    "\u03a9": "\u03a9(2^n)",
    "\u0398": "\u0398(2^n)"
  },
  {
    "code": "def combination(n, k):\n    if k == 0 or k == n:\n        return 1\n    return combination(n - 1, k - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if cmz == 0 or cmz == dqu:\n        return 1\n    return combination(n - 1, cmz - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if uxo == 0 or uxo == jsv:\n        return 1\n    return combination(n - 1, uxo - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if aym == 0 or aym == apy:\n        return 1\n    return combination(n - 1, aym - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if nhz == 0 or nhz == oqv:\n        return 1\n    return combination(n - 1, nhz - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if noc == 0 or noc == bfs:\n        return 1\n    return combination(n - 1, noc - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if lrh == 0 or lrh == qpi:\n        return 1\n    return combination(n - 1, lrh - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if gkv == 0 or gkv == mln:\n        return 1\n    return combination(n - 1, gkv - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if wyb == 0 or wyb == bjp:\n        return 1\n    return combination(n - 1, wyb - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if bho == 0 or bho == ivd:\n        return 1\n    return combination(n - 1, bho - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if jgt == 0 or jgt == gub:\n        return 1\n    return combination(n - 1, jgt - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if kmp == 0 or kmp == vqz:\n        return 1\n    return combination(n - 1, kmp - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if rai == 0 or rai == wft:\n        return 1\n    return combination(n - 1, rai - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if ozz == 0 or ozz == uoo:\n        return 1\n    return combination(n - 1, ozz - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if shh == 0 or shh == drq:\n        return 1\n    return combination(n - 1, shh - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if ter == 0 or ter == pru:\n        return 1\n    return combination(n - 1, ter - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if emx == 0 or emx == wsh:\n        return 1\n    return combination(n - 1, emx - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if xtk == 0 or xtk == fbp:\n        return 1\n    return combination(n - 1, xtk - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if ryc == 0 or ryc == zzb:\n        return 1\n    return combination(n - 1, ryc - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if sgx == 0 or sgx == ltq:\n        return 1\n    return combination(n - 1, sgx - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if gwh == 0 or gwh == qms:\n        return 1\n    return combination(n - 1, gwh - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if qoj == 0 or qoj == vfi:\n        return 1\n    return combination(n - 1, qoj - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if zpc == 0 or zpc == zot:\n        return 1\n    return combination(n - 1, zpc - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if avo == 0 or avo == hzt:\n        return 1\n    return combination(n - 1, avo - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if jgp == 0 or jgp == lem:\n        return 1\n    return combination(n - 1, jgp - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if qxo == 0 or qxo == wbd:\n        return 1\n    return combination(n - 1, qxo - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if mva == 0 or mva == ron:\n        return 1\n    return combination(n - 1, mva - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if sfr == 0 or sfr == vesfr:\n        return 1\n    return combination(n - 1, sfr - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if bth == 0 or bth == nol:\n        return 1\n    return combination(n - 1, bth - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if rey == 0 or rey == jxa:\n        return 1\n    return combination(n - 1, rey - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if kez == 0 or kez == vxy:\n        return 1\n    return combination(n - 1, kez - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if vxb == 0 or vxb == bma:\n        return 1\n    return combination(n - 1, vxb - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if tnn == 0 or tnn == nzp:\n        return 1\n    return combination(n - 1, tnn - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if ndp == 0 or ndp == trt:\n        return 1\n    return combination(n - 1, ndp - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if fnz == 0 or fnz == fpa:\n        return 1\n    return combination(n - 1, fnz - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if eba == 0 or eba == gdc:\n        return 1\n    return combination(n - 1, eba - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if lje == 0 or lje == ffj:\n        return 1\n    return combination(n - 1, lje - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if qdr == 0 or qdr == ils:\n        return 1\n    return combination(n - 1, qdr - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if seq == 0 or seq == oud:\n        return 1\n    return combination(n - 1, seq - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if taa == 0 or taa == bsf:\n        return 1\n    return combination(n - 1, taa - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if ein == 0 or ein == gvj:\n        return 1\n    return combination(n - 1, ein - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if myp == 0 or myp == ksg:\n        return 1\n    return combination(n - 1, myp - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if ptj == 0 or ptj == fij:\n        return 1\n    return combination(n - 1, ptj - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if elq == 0 or elq == cwg:\n        return 1\n    return combination(n - 1, elq - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if wiw == 0 or wiw == agr:\n        return 1\n    return combination(n - 1, wiw - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if gjx == 0 or gjx == qcn:\n        return 1\n    return combination(n - 1, gjx - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if sdb == 0 or sdb == vtu:\n        return 1\n    return combination(n - 1, sdb - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if hsp == 0 or hsp == aff:\n        return 1\n    return combination(n - 1, hsp - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if wit == 0 or wit == wwwzf:\n        return 1\n    return combination(n - 1, wit - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if fie == 0 or fie == apa:\n        return 1\n    return combination(n - 1, fie - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if ubi == 0 or ubi == vpsdo:\n        return 1\n    return combination(n - 1, ubi - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if bkv == 0 or bkv == ssd:\n        return 1\n    return combination(n - 1, bkv - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if vdd == 0 or vdd == eym:\n        return 1\n    return combination(n - 1, vdd - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if krb == 0 or krb == erd:\n        return 1\n    return combination(n - 1, krb - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if kba == 0 or kba == cho:\n        return 1\n    return combination(n - 1, kba - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if tlh == 0 or tlh == skn:\n        return 1\n    return combination(n - 1, tlh - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if ixc == 0 or ixc == uud:\n        return 1\n    return combination(n - 1, ixc - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if vak == 0 or vak == shd:\n        return 1\n    return combination(n - 1, vak - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if iqb == 0 or iqb == zuc:\n        return 1\n    return combination(n - 1, iqb - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if dpy == 0 or dpy == xus:\n        return 1\n    return combination(n - 1, dpy - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if fvv == 0 or fvv == rub:\n        return 1\n    return combination(n - 1, fvv - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if nax == 0 or nax == jib:\n        return 1\n    return combination(n - 1, nax - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if ztc == 0 or ztc == cfc:\n        return 1\n    return combination(n - 1, ztc - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if sod == 0 or sod == gwy:\n        return 1\n    return combination(n - 1, sod - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if haj == 0 or haj == euw:\n        return 1\n    return combination(n - 1, haj - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if dzr == 0 or dzr == jgf:\n        return 1\n    return combination(n - 1, dzr - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if pum == 0 or pum == bth:\n        return 1\n    return combination(n - 1, pum - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if znm == 0 or znm == upw:\n        return 1\n    return combination(n - 1, znm - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if idx == 0 or idx == yti:\n        return 1\n    return combination(n - 1, idx - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if epg == 0 or epg == nav:\n        return 1\n    return combination(n - 1, epg - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if nxw == 0 or nxw == cgn:\n        return 1\n    return combination(n - 1, nxw - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if bbz == 0 or bbz == qlmmg:\n        return 1\n    return combination(n - 1, bbz - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if req == 0 or req == pjw:\n        return 1\n    return combination(n - 1, req - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if xzg == 0 or xzg == bif:\n        return 1\n    return combination(n - 1, xzg - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if gvf == 0 or gvf == ktaun:\n        return 1\n    return combination(n - 1, gvf - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if ton == 0 or ton == qec:\n        return 1\n    return combination(n - 1, ton - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if wfn == 0 or wfn == kmb:\n        return 1\n    return combination(n - 1, wfn - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if mdd == 0 or mdd == ayv:\n        return 1\n    return combination(n - 1, mdd - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if fos == 0 or fos == npo:\n        return 1\n    return combination(n - 1, fos - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if tbb == 0 or tbb == gft:\n        return 1\n    return combination(n - 1, tbb - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if bkd == 0 or bkd == cnc:\n        return 1\n    return combination(n - 1, bkd - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if inz == 0 or inz == sei:\n        return 1\n    return combination(n - 1, inz - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if pdv == 0 or pdv == fhc:\n        return 1\n    return combination(n - 1, pdv - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if unt == 0 or unt == cfo:\n        return 1\n    return combination(n - 1, unt - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if ujg == 0 or ujg == nhp:\n        return 1\n    return combination(n - 1, ujg - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if mku == 0 or mku == qxg:\n        return 1\n    return combination(n - 1, mku - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if qzb == 0 or qzb == mza:\n        return 1\n    return combination(n - 1, qzb - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if eho == 0 or eho == uqa:\n        return 1\n    return combination(n - 1, eho - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if dgh == 0 or dgh == dpm:\n        return 1\n    return combination(n - 1, dgh - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if dki == 0 or dki == cei:\n        return 1\n    return combination(n - 1, dki - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if cym == 0 or cym == uwu:\n        return 1\n    return combination(n - 1, cym - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if mwx == 0 or mwx == zgm:\n        return 1\n    return combination(n - 1, mwx - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if ygr == 0 or ygr == fhz:\n        return 1\n    return combination(n - 1, ygr - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if wfk == 0 or wfk == uvj:\n        return 1\n    return combination(n - 1, wfk - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if mus == 0 or mus == mbc:\n        return 1\n    return combination(n - 1, mus - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if prz == 0 or prz == jwl:\n        return 1\n    return combination(n - 1, prz - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if zxa == 0 or zxa == xjs:\n        return 1\n    return combination(n - 1, zxa - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if nut == 0 or nut == mjr:\n        return 1\n    return combination(n - 1, nut - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if czs == 0 or czs == tzr:\n        return 1\n    return combination(n - 1, czs - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if agi == 0 or agi == vez:\n        return 1\n    return combination(n - 1, agi - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if tun == 0 or tun == nhu:\n        return 1\n    return combination(n - 1, tun - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if btq == 0 or btq == wkp:\n        return 1\n    return combination(n - 1, btq - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if aad == 0 or aad == ofl:\n        return 1\n    return combination(n - 1, aad - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if ohq == 0 or ohq == zbe:\n        return 1\n    return combination(n - 1, ohq - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if pxv == 0 or pxv == dzd:\n        return 1\n    return combination(n - 1, pxv - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if ush == 0 or ush == ags:\n        return 1\n    return combination(n - 1, ush - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if myb == 0 or myb == acr:\n        return 1\n    return combination(n - 1, myb - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if kkn == 0 or kkn == lqr:\n        return 1\n    return combination(n - 1, kkn - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if mzo == 0 or mzo == vfh:\n        return 1\n    return combination(n - 1, mzo - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if bni == 0 or bni == pau:\n        return 1\n    return combination(n - 1, bni - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if oar == 0 or oar == civ:\n        return 1\n    return combination(n - 1, oar - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if jfa == 0 or jfa == wns:\n        return 1\n    return combination(n - 1, jfa - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if jex == 0 or jex == xlc:\n        return 1\n    return combination(n - 1, jex - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if sul == 0 or sul == quwow:\n        return 1\n    return combination(n - 1, sul - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if tcw == 0 or tcw == yhu:\n        return 1\n    return combination(n - 1, tcw - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if eeu == 0 or eeu == xdc:\n        return 1\n    return combination(n - 1, eeu - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if ipf == 0 or ipf == qwv:\n        return 1\n    return combination(n - 1, ipf - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if dck == 0 or dck == iodck:\n        return 1\n    return combination(n - 1, dck - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if wtu == 0 or wtu == nju:\n        return 1\n    return combination(n - 1, wtu - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if iou == 0 or iou == wwa:\n        return 1\n    return combination(n - 1, iou - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if mwi == 0 or mwi == xjd:\n        return 1\n    return combination(n - 1, mwi - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if viy == 0 or viy == bmviy:\n        return 1\n    return combination(n - 1, viy - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if qsa == 0 or qsa == kds:\n        return 1\n    return combination(n - 1, qsa - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if htm == 0 or htm == nll:\n        return 1\n    return combination(n - 1, htm - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if qzc == 0 or qzc == ogi:\n        return 1\n    return combination(n - 1, qzc - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if mkv == 0 or mkv == lyo:\n        return 1\n    return combination(n - 1, mkv - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if osu == 0 or osu == kbg:\n        return 1\n    return combination(n - 1, osu - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if jfx == 0 or jfx == nls:\n        return 1\n    return combination(n - 1, jfx - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if idr == 0 or idr == ffr:\n        return 1\n    return combination(n - 1, idr - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if urr == 0 or urr == wfc:\n        return 1\n    return combination(n - 1, urr - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if ovg == 0 or ovg == aiu:\n        return 1\n    return combination(n - 1, ovg - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if cua == 0 or cua == mxj:\n        return 1\n    return combination(n - 1, cua - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if edl == 0 or edl == tda:\n        return 1\n    return combination(n - 1, edl - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def combination(n, k):\n    if qfm == 0 or qfm == kdp:\n        return 1\n    return combination(n - 1, qfm - 1) + combination(n - 1, k)\n",
    "O": "O(nCk)",
    "\u03a9": "\u03a9(nCk)",
    "\u0398": "\u0398(nCk)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    n = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    wax = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for fsj in range(1, wax + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    ftk = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for oqt in range(1, ftk + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    fzp = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for hgf in range(1, fzp + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    bmr = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for wbi in range(1, bmr + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    zqu = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for jem in range(1, zqu + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    rdo = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for ldj in range(1, rdo + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    naa = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for qtt in range(1, naa + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    rcw = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for chk in range(1, rcw + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    eti = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for lpg in range(1, eti + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    npc = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for our in range(1, npc + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    mxr = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for htl in range(1, mxr + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    pqi = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for nvq in range(1, pqi + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    foh = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for zca in range(1, foh + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    smo = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for vwr in range(1, smo + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    hxl = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for ony in range(1, hxl + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    jtm = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for dno in range(1, jtm + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    xjw = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for olb in range(1, xjw + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    jmx = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for qgw in range(1, jmx + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    lyq = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for fgj in range(1, lyq + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    yjz = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for bed in range(1, yjz + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    chd = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for vtn in range(1, chd + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    phq = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for kxg in range(1, phq + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    vyd = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for qyt in range(1, vyd + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    xpa = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for rcz in range(1, xpa + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    mqp = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for zgn in range(1, mqp + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    kfi = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for gnm in range(1, kfi + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    etl = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for yvb in range(1, etl + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    sfe = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for qkk in range(1, sfe + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    oxd = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for pya in range(1, oxd + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    vam = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for mxb in range(1, vam + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    ykg = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for xrv in range(1, ykg + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    zyt = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for ucy in range(1, zyt + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    wpo = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for rof in range(1, wpo + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    vhx = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for uti in range(1, vhx + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    jtl = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for ftk in range(1, jtl + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    clb = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for wot in range(1, clb + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    ipr = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for cvj in range(1, ipr + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    utb = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for bqz in range(1, utb + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    uqp = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for zaw in range(1, uqp + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    zze = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for vvu in range(1, zze + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    gul = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for sal in range(1, gul + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    btf = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for xie in range(1, btf + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    xqc = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for iur in range(1, xqc + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    dwh = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for lnr in range(1, dwh + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    brv = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for fjz in range(1, brv + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    jln = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for vkn in range(1, jln + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    qce = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for tup in range(1, qce + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    azs = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for amr in range(1, azs + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    nar = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for oxp in range(1, nar + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    vva = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for myl in range(1, vva + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    bue = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for ywi in range(1, bue + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    olj = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for qov in range(1, olj + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    hjd = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for mrh in range(1, hjd + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    lli = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for zre in range(1, lli + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    lmw = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for ipe in range(1, lmw + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    nxa = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for sbv in range(1, nxa + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    vhn = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for hks in range(1, vhn + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    tdf = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for loz in range(1, tdf + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    ekn = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for dfn in range(1, ekn + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    rjg = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for dzz in range(1, rjg + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    qda = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for nud in range(1, qda + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    pna = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for ton in range(1, pna + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    how = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for ejk in range(1, how + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    exc = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for zrf in range(1, exc + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    vvv = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for rbo in range(1, vvv + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    upm = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for kgk in range(1, upm + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    trd = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for zoi in range(1, trd + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    tpe = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for dch in range(1, tpe + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    aro = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for ezu in range(1, aro + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    kji = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for fdc in range(1, kji + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    xcp = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for kbn in range(1, xcp + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    pfr = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for aua in range(1, pfr + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    inh = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for yfd in range(1, inh + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    spv = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for xnh in range(1, spv + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    kfh = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for gfx in range(1, kfh + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    zis = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for pth in range(1, zis + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    wwe = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for dwt in range(1, wwe + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    dfe = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for ddy in range(1, dfe + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    pta = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for rjs in range(1, pta + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    qmd = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for zhj in range(1, qmd + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    lqo = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for dcr in range(1, lqo + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    dho = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for jog in range(1, dho + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    upv = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for lvk in range(1, upv + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    reo = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for vev in range(1, reo + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    yfa = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for ywu in range(1, yfa + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    zef = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for hog in range(1, zef + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    jqn = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for hnu in range(1, jqn + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    yjd = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for xef in range(1, yjd + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    kqb = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for eak in range(1, kqb + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    jmh = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for zow in range(1, jmh + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    yrr = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for uvb in range(1, yrr + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    gbv = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for wrj in range(1, gbv + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    znr = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for nir in range(1, znr + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    xor = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for sqn in range(1, xor + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    ddy = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for ybp in range(1, ddy + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    sdg = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for raj in range(1, sdg + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    gin = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for xwr in range(1, gin + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    ntl = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for nqq in range(1, ntl + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    gns = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for xgp in range(1, gns + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    pfp = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for mhx in range(1, pfp + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    loz = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for kxb in range(1, loz + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    eab = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for qwe in range(1, eab + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    mgl = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for ydz in range(1, mgl + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    ioj = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for sou in range(1, ioj + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    xwz = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for hls in range(1, xwz + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    xsb = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for sll in range(1, xsb + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    hss = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for hbs in range(1, hss + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    oid = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for llf in range(1, oid + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    utp = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for dmf in range(1, utp + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    mig = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for bqg in range(1, mig + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    lli = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for dtg in range(1, lli + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    pto = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for gbs in range(1, pto + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    rxp = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for nwj in range(1, rxp + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    dmq = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for ogn in range(1, dmq + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    zmq = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for bne in range(1, zmq + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    mwl = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for kap in range(1, mwl + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    rhw = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for xby in range(1, rhw + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    zua = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for frk in range(1, zua + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    uzu = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for jqe in range(1, uzu + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    qjq = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for thu in range(1, qjq + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    iye = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for fpx in range(1, iye + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    boc = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for euv in range(1, boc + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    jnc = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for are in range(1, jnc + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    nup = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for ssg in range(1, nup + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    rxf = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for asv in range(1, rxf + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    nhr = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for kct in range(1, nhr + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    sey = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for mdo in range(1, sey + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    glq = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for ckk in range(1, glq + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    vvi = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for pmi in range(1, vvi + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    ezl = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for ppl in range(1, ezl + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    cwh = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for xzh in range(1, cwh + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    xfm = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for byd in range(1, xfm + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def knapsack(values, weights, W):\n    rdt = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for uyf in range(1, rdt + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]\n",
    "O": "O(nW)",
    "\u03a9": "\u03a9(nW)",
    "\u0398": "\u0398(nW)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    for i in range(k):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for kxb in range(len(goclg)):\n        total += arr[i]\n    for kxb in range(kes):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for dwf in range(len(dqtgq)):\n        total += arr[i]\n    for dwf in range(uld):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for ute in range(len(eigcd)):\n        total += arr[i]\n    for ute in range(tiq):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for zkf in range(len(znlhs)):\n        total += arr[i]\n    for zkf in range(vwf):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for qbh in range(len(jrair)):\n        total += arr[i]\n    for qbh in range(ycd):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for zpi in range(len(ilywb)):\n        total += arr[i]\n    for zpi in range(que):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for uwn in range(len(zrtuw)):\n        total += arr[i]\n    for uwn in range(ynw):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for fbn in range(len(gklpa)):\n        total += arr[i]\n    for fbn in range(yjn):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for lgl in range(len(efckz)):\n        total += arr[i]\n    for lgl in range(cwz):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for jqh in range(len(irfmb)):\n        total += arr[i]\n    for jqh in range(pvp):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for fha in range(len(qkegw)):\n        total += arr[i]\n    for fha in range(oio):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for rrk in range(len(ypjvt)):\n        total += arr[i]\n    for rrk in range(nxm):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for mxv in range(len(ppyym)):\n        total += arr[i]\n    for mxv in range(nay):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for gcp in range(len(femgg)):\n        total += arr[i]\n    for gcp in range(kse):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for niz in range(len(rvdrt)):\n        total += arr[i]\n    for niz in range(fci):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for rwe in range(len(eilvj)):\n        total += arr[i]\n    for rwe in range(ngu):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for obu in range(len(dsxjj)):\n        total += arr[i]\n    for obu in range(swt):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for fmq in range(len(lbplj)):\n        total += arr[i]\n    for fmq in range(tcd):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for dqh in range(len(cljqp)):\n        total += arr[i]\n    for dqh in range(ouo):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for cbu in range(len(ssung)):\n        total += arr[i]\n    for cbu in range(art):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for rpf in range(len(orutf)):\n        total += arr[i]\n    for rpf in range(pbd):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for kqm in range(len(amvqj)):\n        total += arr[i]\n    for kqm in range(sbd):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for czv in range(len(bndla)):\n        total += arr[i]\n    for czv in range(rqo):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for avd in range(len(iankg)):\n        total += arr[i]\n    for avd in range(ldu):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for hhd in range(len(uqgum)):\n        total += arr[i]\n    for hhd in range(bip):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for zxe in range(len(ksmbb)):\n        total += arr[i]\n    for zxe in range(sdp):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for pqa in range(len(fsokg)):\n        total += arr[i]\n    for pqa in range(els):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for jow in range(len(kmtff)):\n        total += arr[i]\n    for jow in range(kqx):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for lod in range(len(tetjk)):\n        total += arr[i]\n    for lod in range(lpz):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for vwn in range(len(jmejp)):\n        total += arr[i]\n    for vwn in range(xnq):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for vrj in range(len(czgzr)):\n        total += arr[i]\n    for vrj in range(xqf):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for pzf in range(len(fkidw)):\n        total += arr[i]\n    for pzf in range(xah):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for njd in range(len(xbapk)):\n        total += arr[i]\n    for njd in range(vpp):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for sfx in range(len(rheol)):\n        total += arr[i]\n    for sfx in range(yzi):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for raz in range(len(cpeiy)):\n        total += arr[i]\n    for raz in range(bpa):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for bzc in range(len(qgbmg)):\n        total += arr[i]\n    for bzc in range(ija):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for rwv in range(len(xpvvx)):\n        total += arr[i]\n    for rwv in range(wyy):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for tid in range(len(cmsex)):\n        total += arr[i]\n    for tid in range(odt):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for erb in range(len(flsse)):\n        total += arr[i]\n    for erb in range(uhn):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for oux in range(len(udwuk)):\n        total += arr[i]\n    for oux in range(pgn):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for qux in range(len(lbkyk)):\n        total += arr[i]\n    for qux in range(vyw):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for gbd in range(len(xqybm)):\n        total += arr[i]\n    for gbd in range(hda):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for qsf in range(len(kxszd)):\n        total += arr[i]\n    for qsf in range(drb):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for pbi in range(len(opqnc)):\n        total += arr[i]\n    for pbi in range(gpt):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for kfj in range(len(rtzct)):\n        total += arr[i]\n    for kfj in range(zmn):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for bae in range(len(thqur)):\n        total += arr[i]\n    for bae in range(ctl):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for nbx in range(len(iuqff)):\n        total += arr[i]\n    for nbx in range(cob):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for tqk in range(len(hhgoy)):\n        total += arr[i]\n    for tqk in range(uwf):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for rky in range(len(vtliq)):\n        total += arr[i]\n    for rky in range(sfd):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for yvv in range(len(onqsm)):\n        total += arr[i]\n    for yvv in range(kxy):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for kpk in range(len(mpmea)):\n        total += arr[i]\n    for kpk in range(vga):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for lni in range(len(gpvso)):\n        total += arr[i]\n    for lni in range(xsh):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for akl in range(len(lvgpq)):\n        total += arr[i]\n    for akl in range(jlm):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for nju in range(len(bhybc)):\n        total += arr[i]\n    for nju in range(ozv):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for ixm in range(len(nrpyb)):\n        total += arr[i]\n    for ixm in range(wdv):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for znp in range(len(dezfh)):\n        total += arr[i]\n    for znp in range(rry):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for wtr in range(len(mowsz)):\n        total += arr[i]\n    for wtr in range(tkp):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for dut in range(len(cwxpf)):\n        total += arr[i]\n    for dut in range(jqo):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for smv in range(len(gcpcy)):\n        total += arr[i]\n    for smv in range(hqa):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for jpq in range(len(zibdt)):\n        total += arr[i]\n    for jpq in range(bai):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for rlj in range(len(foolp)):\n        total += arr[i]\n    for rlj in range(fci):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for hld in range(len(ualhn)):\n        total += arr[i]\n    for hld in range(wbd):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for olx in range(len(ybpts)):\n        total += arr[i]\n    for olx in range(msq):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for tfj in range(len(nqljm)):\n        total += arr[i]\n    for tfj in range(akz):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for zdb in range(len(acbjv)):\n        total += arr[i]\n    for zdb in range(zkk):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for yie in range(len(vzynm)):\n        total += arr[i]\n    for yie in range(jey):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for edc in range(len(elumk)):\n        total += arr[i]\n    for edc in range(xbi):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for fki in range(len(fciqn)):\n        total += arr[i]\n    for fki in range(fje):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for rgt in range(len(fhqrg)):\n        total += arr[i]\n    for rgt in range(brh):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for fsc in range(len(nbrdj)):\n        total += arr[i]\n    for fsc in range(aiy):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for mdv in range(len(wyjae)):\n        total += arr[i]\n    for mdv in range(yxz):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for etp in range(len(wplbk)):\n        total += arr[i]\n    for etp in range(rhs):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for ycp in range(len(oyvmz)):\n        total += arr[i]\n    for ycp in range(tzj):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for gls in range(len(yrsty)):\n        total += arr[i]\n    for gls in range(zgn):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for qxk in range(len(mrkhy)):\n        total += arr[i]\n    for qxk in range(lud):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for llx in range(len(jwbya)):\n        total += arr[i]\n    for llx in range(eek):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for hlk in range(len(gjjoq)):\n        total += arr[i]\n    for hlk in range(toc):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for xjc in range(len(aoqob)):\n        total += arr[i]\n    for xjc in range(lft):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for sfb in range(len(btvlz)):\n        total += arr[i]\n    for sfb in range(jjh):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for kcn in range(len(ntgba)):\n        total += arr[i]\n    for kcn in range(tgf):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for aeh in range(len(idmws)):\n        total += arr[i]\n    for aeh in range(uky):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for lhw in range(len(uuehg)):\n        total += arr[i]\n    for lhw in range(oxb):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for scd in range(len(sdaxg)):\n        total += arr[i]\n    for scd in range(eze):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for fkh in range(len(vvwcc)):\n        total += arr[i]\n    for fkh in range(cqd):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for ntc in range(len(omqwv)):\n        total += arr[i]\n    for ntc in range(eei):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for vit in range(len(shopw)):\n        total += arr[i]\n    for vit in range(gsc):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for uhc in range(len(ryqel)):\n        total += arr[i]\n    for uhc in range(pfm):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for zjw in range(len(iovpz)):\n        total += arr[i]\n    for zjw in range(eiq):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for gni in range(len(rujzo)):\n        total += arr[i]\n    for gni in range(ttj):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for zys in range(len(yoqeg)):\n        total += arr[i]\n    for zys in range(pdx):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for gkf in range(len(mydum)):\n        total += arr[i]\n    for gkf in range(jdv):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for aok in range(len(fkzfr)):\n        total += arr[i]\n    for aok in range(kfs):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for ckq in range(len(tyrta)):\n        total += arr[i]\n    for ckq in range(eif):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for eya in range(len(bitdk)):\n        total += arr[i]\n    for eya in range(ana):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for uic in range(len(zgmir)):\n        total += arr[i]\n    for uic in range(sgq):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for jus in range(len(gnkmx)):\n        total += arr[i]\n    for jus in range(nvk):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for hsq in range(len(yietd)):\n        total += arr[i]\n    for hsq in range(qgi):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for myh in range(len(ywbxm)):\n        total += arr[i]\n    for myh in range(guk):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for flb in range(len(easad)):\n        total += arr[i]\n    for flb in range(gfd):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for gkq in range(len(gfyyl)):\n        total += arr[i]\n    for gkq in range(ffm):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for nsq in range(len(lckcy)):\n        total += arr[i]\n    for nsq in range(kdm):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for ijb in range(len(ksbzi)):\n        total += arr[i]\n    for ijb in range(saz):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for nae in range(len(clcpe)):\n        total += arr[i]\n    for nae in range(zfr):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for mrw in range(len(tbdux)):\n        total += arr[i]\n    for mrw in range(zsv):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for zbn in range(len(dfxuu)):\n        total += arr[i]\n    for zbn in range(cjd):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for ovw in range(len(ctgye)):\n        total += arr[i]\n    for ovw in range(wld):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for zki in range(len(vfcne)):\n        total += arr[i]\n    for zki in range(dxy):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for nnc in range(len(jrpnl)):\n        total += arr[i]\n    for nnc in range(hnw):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for fco in range(len(iiaay)):\n        total += arr[i]\n    for fco in range(akr):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for xtw in range(len(xedra)):\n        total += arr[i]\n    for xtw in range(ane):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for tjc in range(len(nujig)):\n        total += arr[i]\n    for tjc in range(ckr):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for ltm in range(len(znpry)):\n        total += arr[i]\n    for ltm in range(pzn):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for qot in range(len(wdzva)):\n        total += arr[i]\n    for qot in range(mhj):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for nuy in range(len(gmvcd)):\n        total += arr[i]\n    for nuy in range(vha):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for nzl in range(len(unqbe)):\n        total += arr[i]\n    for nzl in range(xni):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for vzd in range(len(nmpnz)):\n        total += arr[i]\n    for vzd in range(swq):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for yjt in range(len(vqokk)):\n        total += arr[i]\n    for yjt in range(fkf):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for ieu in range(len(wgtix)):\n        total += arr[i]\n    for ieu in range(wie):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for uez in range(len(kgzfv)):\n        total += arr[i]\n    for uez in range(opi):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for yyt in range(len(mpvow)):\n        total += arr[i]\n    for yyt in range(qiz):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for wmk in range(len(xqhrs)):\n        total += arr[i]\n    for wmk in range(aem):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for dec in range(len(njyjx)):\n        total += arr[i]\n    for dec in range(mca):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for utf in range(len(zgjdp)):\n        total += arr[i]\n    for utf in range(ikx):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for zkc in range(len(deozl)):\n        total += arr[i]\n    for zkc in range(wou):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for ewk in range(len(ugqzq)):\n        total += arr[i]\n    for ewk in range(nng):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for ykb in range(len(isihx)):\n        total += arr[i]\n    for ykb in range(gca):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for bgy in range(len(fnsie)):\n        total += arr[i]\n    for bgy in range(mez):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for jpf in range(len(nwcba)):\n        total += arr[i]\n    for jpf in range(ull):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for qsl in range(len(eccno)):\n        total += arr[i]\n    for qsl in range(vad):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for njq in range(len(aahrb)):\n        total += arr[i]\n    for njq in range(kqy):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for pli in range(len(fozqk)):\n        total += arr[i]\n    for pli in range(zbw):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for leu in range(len(poukg)):\n        total += arr[i]\n    for leu in range(mmb):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def sum_array(arr, k):\n    total = 0\n    for dbt in range(len(zofbj)):\n        total += arr[i]\n    for dbt in range(lmx):\n        total += i\n    return total\n",
    "O": "O(n + k)",
    "\u03a9": "\u03a9(n + k)",
    "\u0398": "\u0398(n + k)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for i in range(len(lst)):\n        n = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(n)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for lne in range(len(lst)):\n        xfd = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(xfd)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for kpp in range(len(lst)):\n        xjj = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(xjj)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for btn in range(len(lst)):\n        asx = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(asx)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for qjs in range(len(lst)):\n        ygd = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(ygd)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for dev in range(len(lst)):\n        tss = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(tss)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for urm in range(len(lst)):\n        pgw = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(pgw)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for cgp in range(len(lst)):\n        ctd = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(ctd)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for oia in range(len(lst)):\n        lfm = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(lfm)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for xrh in range(len(lst)):\n        bey = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(bey)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for orq in range(len(lst)):\n        gpt = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(gpt)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for cym in range(len(lst)):\n        czp = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(czp)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for heb in range(len(lst)):\n        ixj = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(ixj)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for orz in range(len(lst)):\n        uzx = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(uzx)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for jnr in range(len(lst)):\n        oux = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(oux)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for vyx in range(len(lst)):\n        ekt = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(ekt)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for xlu in range(len(lst)):\n        uag = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(uag)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for vfd in range(len(lst)):\n        lwv = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(lwv)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for qeb in range(len(lst)):\n        hia = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(hia)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for nik in range(len(lst)):\n        eeh = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(eeh)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for suu in range(len(lst)):\n        wyl = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(wyl)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for zyr in range(len(lst)):\n        nuf = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(nuf)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for wld in range(len(lst)):\n        hgg = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(hgg)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for smx in range(len(lst)):\n        jwm = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(jwm)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for txh in range(len(lst)):\n        ziw = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(ziw)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for fle in range(len(lst)):\n        npv = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(npv)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for ujr in range(len(lst)):\n        jpb = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(jpb)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for qdm in range(len(lst)):\n        xgg = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(xgg)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for iat in range(len(lst)):\n        bok = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(bok)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for cxk in range(len(lst)):\n        gim = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(gim)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for yzu in range(len(lst)):\n        kmi = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(kmi)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for sqa in range(len(lst)):\n        uzp = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(uzp)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for nnw in range(len(lst)):\n        kdk = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(kdk)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for rvk in range(len(lst)):\n        vzo = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(vzo)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for vrz in range(len(lst)):\n        cwg = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(cwg)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for gst in range(len(lst)):\n        ajg = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(ajg)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for xin in range(len(lst)):\n        zje = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(zje)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for lgx in range(len(lst)):\n        lrh = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(lrh)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for ngd in range(len(lst)):\n        afd = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(afd)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for ymc in range(len(lst)):\n        zlc = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(zlc)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for zxp in range(len(lst)):\n        bgi = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(bgi)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for dgr in range(len(lst)):\n        pnc = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(pnc)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for mou in range(len(lst)):\n        oxd = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(oxd)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for nit in range(len(lst)):\n        wfg = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(wfg)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for wce in range(len(lst)):\n        hmj = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(hmj)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for htk in range(len(lst)):\n        nfz = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(nfz)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for eac in range(len(lst)):\n        lob = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(lob)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for zzx in range(len(lst)):\n        jvm = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(jvm)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for nlm in range(len(lst)):\n        upb = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(upb)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for vuy in range(len(lst)):\n        euq = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(euq)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for zdz in range(len(lst)):\n        ddd = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(ddd)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for tbh in range(len(lst)):\n        tbp = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(tbp)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for wxv in range(len(lst)):\n        bwr = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(bwr)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for jrz in range(len(lst)):\n        gjt = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(gjt)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for fjf in range(len(lst)):\n        hyl = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(hyl)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for cqb in range(len(lst)):\n        gur = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(gur)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for dzx in range(len(lst)):\n        crx = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(crx)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for inh in range(len(lst)):\n        yvd = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(yvd)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for xem in range(len(lst)):\n        aga = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(aga)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for ees in range(len(lst)):\n        qkp = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(qkp)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for mko in range(len(lst)):\n        rvp = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(rvp)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for coc in range(len(lst)):\n        aoq = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(aoq)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for eem in range(len(lst)):\n        oqy = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(oqy)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for akb in range(len(lst)):\n        srz = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(srz)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for gks in range(len(lst)):\n        rap = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(rap)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for bjt in range(len(lst)):\n        txe = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(txe)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for nsd in range(len(lst)):\n        dbb = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(dbb)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for evb in range(len(lst)):\n        lry = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(lry)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for gxv in range(len(lst)):\n        msh = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(msh)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for aac in range(len(lst)):\n        jlt = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(jlt)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for ifv in range(len(lst)):\n        fny = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(fny)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for css in range(len(lst)):\n        iel = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(iel)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for wvh in range(len(lst)):\n        lmf = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(lmf)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for kqp in range(len(lst)):\n        pvl = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(pvl)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for pro in range(len(lst)):\n        xra = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(xra)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for uyl in range(len(lst)):\n        ikt = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(ikt)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for zjs in range(len(lst)):\n        ror = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(ror)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for snk in range(len(lst)):\n        jcz = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(jcz)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for dks in range(len(lst)):\n        tac = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(tac)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for hfq in range(len(lst)):\n        pjl = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(pjl)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for uzi in range(len(lst)):\n        klf = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(klf)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for isq in range(len(lst)):\n        mlz = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(mlz)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for klh in range(len(lst)):\n        hqw = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(hqw)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for kyc in range(len(lst)):\n        jxo = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(jxo)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for iol in range(len(lst)):\n        twn = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(twn)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for act in range(len(lst)):\n        ald = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(ald)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for qgd in range(len(lst)):\n        lyd = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(lyd)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for ibj in range(len(lst)):\n        ulb = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(ulb)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for zma in range(len(lst)):\n        aci = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(aci)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for coc in range(len(lst)):\n        qkj = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(qkj)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for mjn in range(len(lst)):\n        oeq = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(oeq)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for ahm in range(len(lst)):\n        xbi = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(xbi)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for zlj in range(len(lst)):\n        zze = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(zze)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for nue in range(len(lst)):\n        pox = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(pox)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for mpp in range(len(lst)):\n        lpn = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(lpn)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for odd in range(len(lst)):\n        pac = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(pac)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for cwh in range(len(lst)):\n        bdj = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(bdj)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for tos in range(len(lst)):\n        lwx = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(lwx)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for lji in range(len(lst)):\n        rtn = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(rtn)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for pxb in range(len(lst)):\n        orn = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(orn)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for wjo in range(len(lst)):\n        jnt = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(jnt)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for tvp in range(len(lst)):\n        cbj = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(cbj)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for ttc in range(len(lst)):\n        pdk = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(pdk)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for jmg in range(len(lst)):\n        mug = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(mug)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for egz in range(len(lst)):\n        ydx = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(ydx)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for yki in range(len(lst)):\n        jsy = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(jsy)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for xzm in range(len(lst)):\n        hon = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(hon)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for hqy in range(len(lst)):\n        ybz = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(ybz)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for zpb in range(len(lst)):\n        lqz = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(lqz)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for igx in range(len(lst)):\n        mgy = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(mgy)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for ieq in range(len(lst)):\n        juv = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(juv)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for dtm in range(len(lst)):\n        qel = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(qel)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for jkm in range(len(lst)):\n        ooz = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(ooz)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for eyp in range(len(lst)):\n        ofg = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(ofg)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for vvd in range(len(lst)):\n        knc = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(knc)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for pxv in range(len(lst)):\n        zvu = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(zvu)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for vdd in range(len(lst)):\n        zwz = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(zwz)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for neo in range(len(lst)):\n        bhn = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(bhn)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for pok in range(len(lst)):\n        vai = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(vai)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for uis in range(len(lst)):\n        ame = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(ame)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for ied in range(len(lst)):\n        oon = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(oon)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for tpq in range(len(lst)):\n        kkm = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(kkm)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for sxw in range(len(lst)):\n        siy = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(siy)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for qcp in range(len(lst)):\n        zhx = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(zhx)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for uxn in range(len(lst)):\n        nwa = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(nwa)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for zwb in range(len(lst)):\n        uyo = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(uyo)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for woi in range(len(lst)):\n        wxm = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(wxm)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for vbl in range(len(lst)):\n        naz = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(naz)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for wef in range(len(lst)):\n        egj = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(egj)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for amr in range(len(lst)):\n        ogl = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(ogl)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for qyt in range(len(lst)):\n        lty = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(lty)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for dhs in range(len(lst)):\n        snr = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(snr)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for lqh in range(len(lst)):\n        jmp = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(jmp)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def permutations(lst):\n    if len(lst) <= 1:\n        return [lst]\n    result = []\n    for qlr in range(len(lst)):\n        zpq = lst.pop(0)\n        perms = permutations(lst)\n        for perm in perms:\n            result.append([n] + perm)\n        lst.append(zpq)\n    return result\n",
    "O": "O(n!)",
    "\u03a9": "\u03a9(n!)",
    "\u0398": "\u0398(n!)"
  },
  {
    "code": "def floyd_warshall(graph):\n    V = len(graph)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for i in range(V):\n        for j in range(V):\n            dist[i][j] = graph[i][j]\n    for k in range(V):\n        for i in range(V):\n            for j in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(ecdcv):\n    V = len(ecdcv)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for mhf in range(V):\n        for fae in range(V):\n            dist[i][j] = graph[i][j]\n    for ctn in range(V):\n        for mhf in range(V):\n            for fae in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(lrkod):\n    V = len(lrkod)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for irf in range(V):\n        for aag in range(V):\n            dist[i][j] = graph[i][j]\n    for jok in range(V):\n        for irf in range(V):\n            for aag in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(voatb):\n    V = len(voatb)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for cre in range(V):\n        for aod in range(V):\n            dist[i][j] = graph[i][j]\n    for ana in range(V):\n        for cre in range(V):\n            for aod in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(pcrao):\n    V = len(pcrao)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for psz in range(V):\n        for sqh in range(V):\n            dist[i][j] = graph[i][j]\n    for cgm in range(V):\n        for psz in range(V):\n            for sqh in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(acvnz):\n    V = len(acvnz)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for apo in range(V):\n        for cck in range(V):\n            dist[i][j] = graph[i][j]\n    for qbn in range(V):\n        for apo in range(V):\n            for cck in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(rhymj):\n    V = len(rhymj)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for nlq in range(V):\n        for hqr in range(V):\n            dist[i][j] = graph[i][j]\n    for rqa in range(V):\n        for nlq in range(V):\n            for hqr in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(piyuz):\n    V = len(piyuz)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for vil in range(V):\n        for dst in range(V):\n            dist[i][j] = graph[i][j]\n    for lkc in range(V):\n        for vil in range(V):\n            for dst in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(brgna):\n    V = len(brgna)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for ysc in range(V):\n        for drq in range(V):\n            dist[i][j] = graph[i][j]\n    for bma in range(V):\n        for ysc in range(V):\n            for drq in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(lvzru):\n    V = len(lvzru)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for oww in range(V):\n        for myu in range(V):\n            dist[i][j] = graph[i][j]\n    for nez in range(V):\n        for oww in range(V):\n            for myu in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(npxnr):\n    V = len(npxnr)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for zlk in range(V):\n        for prr in range(V):\n            dist[i][j] = graph[i][j]\n    for gsr in range(V):\n        for zlk in range(V):\n            for prr in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(lodll):\n    V = len(lodll)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for bqm in range(V):\n        for gmm in range(V):\n            dist[i][j] = graph[i][j]\n    for nhp in range(V):\n        for bqm in range(V):\n            for gmm in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(covma):\n    V = len(covma)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for zpr in range(V):\n        for tzn in range(V):\n            dist[i][j] = graph[i][j]\n    for fqp in range(V):\n        for zpr in range(V):\n            for tzn in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(qnzvx):\n    V = len(qnzvx)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for gna in range(V):\n        for mmp in range(V):\n            dist[i][j] = graph[i][j]\n    for nxz in range(V):\n        for gna in range(V):\n            for mmp in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(inzjd):\n    V = len(inzjd)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for jlu in range(V):\n        for kpk in range(V):\n            dist[i][j] = graph[i][j]\n    for gua in range(V):\n        for jlu in range(V):\n            for kpk in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(oamyv):\n    V = len(oamyv)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for uiu in range(V):\n        for gcp in range(V):\n            dist[i][j] = graph[i][j]\n    for vxd in range(V):\n        for uiu in range(V):\n            for gcp in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(rsirk):\n    V = len(rsirk)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for umf in range(V):\n        for khf in range(V):\n            dist[i][j] = graph[i][j]\n    for peb in range(V):\n        for umf in range(V):\n            for khf in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(djilh):\n    V = len(djilh)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for rzy in range(V):\n        for fwd in range(V):\n            dist[i][j] = graph[i][j]\n    for ssi in range(V):\n        for rzy in range(V):\n            for fwd in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(rueul):\n    V = len(rueul)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for rkz in range(V):\n        for gwx in range(V):\n            dist[i][j] = graph[i][j]\n    for ctg in range(V):\n        for rkz in range(V):\n            for gwx in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(zrywf):\n    V = len(zrywf)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for kvs in range(V):\n        for wiv in range(V):\n            dist[i][j] = graph[i][j]\n    for isq in range(V):\n        for kvs in range(V):\n            for wiv in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(xnxuq):\n    V = len(xnxuq)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for fot in range(V):\n        for wrr in range(V):\n            dist[i][j] = graph[i][j]\n    for xpa in range(V):\n        for fot in range(V):\n            for wrr in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(fbzrh):\n    V = len(fbzrh)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for rny in range(V):\n        for ugl in range(V):\n            dist[i][j] = graph[i][j]\n    for sdw in range(V):\n        for rny in range(V):\n            for ugl in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(awylo):\n    V = len(awylo)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for bxo in range(V):\n        for ici in range(V):\n            dist[i][j] = graph[i][j]\n    for jyg in range(V):\n        for bxo in range(V):\n            for ici in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(afmko):\n    V = len(afmko)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for gtl in range(V):\n        for hwu in range(V):\n            dist[i][j] = graph[i][j]\n    for tws in range(V):\n        for gtl in range(V):\n            for hwu in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(zhfcj):\n    V = len(zhfcj)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for qzm in range(V):\n        for bfw in range(V):\n            dist[i][j] = graph[i][j]\n    for kln in range(V):\n        for qzm in range(V):\n            for bfw in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(mmmfv):\n    V = len(mmmfv)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for vxf in range(V):\n        for qpr in range(V):\n            dist[i][j] = graph[i][j]\n    for wbg in range(V):\n        for vxf in range(V):\n            for qpr in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(psblz):\n    V = len(psblz)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for qhq in range(V):\n        for ufz in range(V):\n            dist[i][j] = graph[i][j]\n    for oyk in range(V):\n        for qhq in range(V):\n            for ufz in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(rysoa):\n    V = len(rysoa)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for gys in range(V):\n        for pwf in range(V):\n            dist[i][j] = graph[i][j]\n    for hlm in range(V):\n        for gys in range(V):\n            for pwf in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(esrjq):\n    V = len(esrjq)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for ebf in range(V):\n        for gld in range(V):\n            dist[i][j] = graph[i][j]\n    for jfn in range(V):\n        for ebf in range(V):\n            for gld in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(xjsqm):\n    V = len(xjsqm)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for bpi in range(V):\n        for gzg in range(V):\n            dist[i][j] = graph[i][j]\n    for yfe in range(V):\n        for bpi in range(V):\n            for gzg in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(vhnda):\n    V = len(vhnda)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for gcm in range(V):\n        for wsv in range(V):\n            dist[i][j] = graph[i][j]\n    for pan in range(V):\n        for gcm in range(V):\n            for wsv in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(edwai):\n    V = len(edwai)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for fmc in range(V):\n        for tap in range(V):\n            dist[i][j] = graph[i][j]\n    for wrh in range(V):\n        for fmc in range(V):\n            for tap in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(jetpo):\n    V = len(jetpo)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for jyd in range(V):\n        for iyw in range(V):\n            dist[i][j] = graph[i][j]\n    for sfx in range(V):\n        for jyd in range(V):\n            for iyw in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(zvlxw):\n    V = len(zvlxw)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for giw in range(V):\n        for zde in range(V):\n            dist[i][j] = graph[i][j]\n    for jez in range(V):\n        for giw in range(V):\n            for zde in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(kramr):\n    V = len(kramr)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for gsd in range(V):\n        for ozs in range(V):\n            dist[i][j] = graph[i][j]\n    for pky in range(V):\n        for gsd in range(V):\n            for ozs in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(khnmx):\n    V = len(khnmx)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for xkc in range(V):\n        for ohk in range(V):\n            dist[i][j] = graph[i][j]\n    for ckc in range(V):\n        for xkc in range(V):\n            for ohk in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(zvwyb):\n    V = len(zvwyb)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for jcr in range(V):\n        for mij in range(V):\n            dist[i][j] = graph[i][j]\n    for rts in range(V):\n        for jcr in range(V):\n            for mij in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(cxzfx):\n    V = len(cxzfx)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for hkd in range(V):\n        for got in range(V):\n            dist[i][j] = graph[i][j]\n    for ngn in range(V):\n        for hkd in range(V):\n            for got in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(odzfh):\n    V = len(odzfh)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for bdo in range(V):\n        for boa in range(V):\n            dist[i][j] = graph[i][j]\n    for nlv in range(V):\n        for bdo in range(V):\n            for boa in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(nqeso):\n    V = len(nqeso)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for soe in range(V):\n        for khw in range(V):\n            dist[i][j] = graph[i][j]\n    for kkh in range(V):\n        for soe in range(V):\n            for khw in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(hxmor):\n    V = len(hxmor)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for ymo in range(V):\n        for mkm in range(V):\n            dist[i][j] = graph[i][j]\n    for ibw in range(V):\n        for ymo in range(V):\n            for mkm in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(feecb):\n    V = len(feecb)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for nsx in range(V):\n        for tei in range(V):\n            dist[i][j] = graph[i][j]\n    for tjj in range(V):\n        for nsx in range(V):\n            for tei in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(zjlvz):\n    V = len(zjlvz)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for pcl in range(V):\n        for gfb in range(V):\n            dist[i][j] = graph[i][j]\n    for quq in range(V):\n        for pcl in range(V):\n            for gfb in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(myfne):\n    V = len(myfne)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for pzd in range(V):\n        for cct in range(V):\n            dist[i][j] = graph[i][j]\n    for fvi in range(V):\n        for pzd in range(V):\n            for cct in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(yeshs):\n    V = len(yeshs)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for jew in range(V):\n        for xzl in range(V):\n            dist[i][j] = graph[i][j]\n    for est in range(V):\n        for jew in range(V):\n            for xzl in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(tuevm):\n    V = len(tuevm)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for air in range(V):\n        for wrp in range(V):\n            dist[i][j] = graph[i][j]\n    for pib in range(V):\n        for air in range(V):\n            for wrp in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(qqgcd):\n    V = len(qqgcd)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for dzq in range(V):\n        for ynd in range(V):\n            dist[i][j] = graph[i][j]\n    for wbl in range(V):\n        for dzq in range(V):\n            for ynd in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(qcaxn):\n    V = len(qcaxn)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for rbp in range(V):\n        for wtr in range(V):\n            dist[i][j] = graph[i][j]\n    for ypl in range(V):\n        for rbp in range(V):\n            for wtr in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(vlchc):\n    V = len(vlchc)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for psp in range(V):\n        for ndh in range(V):\n            dist[i][j] = graph[i][j]\n    for uli in range(V):\n        for psp in range(V):\n            for ndh in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(nvplp):\n    V = len(nvplp)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for dop in range(V):\n        for jqt in range(V):\n            dist[i][j] = graph[i][j]\n    for abw in range(V):\n        for dop in range(V):\n            for jqt in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(decee):\n    V = len(decee)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for zjd in range(V):\n        for zbf in range(V):\n            dist[i][j] = graph[i][j]\n    for gpb in range(V):\n        for zjd in range(V):\n            for zbf in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(qulym):\n    V = len(qulym)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for lly in range(V):\n        for brn in range(V):\n            dist[i][j] = graph[i][j]\n    for mje in range(V):\n        for lly in range(V):\n            for brn in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(hybhp):\n    V = len(hybhp)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for qvs in range(V):\n        for qxu in range(V):\n            dist[i][j] = graph[i][j]\n    for kfq in range(V):\n        for qvs in range(V):\n            for qxu in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(mlodm):\n    V = len(mlodm)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for muu in range(V):\n        for peh in range(V):\n            dist[i][j] = graph[i][j]\n    for jzw in range(V):\n        for muu in range(V):\n            for peh in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(npegq):\n    V = len(npegq)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for bcg in range(V):\n        for mna in range(V):\n            dist[i][j] = graph[i][j]\n    for jbf in range(V):\n        for bcg in range(V):\n            for mna in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(mfmzr):\n    V = len(mfmzr)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for vfj in range(V):\n        for mbk in range(V):\n            dist[i][j] = graph[i][j]\n    for dse in range(V):\n        for vfj in range(V):\n            for mbk in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(eivfl):\n    V = len(eivfl)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for feo in range(V):\n        for scu in range(V):\n            dist[i][j] = graph[i][j]\n    for omc in range(V):\n        for feo in range(V):\n            for scu in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(lbafq):\n    V = len(lbafq)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for qra in range(V):\n        for oim in range(V):\n            dist[i][j] = graph[i][j]\n    for nlo in range(V):\n        for qra in range(V):\n            for oim in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(karxm):\n    V = len(karxm)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for wwh in range(V):\n        for ukz in range(V):\n            dist[i][j] = graph[i][j]\n    for rki in range(V):\n        for wwh in range(V):\n            for ukz in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(fwydn):\n    V = len(fwydn)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for dgx in range(V):\n        for ndp in range(V):\n            dist[i][j] = graph[i][j]\n    for xkq in range(V):\n        for dgx in range(V):\n            for ndp in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(dkahz):\n    V = len(dkahz)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for dzc in range(V):\n        for lgv in range(V):\n            dist[i][j] = graph[i][j]\n    for rht in range(V):\n        for dzc in range(V):\n            for lgv in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(lcpha):\n    V = len(lcpha)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for qnq in range(V):\n        for cuz in range(V):\n            dist[i][j] = graph[i][j]\n    for lie in range(V):\n        for qnq in range(V):\n            for cuz in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(yaoxo):\n    V = len(yaoxo)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for ate in range(V):\n        for ttl in range(V):\n            dist[i][j] = graph[i][j]\n    for xni in range(V):\n        for ate in range(V):\n            for ttl in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(qekhk):\n    V = len(qekhk)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for sny in range(V):\n        for xuz in range(V):\n            dist[i][j] = graph[i][j]\n    for aob in range(V):\n        for sny in range(V):\n            for xuz in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(pvcxf):\n    V = len(pvcxf)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for aff in range(V):\n        for kly in range(V):\n            dist[i][j] = graph[i][j]\n    for sej in range(V):\n        for aff in range(V):\n            for kly in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(wqfls):\n    V = len(wqfls)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for daf in range(V):\n        for lsl in range(V):\n            dist[i][j] = graph[i][j]\n    for ckz in range(V):\n        for daf in range(V):\n            for lsl in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(zkxao):\n    V = len(zkxao)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for yhx in range(V):\n        for pig in range(V):\n            dist[i][j] = graph[i][j]\n    for igd in range(V):\n        for yhx in range(V):\n            for pig in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(xtqwp):\n    V = len(xtqwp)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for kna in range(V):\n        for sav in range(V):\n            dist[i][j] = graph[i][j]\n    for csc in range(V):\n        for kna in range(V):\n            for sav in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(bxrjp):\n    V = len(bxrjp)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for zun in range(V):\n        for iyg in range(V):\n            dist[i][j] = graph[i][j]\n    for twj in range(V):\n        for zun in range(V):\n            for iyg in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(kmxby):\n    V = len(kmxby)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for lur in range(V):\n        for zhn in range(V):\n            dist[i][j] = graph[i][j]\n    for rdz in range(V):\n        for lur in range(V):\n            for zhn in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(vptgh):\n    V = len(vptgh)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for hnh in range(V):\n        for exj in range(V):\n            dist[i][j] = graph[i][j]\n    for qxw in range(V):\n        for hnh in range(V):\n            for exj in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(xzjwn):\n    V = len(xzjwn)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for aol in range(V):\n        for zml in range(V):\n            dist[i][j] = graph[i][j]\n    for gzp in range(V):\n        for aol in range(V):\n            for zml in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(tbqjs):\n    V = len(tbqjs)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for qwj in range(V):\n        for gkc in range(V):\n            dist[i][j] = graph[i][j]\n    for wgu in range(V):\n        for qwj in range(V):\n            for gkc in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(gwgky):\n    V = len(gwgky)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for lqu in range(V):\n        for njf in range(V):\n            dist[i][j] = graph[i][j]\n    for aav in range(V):\n        for lqu in range(V):\n            for njf in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(yporm):\n    V = len(yporm)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for gfh in range(V):\n        for ekt in range(V):\n            dist[i][j] = graph[i][j]\n    for gxe in range(V):\n        for gfh in range(V):\n            for ekt in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(jkibb):\n    V = len(jkibb)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for ojt in range(V):\n        for smq in range(V):\n            dist[i][j] = graph[i][j]\n    for pew in range(V):\n        for ojt in range(V):\n            for smq in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(rremc):\n    V = len(rremc)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for kzj in range(V):\n        for sla in range(V):\n            dist[i][j] = graph[i][j]\n    for rds in range(V):\n        for kzj in range(V):\n            for sla in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(mmsrz):\n    V = len(mmsrz)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for vej in range(V):\n        for brb in range(V):\n            dist[i][j] = graph[i][j]\n    for fok in range(V):\n        for vej in range(V):\n            for brb in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(tsrof):\n    V = len(tsrof)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for qfz in range(V):\n        for zhu in range(V):\n            dist[i][j] = graph[i][j]\n    for gcg in range(V):\n        for qfz in range(V):\n            for zhu in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(gqhkr):\n    V = len(gqhkr)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for mds in range(V):\n        for ipo in range(V):\n            dist[i][j] = graph[i][j]\n    for kbs in range(V):\n        for mds in range(V):\n            for ipo in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(vbvud):\n    V = len(vbvud)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for xrm in range(V):\n        for fcf in range(V):\n            dist[i][j] = graph[i][j]\n    for lpu in range(V):\n        for xrm in range(V):\n            for fcf in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(vnstx):\n    V = len(vnstx)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for vft in range(V):\n        for ihb in range(V):\n            dist[i][j] = graph[i][j]\n    for myf in range(V):\n        for vft in range(V):\n            for ihb in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(ostmc):\n    V = len(ostmc)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for drj in range(V):\n        for guh in range(V):\n            dist[i][j] = graph[i][j]\n    for dtg in range(V):\n        for drj in range(V):\n            for guh in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(pwkiw):\n    V = len(pwkiw)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for bwj in range(V):\n        for eqh in range(V):\n            dist[i][j] = graph[i][j]\n    for cqe in range(V):\n        for bwj in range(V):\n            for eqh in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(flyvb):\n    V = len(flyvb)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for dst in range(V):\n        for uzs in range(V):\n            dist[i][j] = graph[i][j]\n    for vzv in range(V):\n        for dst in range(V):\n            for uzs in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(qakpa):\n    V = len(qakpa)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for ayz in range(V):\n        for rhb in range(V):\n            dist[i][j] = graph[i][j]\n    for vcl in range(V):\n        for ayz in range(V):\n            for rhb in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(lwurz):\n    V = len(lwurz)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for kzy in range(V):\n        for hga in range(V):\n            dist[i][j] = graph[i][j]\n    for vwk in range(V):\n        for kzy in range(V):\n            for hga in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(ipyyz):\n    V = len(ipyyz)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for asu in range(V):\n        for wyd in range(V):\n            dist[i][j] = graph[i][j]\n    for hiy in range(V):\n        for asu in range(V):\n            for wyd in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(aoyyn):\n    V = len(aoyyn)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for siu in range(V):\n        for pvm in range(V):\n            dist[i][j] = graph[i][j]\n    for pvv in range(V):\n        for siu in range(V):\n            for pvm in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(uioxo):\n    V = len(uioxo)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for pvi in range(V):\n        for kwk in range(V):\n            dist[i][j] = graph[i][j]\n    for hwb in range(V):\n        for pvi in range(V):\n            for kwk in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(maqfp):\n    V = len(maqfp)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for gjp in range(V):\n        for bpq in range(V):\n            dist[i][j] = graph[i][j]\n    for bqa in range(V):\n        for gjp in range(V):\n            for bpq in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(nnewq):\n    V = len(nnewq)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for dux in range(V):\n        for ulf in range(V):\n            dist[i][j] = graph[i][j]\n    for wso in range(V):\n        for dux in range(V):\n            for ulf in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(hnsre):\n    V = len(hnsre)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for uwo in range(V):\n        for fgh in range(V):\n            dist[i][j] = graph[i][j]\n    for kwh in range(V):\n        for uwo in range(V):\n            for fgh in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(djvzs):\n    V = len(djvzs)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for axr in range(V):\n        for niu in range(V):\n            dist[i][j] = graph[i][j]\n    for uyp in range(V):\n        for axr in range(V):\n            for niu in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(fgyob):\n    V = len(fgyob)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for soh in range(V):\n        for jaq in range(V):\n            dist[i][j] = graph[i][j]\n    for syc in range(V):\n        for soh in range(V):\n            for jaq in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(tjfic):\n    V = len(tjfic)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for wwh in range(V):\n        for deg in range(V):\n            dist[i][j] = graph[i][j]\n    for bgn in range(V):\n        for wwh in range(V):\n            for deg in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(txlhd):\n    V = len(txlhd)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for ubs in range(V):\n        for ucv in range(V):\n            dist[i][j] = graph[i][j]\n    for dli in range(V):\n        for ubs in range(V):\n            for ucv in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(yubej):\n    V = len(yubej)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for zaf in range(V):\n        for fyy in range(V):\n            dist[i][j] = graph[i][j]\n    for xtx in range(V):\n        for zaf in range(V):\n            for fyy in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(xggff):\n    V = len(xggff)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for rfl in range(V):\n        for odo in range(V):\n            dist[i][j] = graph[i][j]\n    for kjj in range(V):\n        for rfl in range(V):\n            for odo in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(epeuc):\n    V = len(epeuc)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for hsp in range(V):\n        for hod in range(V):\n            dist[i][j] = graph[i][j]\n    for kqi in range(V):\n        for hsp in range(V):\n            for hod in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(mfvtm):\n    V = len(mfvtm)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for fem in range(V):\n        for pid in range(V):\n            dist[i][j] = graph[i][j]\n    for ylu in range(V):\n        for fem in range(V):\n            for pid in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(uydbl):\n    V = len(uydbl)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for qmu in range(V):\n        for oki in range(V):\n            dist[i][j] = graph[i][j]\n    for ymp in range(V):\n        for qmu in range(V):\n            for oki in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(tgqxr):\n    V = len(tgqxr)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for djl in range(V):\n        for eyn in range(V):\n            dist[i][j] = graph[i][j]\n    for qtz in range(V):\n        for djl in range(V):\n            for eyn in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(whjot):\n    V = len(whjot)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for jdd in range(V):\n        for tdr in range(V):\n            dist[i][j] = graph[i][j]\n    for bpk in range(V):\n        for jdd in range(V):\n            for tdr in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(bohjl):\n    V = len(bohjl)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for hlx in range(V):\n        for kbz in range(V):\n            dist[i][j] = graph[i][j]\n    for mba in range(V):\n        for hlx in range(V):\n            for kbz in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(lezgk):\n    V = len(lezgk)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for dgv in range(V):\n        for hdj in range(V):\n            dist[i][j] = graph[i][j]\n    for awz in range(V):\n        for dgv in range(V):\n            for hdj in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(cwscd):\n    V = len(cwscd)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for duc in range(V):\n        for wct in range(V):\n            dist[i][j] = graph[i][j]\n    for ewl in range(V):\n        for duc in range(V):\n            for wct in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(ddjes):\n    V = len(ddjes)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for urn in range(V):\n        for rla in range(V):\n            dist[i][j] = graph[i][j]\n    for ceq in range(V):\n        for urn in range(V):\n            for rla in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(zdvfp):\n    V = len(zdvfp)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for cbd in range(V):\n        for wcx in range(V):\n            dist[i][j] = graph[i][j]\n    for hco in range(V):\n        for cbd in range(V):\n            for wcx in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(qrakk):\n    V = len(qrakk)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for uwu in range(V):\n        for esl in range(V):\n            dist[i][j] = graph[i][j]\n    for bmn in range(V):\n        for uwu in range(V):\n            for esl in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(hankx):\n    V = len(hankx)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for dxz in range(V):\n        for jvc in range(V):\n            dist[i][j] = graph[i][j]\n    for agp in range(V):\n        for dxz in range(V):\n            for jvc in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(uhqrr):\n    V = len(uhqrr)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for jib in range(V):\n        for evd in range(V):\n            dist[i][j] = graph[i][j]\n    for agt in range(V):\n        for jib in range(V):\n            for evd in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(wrlwx):\n    V = len(wrlwx)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for fwr in range(V):\n        for qor in range(V):\n            dist[i][j] = graph[i][j]\n    for wug in range(V):\n        for fwr in range(V):\n            for qor in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(xmwjt):\n    V = len(xmwjt)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for gxq in range(V):\n        for zzd in range(V):\n            dist[i][j] = graph[i][j]\n    for zuh in range(V):\n        for gxq in range(V):\n            for zzd in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(jggew):\n    V = len(jggew)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for ukj in range(V):\n        for ely in range(V):\n            dist[i][j] = graph[i][j]\n    for kgv in range(V):\n        for ukj in range(V):\n            for ely in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(lufcf):\n    V = len(lufcf)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for ngq in range(V):\n        for zcx in range(V):\n            dist[i][j] = graph[i][j]\n    for oef in range(V):\n        for ngq in range(V):\n            for zcx in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(bejem):\n    V = len(bejem)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for tcj in range(V):\n        for mxc in range(V):\n            dist[i][j] = graph[i][j]\n    for yqa in range(V):\n        for tcj in range(V):\n            for mxc in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(ckite):\n    V = len(ckite)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for eyv in range(V):\n        for img in range(V):\n            dist[i][j] = graph[i][j]\n    for sww in range(V):\n        for eyv in range(V):\n            for img in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(opivv):\n    V = len(opivv)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for rhq in range(V):\n        for pqo in range(V):\n            dist[i][j] = graph[i][j]\n    for but in range(V):\n        for rhq in range(V):\n            for pqo in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(wxjti):\n    V = len(wxjti)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for xcx in range(V):\n        for gpj in range(V):\n            dist[i][j] = graph[i][j]\n    for zpv in range(V):\n        for xcx in range(V):\n            for gpj in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(giorf):\n    V = len(giorf)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for wvi in range(V):\n        for txj in range(V):\n            dist[i][j] = graph[i][j]\n    for otc in range(V):\n        for wvi in range(V):\n            for txj in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(fphtw):\n    V = len(fphtw)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for svp in range(V):\n        for fbp in range(V):\n            dist[i][j] = graph[i][j]\n    for dgb in range(V):\n        for svp in range(V):\n            for fbp in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(dsewo):\n    V = len(dsewo)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for kon in range(V):\n        for lsa in range(V):\n            dist[i][j] = graph[i][j]\n    for imn in range(V):\n        for kon in range(V):\n            for lsa in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(vsdrt):\n    V = len(vsdrt)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for vyl in range(V):\n        for ojj in range(V):\n            dist[i][j] = graph[i][j]\n    for mgg in range(V):\n        for vyl in range(V):\n            for ojj in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(odqio):\n    V = len(odqio)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for uft in range(V):\n        for eis in range(V):\n            dist[i][j] = graph[i][j]\n    for rqw in range(V):\n        for uft in range(V):\n            for eis in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(pazsr):\n    V = len(pazsr)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for qfu in range(V):\n        for heu in range(V):\n            dist[i][j] = graph[i][j]\n    for wks in range(V):\n        for qfu in range(V):\n            for heu in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(zgkod):\n    V = len(zgkod)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for fcs in range(V):\n        for mlp in range(V):\n            dist[i][j] = graph[i][j]\n    for vtp in range(V):\n        for fcs in range(V):\n            for mlp in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(ybech):\n    V = len(ybech)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for oaf in range(V):\n        for gdg in range(V):\n            dist[i][j] = graph[i][j]\n    for mot in range(V):\n        for oaf in range(V):\n            for gdg in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(vlkzz):\n    V = len(vlkzz)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for xdv in range(V):\n        for kah in range(V):\n            dist[i][j] = graph[i][j]\n    for uwo in range(V):\n        for xdv in range(V):\n            for kah in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(lulhz):\n    V = len(lulhz)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for uns in range(V):\n        for jmp in range(V):\n            dist[i][j] = graph[i][j]\n    for lff in range(V):\n        for uns in range(V):\n            for jmp in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(vzoay):\n    V = len(vzoay)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for aee in range(V):\n        for kkp in range(V):\n            dist[i][j] = graph[i][j]\n    for zie in range(V):\n        for aee in range(V):\n            for kkp in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(imdwg):\n    V = len(imdwg)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for zip in range(V):\n        for rav in range(V):\n            dist[i][j] = graph[i][j]\n    for nzm in range(V):\n        for zip in range(V):\n            for rav in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(ysjkq):\n    V = len(ysjkq)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for gul in range(V):\n        for ddk in range(V):\n            dist[i][j] = graph[i][j]\n    for suw in range(V):\n        for gul in range(V):\n            for ddk in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "def floyd_warshall(qlvzy):\n    V = len(qlvzy)\n    dist = [[float('inf')] * V for _ in range(V)]\n    for vzy in range(V):\n        for rtb in range(V):\n            dist[i][j] = graph[i][j]\n    for uzo in range(V):\n        for vzy in range(V):\n            for rtb in range(V):\n                if dist[i][k] != float('inf') and dist[k][j] != float('inf'):\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    return dist\n",
    "O": "O(V^3)",
    "\u03a9": "\u03a9(V^3)",
    "\u0398": "\u0398(V^3)"
  },
  {
    "code": "import heapq\ndef prim_mst(graph):\n    V = len(graph)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(wxktf):\n    V = len(wxktf)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(gvuqg):\n    V = len(gvuqg)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(vqpqs):\n    V = len(vqpqs)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(mcdim):\n    V = len(mcdim)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(njifm):\n    V = len(njifm)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(acwng):\n    V = len(acwng)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(xzgvb):\n    V = len(xzgvb)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(hlzww):\n    V = len(hlzww)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(rhffs):\n    V = len(rhffs)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(uvwsv):\n    V = len(uvwsv)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(lmdzl):\n    V = len(lmdzl)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(ccbqq):\n    V = len(ccbqq)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(hxhrr):\n    V = len(hxhrr)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(hqksn):\n    V = len(hqksn)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(dbkjk):\n    V = len(dbkjk)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(uzmvr):\n    V = len(uzmvr)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(ptsrq):\n    V = len(ptsrq)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(kjztb):\n    V = len(kjztb)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(lmprq):\n    V = len(lmprq)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(oinci):\n    V = len(oinci)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(uokvc):\n    V = len(uokvc)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(jldug):\n    V = len(jldug)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(wiasp):\n    V = len(wiasp)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(vpiil):\n    V = len(vpiil)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(kamxz):\n    V = len(kamxz)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(kxfwp):\n    V = len(kxfwp)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(nitdk):\n    V = len(nitdk)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(wlimi):\n    V = len(wlimi)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(hhlfe):\n    V = len(hhlfe)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(ilrfe):\n    V = len(ilrfe)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(dseuv):\n    V = len(dseuv)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(lpgaf):\n    V = len(lpgaf)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(urbkc):\n    V = len(urbkc)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(zmeyr):\n    V = len(zmeyr)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(ukzcz):\n    V = len(ukzcz)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(dztch):\n    V = len(dztch)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(juvpi):\n    V = len(juvpi)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(osyyf):\n    V = len(osyyf)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(nkxtm):\n    V = len(nkxtm)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(jhlhp):\n    V = len(jhlhp)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(rnqsb):\n    V = len(rnqsb)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(spawe):\n    V = len(spawe)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(iaqpl):\n    V = len(iaqpl)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(stlto):\n    V = len(stlto)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(wmyrb):\n    V = len(wmyrb)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(wsfwa):\n    V = len(wsfwa)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(prunx):\n    V = len(prunx)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(apsmk):\n    V = len(apsmk)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(vbhaf):\n    V = len(vbhaf)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(oimzg):\n    V = len(oimzg)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(prkhk):\n    V = len(prkhk)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(yvlfp):\n    V = len(yvlfp)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(vioid):\n    V = len(vioid)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(yhqul):\n    V = len(yhqul)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(fvahx):\n    V = len(fvahx)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(praor):\n    V = len(praor)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(ehfln):\n    V = len(ehfln)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(yupki):\n    V = len(yupki)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(wqzmq):\n    V = len(wqzmq)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(lljfg):\n    V = len(lljfg)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(orsuv):\n    V = len(orsuv)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(pabpx):\n    V = len(pabpx)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(axonx):\n    V = len(axonx)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(xbbtu):\n    V = len(xbbtu)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(qwgeo):\n    V = len(qwgeo)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(aeggd):\n    V = len(aeggd)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(cideo):\n    V = len(cideo)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(bsycm):\n    V = len(bsycm)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(amikj):\n    V = len(amikj)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(gwbxj):\n    V = len(gwbxj)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(zwmbg):\n    V = len(zwmbg)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(urbvt):\n    V = len(urbvt)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(xlrur):\n    V = len(xlrur)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(ryihr):\n    V = len(ryihr)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(wmwvl):\n    V = len(wmwvl)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(cjecm):\n    V = len(cjecm)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(qkdck):\n    V = len(qkdck)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(yckft):\n    V = len(yckft)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(ydsrd):\n    V = len(ydsrd)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(tbpqs):\n    V = len(tbpqs)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(vgvpt):\n    V = len(vgvpt)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(plqtl):\n    V = len(plqtl)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(svnet):\n    V = len(svnet)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(dqtxx):\n    V = len(dqtxx)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(ddzed):\n    V = len(ddzed)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(smrpw):\n    V = len(smrpw)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(dcynp):\n    V = len(dcynp)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(izgqz):\n    V = len(izgqz)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(kmmmz):\n    V = len(kmmmz)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(ihfgr):\n    V = len(ihfgr)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(bjkbq):\n    V = len(bjkbq)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(mteie):\n    V = len(mteie)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(efwxt):\n    V = len(efwxt)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(eskjb):\n    V = len(eskjb)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(frtuh):\n    V = len(frtuh)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(dvsfw):\n    V = len(dvsfw)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(nqigg):\n    V = len(nqigg)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(iecel):\n    V = len(iecel)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(tlanw):\n    V = len(tlanw)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(frhbz):\n    V = len(frhbz)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(wkhkg):\n    V = len(wkhkg)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(ualiz):\n    V = len(ualiz)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(ifbfl):\n    V = len(ifbfl)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(zeaho):\n    V = len(zeaho)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(idyym):\n    V = len(idyym)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(utypi):\n    V = len(utypi)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(mtnki):\n    V = len(mtnki)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(fzytn):\n    V = len(fzytn)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(budkq):\n    V = len(budkq)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(vljch):\n    V = len(vljch)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(txfnp):\n    V = len(txfnp)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(tupjk):\n    V = len(tupjk)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(ukrcr):\n    V = len(ukrcr)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(qsgzz):\n    V = len(qsgzz)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(zfogm):\n    V = len(zfogm)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(sxfog):\n    V = len(sxfog)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(myygv):\n    V = len(myygv)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(rqhmd):\n    V = len(rqhmd)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(zkzsc):\n    V = len(zkzsc)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(jryxz):\n    V = len(jryxz)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(snqwo):\n    V = len(snqwo)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(zifgb):\n    V = len(zifgb)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(cxrci):\n    V = len(cxrci)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(kyija):\n    V = len(kyija)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(nwwhr):\n    V = len(nwwhr)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(oocfc):\n    V = len(oocfc)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(bhygc):\n    V = len(bhygc)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(difyq):\n    V = len(difyq)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(iajmd):\n    V = len(iajmd)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(ylefs):\n    V = len(ylefs)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(qnrtk):\n    V = len(qnrtk)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(miolm):\n    V = len(miolm)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "import heapq\ndef prim_mst(uywpq):\n    V = len(uywpq)\n    visited = [False] * V\n    pq = [(0, 0)]\n    total_weight = 0\n    while pq:\n        weight, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        total_weight += weight\n        for v, w in graph[u]:\n            if not visited[v]:\n                heapq.heappush(pq, (w, v))\n    return total_weight\n",
    "O": "O(E log V)",
    "\u03a9": "\u03a9(E log V)",
    "\u0398": "\u0398(E log V)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    n = len(A)\n    if n <= 1:\n        return [[A[0][0] * B[0][0]]]\n    mid = n // 2\n    A11 = [[A[i][j] for j in range(mid)] for i in range(mid)]\n    A12 = [[A[i][j] for j in range(mid, n)] for i in range(mid)]\n    A21 = [[A[i][j] for j in range(mid)] for i in range(mid, n)]\n    A22 = [[A[i][j] for j in range(mid, n)] for i in range(mid, n)]\n    B11 = [[B[i][j] for j in range(mid)] for i in range(mid)]\n    B12 = [[B[i][j] for j in range(mid, n)] for i in range(mid)]\n    B21 = [[B[i][j] for j in range(mid)] for i in range(mid, n)]\n    B22 = [[B[i][j] for j in range(mid, n)] for i in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for j in range(mid)] for i in range(mid)], [[B11[i][j] + B22[i][j] for j in range(mid)] for i in range(mid)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for j in range(mid)] for i in range(mid)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for j in range(mid)] for i in range(mid)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for j in range(mid)] for i in range(mid)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for j in range(mid)] for i in range(mid)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for j in range(mid)] for i in range(mid)], [[B11[i][j] + B12[i][j] for j in range(mid)] for i in range(mid)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for j in range(mid)] for i in range(mid)], [[B21[i][j] + B22[i][j] for j in range(mid)] for i in range(mid)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for j in range(mid)] for i in range(mid)]\n    C12 = [[P3[i][j] + P5[i][j] for j in range(mid)] for i in range(mid)]\n    C21 = [[P2[i][j] + P4[i][j] for j in range(mid)] for i in range(mid)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for j in range(mid)] for i in range(mid)]\n    C = [[0] * n for _ in range(n)]\n    for i in range(mid):\n        for j in range(mid):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    vlx = len(A)\n    if vlx <= 1:\n        return [[A[0][0] * B[0][0]]]\n    mcbg = vlx // 2\n    A11 = [[A[i][j] for wdl in range(mcbg)] for jax in range(mcbg)]\n    A12 = [[A[i][j] for wdl in range(mid, n)] for jax in range(mcbg)]\n    A21 = [[A[i][j] for wdl in range(mcbg)] for jax in range(mid, n)]\n    A22 = [[A[i][j] for wdl in range(mid, n)] for jax in range(mid, n)]\n    B11 = [[B[i][j] for wdl in range(mcbg)] for jax in range(mcbg)]\n    B12 = [[B[i][j] for wdl in range(mid, n)] for jax in range(mcbg)]\n    B21 = [[B[i][j] for wdl in range(mcbg)] for jax in range(mid, n)]\n    B22 = [[B[i][j] for wdl in range(mid, n)] for jax in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for wdl in range(mcbg)] for jax in range(mcbg)], [[B11[i][j] + B22[i][j] for wdl in range(mcbg)] for jax in range(mcbg)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for wdl in range(mcbg)] for jax in range(mcbg)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for wdl in range(mcbg)] for jax in range(mcbg)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for wdl in range(mcbg)] for jax in range(mcbg)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for wdl in range(mcbg)] for jax in range(mcbg)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for wdl in range(mcbg)] for jax in range(mcbg)], [[B11[i][j] + B12[i][j] for wdl in range(mcbg)] for jax in range(mcbg)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for wdl in range(mcbg)] for jax in range(mcbg)], [[B21[i][j] + B22[i][j] for wdl in range(mcbg)] for jax in range(mcbg)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for wdl in range(mcbg)] for jax in range(mcbg)]\n    C12 = [[P3[i][j] + P5[i][j] for wdl in range(mcbg)] for jax in range(mcbg)]\n    C21 = [[P2[i][j] + P4[i][j] for wdl in range(mcbg)] for jax in range(mcbg)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for wdl in range(mcbg)] for jax in range(mcbg)]\n    C = [[0] * vlx for _ in range(vlx)]\n    for jax in range(mcbg):\n        for wdl in range(mcbg):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    cbw = len(A)\n    if cbw <= 1:\n        return [[A[0][0] * B[0][0]]]\n    fegy = cbw // 2\n    A11 = [[A[i][j] for hlq in range(fegy)] for krp in range(fegy)]\n    A12 = [[A[i][j] for hlq in range(mid, n)] for krp in range(fegy)]\n    A21 = [[A[i][j] for hlq in range(fegy)] for krp in range(mid, n)]\n    A22 = [[A[i][j] for hlq in range(mid, n)] for krp in range(mid, n)]\n    B11 = [[B[i][j] for hlq in range(fegy)] for krp in range(fegy)]\n    B12 = [[B[i][j] for hlq in range(mid, n)] for krp in range(fegy)]\n    B21 = [[B[i][j] for hlq in range(fegy)] for krp in range(mid, n)]\n    B22 = [[B[i][j] for hlq in range(mid, n)] for krp in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for hlq in range(fegy)] for krp in range(fegy)], [[B11[i][j] + B22[i][j] for hlq in range(fegy)] for krp in range(fegy)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for hlq in range(fegy)] for krp in range(fegy)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for hlq in range(fegy)] for krp in range(fegy)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for hlq in range(fegy)] for krp in range(fegy)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for hlq in range(fegy)] for krp in range(fegy)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for hlq in range(fegy)] for krp in range(fegy)], [[B11[i][j] + B12[i][j] for hlq in range(fegy)] for krp in range(fegy)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for hlq in range(fegy)] for krp in range(fegy)], [[B21[i][j] + B22[i][j] for hlq in range(fegy)] for krp in range(fegy)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for hlq in range(fegy)] for krp in range(fegy)]\n    C12 = [[P3[i][j] + P5[i][j] for hlq in range(fegy)] for krp in range(fegy)]\n    C21 = [[P2[i][j] + P4[i][j] for hlq in range(fegy)] for krp in range(fegy)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for hlq in range(fegy)] for krp in range(fegy)]\n    C = [[0] * cbw for _ in range(cbw)]\n    for krp in range(fegy):\n        for hlq in range(fegy):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    quq = len(A)\n    if quq <= 1:\n        return [[A[0][0] * B[0][0]]]\n    rrkw = quq // 2\n    A11 = [[A[i][j] for lag in range(rrkw)] for xbg in range(rrkw)]\n    A12 = [[A[i][j] for lag in range(mid, n)] for xbg in range(rrkw)]\n    A21 = [[A[i][j] for lag in range(rrkw)] for xbg in range(mid, n)]\n    A22 = [[A[i][j] for lag in range(mid, n)] for xbg in range(mid, n)]\n    B11 = [[B[i][j] for lag in range(rrkw)] for xbg in range(rrkw)]\n    B12 = [[B[i][j] for lag in range(mid, n)] for xbg in range(rrkw)]\n    B21 = [[B[i][j] for lag in range(rrkw)] for xbg in range(mid, n)]\n    B22 = [[B[i][j] for lag in range(mid, n)] for xbg in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for lag in range(rrkw)] for xbg in range(rrkw)], [[B11[i][j] + B22[i][j] for lag in range(rrkw)] for xbg in range(rrkw)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for lag in range(rrkw)] for xbg in range(rrkw)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for lag in range(rrkw)] for xbg in range(rrkw)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for lag in range(rrkw)] for xbg in range(rrkw)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for lag in range(rrkw)] for xbg in range(rrkw)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for lag in range(rrkw)] for xbg in range(rrkw)], [[B11[i][j] + B12[i][j] for lag in range(rrkw)] for xbg in range(rrkw)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for lag in range(rrkw)] for xbg in range(rrkw)], [[B21[i][j] + B22[i][j] for lag in range(rrkw)] for xbg in range(rrkw)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for lag in range(rrkw)] for xbg in range(rrkw)]\n    C12 = [[P3[i][j] + P5[i][j] for lag in range(rrkw)] for xbg in range(rrkw)]\n    C21 = [[P2[i][j] + P4[i][j] for lag in range(rrkw)] for xbg in range(rrkw)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for lag in range(rrkw)] for xbg in range(rrkw)]\n    C = [[0] * quq for _ in range(quq)]\n    for xbg in range(rrkw):\n        for lag in range(rrkw):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    rzv = len(A)\n    if rzv <= 1:\n        return [[A[0][0] * B[0][0]]]\n    pzyj = rzv // 2\n    A11 = [[A[i][j] for eqm in range(pzyj)] for ope in range(pzyj)]\n    A12 = [[A[i][j] for eqm in range(mid, n)] for ope in range(pzyj)]\n    A21 = [[A[i][j] for eqm in range(pzyj)] for ope in range(mid, n)]\n    A22 = [[A[i][j] for eqm in range(mid, n)] for ope in range(mid, n)]\n    B11 = [[B[i][j] for eqm in range(pzyj)] for ope in range(pzyj)]\n    B12 = [[B[i][j] for eqm in range(mid, n)] for ope in range(pzyj)]\n    B21 = [[B[i][j] for eqm in range(pzyj)] for ope in range(mid, n)]\n    B22 = [[B[i][j] for eqm in range(mid, n)] for ope in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for eqm in range(pzyj)] for ope in range(pzyj)], [[B11[i][j] + B22[i][j] for eqm in range(pzyj)] for ope in range(pzyj)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for eqm in range(pzyj)] for ope in range(pzyj)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for eqm in range(pzyj)] for ope in range(pzyj)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for eqm in range(pzyj)] for ope in range(pzyj)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for eqm in range(pzyj)] for ope in range(pzyj)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for eqm in range(pzyj)] for ope in range(pzyj)], [[B11[i][j] + B12[i][j] for eqm in range(pzyj)] for ope in range(pzyj)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for eqm in range(pzyj)] for ope in range(pzyj)], [[B21[i][j] + B22[i][j] for eqm in range(pzyj)] for ope in range(pzyj)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for eqm in range(pzyj)] for ope in range(pzyj)]\n    C12 = [[P3[i][j] + P5[i][j] for eqm in range(pzyj)] for ope in range(pzyj)]\n    C21 = [[P2[i][j] + P4[i][j] for eqm in range(pzyj)] for ope in range(pzyj)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for eqm in range(pzyj)] for ope in range(pzyj)]\n    C = [[0] * rzv for _ in range(rzv)]\n    for ope in range(pzyj):\n        for eqm in range(pzyj):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    qvs = len(A)\n    if qvs <= 1:\n        return [[A[0][0] * B[0][0]]]\n    rigd = qvs // 2\n    A11 = [[A[i][j] for tcp in range(rigd)] for iem in range(rigd)]\n    A12 = [[A[i][j] for tcp in range(mid, n)] for iem in range(rigd)]\n    A21 = [[A[i][j] for tcp in range(rigd)] for iem in range(mid, n)]\n    A22 = [[A[i][j] for tcp in range(mid, n)] for iem in range(mid, n)]\n    B11 = [[B[i][j] for tcp in range(rigd)] for iem in range(rigd)]\n    B12 = [[B[i][j] for tcp in range(mid, n)] for iem in range(rigd)]\n    B21 = [[B[i][j] for tcp in range(rigd)] for iem in range(mid, n)]\n    B22 = [[B[i][j] for tcp in range(mid, n)] for iem in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for tcp in range(rigd)] for iem in range(rigd)], [[B11[i][j] + B22[i][j] for tcp in range(rigd)] for iem in range(rigd)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for tcp in range(rigd)] for iem in range(rigd)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for tcp in range(rigd)] for iem in range(rigd)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for tcp in range(rigd)] for iem in range(rigd)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for tcp in range(rigd)] for iem in range(rigd)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for tcp in range(rigd)] for iem in range(rigd)], [[B11[i][j] + B12[i][j] for tcp in range(rigd)] for iem in range(rigd)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for tcp in range(rigd)] for iem in range(rigd)], [[B21[i][j] + B22[i][j] for tcp in range(rigd)] for iem in range(rigd)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for tcp in range(rigd)] for iem in range(rigd)]\n    C12 = [[P3[i][j] + P5[i][j] for tcp in range(rigd)] for iem in range(rigd)]\n    C21 = [[P2[i][j] + P4[i][j] for tcp in range(rigd)] for iem in range(rigd)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for tcp in range(rigd)] for iem in range(rigd)]\n    C = [[0] * qvs for _ in range(qvs)]\n    for iem in range(rigd):\n        for tcp in range(rigd):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    mml = len(A)\n    if mml <= 1:\n        return [[A[0][0] * B[0][0]]]\n    llmt = mml // 2\n    A11 = [[A[i][j] for ayf in range(llmt)] for gmf in range(llmt)]\n    A12 = [[A[i][j] for ayf in range(mid, n)] for gmf in range(llmt)]\n    A21 = [[A[i][j] for ayf in range(llmt)] for gmf in range(mid, n)]\n    A22 = [[A[i][j] for ayf in range(mid, n)] for gmf in range(mid, n)]\n    B11 = [[B[i][j] for ayf in range(llmt)] for gmf in range(llmt)]\n    B12 = [[B[i][j] for ayf in range(mid, n)] for gmf in range(llmt)]\n    B21 = [[B[i][j] for ayf in range(llmt)] for gmf in range(mid, n)]\n    B22 = [[B[i][j] for ayf in range(mid, n)] for gmf in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for ayf in range(llmt)] for gmf in range(llmt)], [[B11[i][j] + B22[i][j] for ayf in range(llmt)] for gmf in range(llmt)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for ayf in range(llmt)] for gmf in range(llmt)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for ayf in range(llmt)] for gmf in range(llmt)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for ayf in range(llmt)] for gmf in range(llmt)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for ayf in range(llmt)] for gmf in range(llmt)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for ayf in range(llmt)] for gmf in range(llmt)], [[B11[i][j] + B12[i][j] for ayf in range(llmt)] for gmf in range(llmt)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for ayf in range(llmt)] for gmf in range(llmt)], [[B21[i][j] + B22[i][j] for ayf in range(llmt)] for gmf in range(llmt)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for ayf in range(llmt)] for gmf in range(llmt)]\n    C12 = [[P3[i][j] + P5[i][j] for ayf in range(llmt)] for gmf in range(llmt)]\n    C21 = [[P2[i][j] + P4[i][j] for ayf in range(llmt)] for gmf in range(llmt)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for ayf in range(llmt)] for gmf in range(llmt)]\n    C = [[0] * mml for _ in range(mml)]\n    for gmf in range(llmt):\n        for ayf in range(llmt):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    kup = len(A)\n    if kup <= 1:\n        return [[A[0][0] * B[0][0]]]\n    cvym = kup // 2\n    A11 = [[A[i][j] for omr in range(cvym)] for qfl in range(cvym)]\n    A12 = [[A[i][j] for omr in range(mid, n)] for qfl in range(cvym)]\n    A21 = [[A[i][j] for omr in range(cvym)] for qfl in range(mid, n)]\n    A22 = [[A[i][j] for omr in range(mid, n)] for qfl in range(mid, n)]\n    B11 = [[B[i][j] for omr in range(cvym)] for qfl in range(cvym)]\n    B12 = [[B[i][j] for omr in range(mid, n)] for qfl in range(cvym)]\n    B21 = [[B[i][j] for omr in range(cvym)] for qfl in range(mid, n)]\n    B22 = [[B[i][j] for omr in range(mid, n)] for qfl in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for omr in range(cvym)] for qfl in range(cvym)], [[B11[i][j] + B22[i][j] for omr in range(cvym)] for qfl in range(cvym)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for omr in range(cvym)] for qfl in range(cvym)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for omr in range(cvym)] for qfl in range(cvym)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for omr in range(cvym)] for qfl in range(cvym)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for omr in range(cvym)] for qfl in range(cvym)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for omr in range(cvym)] for qfl in range(cvym)], [[B11[i][j] + B12[i][j] for omr in range(cvym)] for qfl in range(cvym)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for omr in range(cvym)] for qfl in range(cvym)], [[B21[i][j] + B22[i][j] for omr in range(cvym)] for qfl in range(cvym)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for omr in range(cvym)] for qfl in range(cvym)]\n    C12 = [[P3[i][j] + P5[i][j] for omr in range(cvym)] for qfl in range(cvym)]\n    C21 = [[P2[i][j] + P4[i][j] for omr in range(cvym)] for qfl in range(cvym)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for omr in range(cvym)] for qfl in range(cvym)]\n    C = [[0] * kup for _ in range(kup)]\n    for qfl in range(cvym):\n        for omr in range(cvym):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    scp = len(A)\n    if scp <= 1:\n        return [[A[0][0] * B[0][0]]]\n    bqng = scp // 2\n    A11 = [[A[i][j] for xue in range(bqng)] for zfr in range(bqng)]\n    A12 = [[A[i][j] for xue in range(mid, n)] for zfr in range(bqng)]\n    A21 = [[A[i][j] for xue in range(bqng)] for zfr in range(mid, n)]\n    A22 = [[A[i][j] for xue in range(mid, n)] for zfr in range(mid, n)]\n    B11 = [[B[i][j] for xue in range(bqng)] for zfr in range(bqng)]\n    B12 = [[B[i][j] for xue in range(mid, n)] for zfr in range(bqng)]\n    B21 = [[B[i][j] for xue in range(bqng)] for zfr in range(mid, n)]\n    B22 = [[B[i][j] for xue in range(mid, n)] for zfr in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for xue in range(bqng)] for zfr in range(bqng)], [[B11[i][j] + B22[i][j] for xue in range(bqng)] for zfr in range(bqng)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for xue in range(bqng)] for zfr in range(bqng)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for xue in range(bqng)] for zfr in range(bqng)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for xue in range(bqng)] for zfr in range(bqng)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for xue in range(bqng)] for zfr in range(bqng)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for xue in range(bqng)] for zfr in range(bqng)], [[B11[i][j] + B12[i][j] for xue in range(bqng)] for zfr in range(bqng)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for xue in range(bqng)] for zfr in range(bqng)], [[B21[i][j] + B22[i][j] for xue in range(bqng)] for zfr in range(bqng)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for xue in range(bqng)] for zfr in range(bqng)]\n    C12 = [[P3[i][j] + P5[i][j] for xue in range(bqng)] for zfr in range(bqng)]\n    C21 = [[P2[i][j] + P4[i][j] for xue in range(bqng)] for zfr in range(bqng)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for xue in range(bqng)] for zfr in range(bqng)]\n    C = [[0] * scp for _ in range(scp)]\n    for zfr in range(bqng):\n        for xue in range(bqng):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    xuf = len(A)\n    if xuf <= 1:\n        return [[A[0][0] * B[0][0]]]\n    vweo = xuf // 2\n    A11 = [[A[i][j] for ekt in range(vweo)] for dhb in range(vweo)]\n    A12 = [[A[i][j] for ekt in range(mid, n)] for dhb in range(vweo)]\n    A21 = [[A[i][j] for ekt in range(vweo)] for dhb in range(mid, n)]\n    A22 = [[A[i][j] for ekt in range(mid, n)] for dhb in range(mid, n)]\n    B11 = [[B[i][j] for ekt in range(vweo)] for dhb in range(vweo)]\n    B12 = [[B[i][j] for ekt in range(mid, n)] for dhb in range(vweo)]\n    B21 = [[B[i][j] for ekt in range(vweo)] for dhb in range(mid, n)]\n    B22 = [[B[i][j] for ekt in range(mid, n)] for dhb in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for ekt in range(vweo)] for dhb in range(vweo)], [[B11[i][j] + B22[i][j] for ekt in range(vweo)] for dhb in range(vweo)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for ekt in range(vweo)] for dhb in range(vweo)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for ekt in range(vweo)] for dhb in range(vweo)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for ekt in range(vweo)] for dhb in range(vweo)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for ekt in range(vweo)] for dhb in range(vweo)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for ekt in range(vweo)] for dhb in range(vweo)], [[B11[i][j] + B12[i][j] for ekt in range(vweo)] for dhb in range(vweo)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for ekt in range(vweo)] for dhb in range(vweo)], [[B21[i][j] + B22[i][j] for ekt in range(vweo)] for dhb in range(vweo)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for ekt in range(vweo)] for dhb in range(vweo)]\n    C12 = [[P3[i][j] + P5[i][j] for ekt in range(vweo)] for dhb in range(vweo)]\n    C21 = [[P2[i][j] + P4[i][j] for ekt in range(vweo)] for dhb in range(vweo)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for ekt in range(vweo)] for dhb in range(vweo)]\n    C = [[0] * xuf for _ in range(xuf)]\n    for dhb in range(vweo):\n        for ekt in range(vweo):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    yac = len(A)\n    if yac <= 1:\n        return [[A[0][0] * B[0][0]]]\n    nxsv = yac // 2\n    A11 = [[A[i][j] for efa in range(nxsv)] for vtr in range(nxsv)]\n    A12 = [[A[i][j] for efa in range(mid, n)] for vtr in range(nxsv)]\n    A21 = [[A[i][j] for efa in range(nxsv)] for vtr in range(mid, n)]\n    A22 = [[A[i][j] for efa in range(mid, n)] for vtr in range(mid, n)]\n    B11 = [[B[i][j] for efa in range(nxsv)] for vtr in range(nxsv)]\n    B12 = [[B[i][j] for efa in range(mid, n)] for vtr in range(nxsv)]\n    B21 = [[B[i][j] for efa in range(nxsv)] for vtr in range(mid, n)]\n    B22 = [[B[i][j] for efa in range(mid, n)] for vtr in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for efa in range(nxsv)] for vtr in range(nxsv)], [[B11[i][j] + B22[i][j] for efa in range(nxsv)] for vtr in range(nxsv)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for efa in range(nxsv)] for vtr in range(nxsv)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for efa in range(nxsv)] for vtr in range(nxsv)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for efa in range(nxsv)] for vtr in range(nxsv)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for efa in range(nxsv)] for vtr in range(nxsv)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for efa in range(nxsv)] for vtr in range(nxsv)], [[B11[i][j] + B12[i][j] for efa in range(nxsv)] for vtr in range(nxsv)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for efa in range(nxsv)] for vtr in range(nxsv)], [[B21[i][j] + B22[i][j] for efa in range(nxsv)] for vtr in range(nxsv)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for efa in range(nxsv)] for vtr in range(nxsv)]\n    C12 = [[P3[i][j] + P5[i][j] for efa in range(nxsv)] for vtr in range(nxsv)]\n    C21 = [[P2[i][j] + P4[i][j] for efa in range(nxsv)] for vtr in range(nxsv)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for efa in range(nxsv)] for vtr in range(nxsv)]\n    C = [[0] * yac for _ in range(yac)]\n    for vtr in range(nxsv):\n        for efa in range(nxsv):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    xrf = len(A)\n    if xrf <= 1:\n        return [[A[0][0] * B[0][0]]]\n    hrpj = xrf // 2\n    A11 = [[A[i][j] for qnw in range(hrpj)] for htv in range(hrpj)]\n    A12 = [[A[i][j] for qnw in range(mid, n)] for htv in range(hrpj)]\n    A21 = [[A[i][j] for qnw in range(hrpj)] for htv in range(mid, n)]\n    A22 = [[A[i][j] for qnw in range(mid, n)] for htv in range(mid, n)]\n    B11 = [[B[i][j] for qnw in range(hrpj)] for htv in range(hrpj)]\n    B12 = [[B[i][j] for qnw in range(mid, n)] for htv in range(hrpj)]\n    B21 = [[B[i][j] for qnw in range(hrpj)] for htv in range(mid, n)]\n    B22 = [[B[i][j] for qnw in range(mid, n)] for htv in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for qnw in range(hrpj)] for htv in range(hrpj)], [[B11[i][j] + B22[i][j] for qnw in range(hrpj)] for htv in range(hrpj)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for qnw in range(hrpj)] for htv in range(hrpj)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for qnw in range(hrpj)] for htv in range(hrpj)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for qnw in range(hrpj)] for htv in range(hrpj)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for qnw in range(hrpj)] for htv in range(hrpj)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for qnw in range(hrpj)] for htv in range(hrpj)], [[B11[i][j] + B12[i][j] for qnw in range(hrpj)] for htv in range(hrpj)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for qnw in range(hrpj)] for htv in range(hrpj)], [[B21[i][j] + B22[i][j] for qnw in range(hrpj)] for htv in range(hrpj)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for qnw in range(hrpj)] for htv in range(hrpj)]\n    C12 = [[P3[i][j] + P5[i][j] for qnw in range(hrpj)] for htv in range(hrpj)]\n    C21 = [[P2[i][j] + P4[i][j] for qnw in range(hrpj)] for htv in range(hrpj)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for qnw in range(hrpj)] for htv in range(hrpj)]\n    C = [[0] * xrf for _ in range(xrf)]\n    for htv in range(hrpj):\n        for qnw in range(hrpj):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    ywp = len(A)\n    if ywp <= 1:\n        return [[A[0][0] * B[0][0]]]\n    wmxl = ywp // 2\n    A11 = [[A[i][j] for scq in range(wmxl)] for eig in range(wmxl)]\n    A12 = [[A[i][j] for scq in range(mid, n)] for eig in range(wmxl)]\n    A21 = [[A[i][j] for scq in range(wmxl)] for eig in range(mid, n)]\n    A22 = [[A[i][j] for scq in range(mid, n)] for eig in range(mid, n)]\n    B11 = [[B[i][j] for scq in range(wmxl)] for eig in range(wmxl)]\n    B12 = [[B[i][j] for scq in range(mid, n)] for eig in range(wmxl)]\n    B21 = [[B[i][j] for scq in range(wmxl)] for eig in range(mid, n)]\n    B22 = [[B[i][j] for scq in range(mid, n)] for eig in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for scq in range(wmxl)] for eig in range(wmxl)], [[B11[i][j] + B22[i][j] for scq in range(wmxl)] for eig in range(wmxl)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for scq in range(wmxl)] for eig in range(wmxl)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for scq in range(wmxl)] for eig in range(wmxl)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for scq in range(wmxl)] for eig in range(wmxl)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for scq in range(wmxl)] for eig in range(wmxl)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for scq in range(wmxl)] for eig in range(wmxl)], [[B11[i][j] + B12[i][j] for scq in range(wmxl)] for eig in range(wmxl)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for scq in range(wmxl)] for eig in range(wmxl)], [[B21[i][j] + B22[i][j] for scq in range(wmxl)] for eig in range(wmxl)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for scq in range(wmxl)] for eig in range(wmxl)]\n    C12 = [[P3[i][j] + P5[i][j] for scq in range(wmxl)] for eig in range(wmxl)]\n    C21 = [[P2[i][j] + P4[i][j] for scq in range(wmxl)] for eig in range(wmxl)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for scq in range(wmxl)] for eig in range(wmxl)]\n    C = [[0] * ywp for _ in range(ywp)]\n    for eig in range(wmxl):\n        for scq in range(wmxl):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    qdu = len(A)\n    if qdu <= 1:\n        return [[A[0][0] * B[0][0]]]\n    royh = qdu // 2\n    A11 = [[A[i][j] for tme in range(royh)] for oec in range(royh)]\n    A12 = [[A[i][j] for tme in range(mid, n)] for oec in range(royh)]\n    A21 = [[A[i][j] for tme in range(royh)] for oec in range(mid, n)]\n    A22 = [[A[i][j] for tme in range(mid, n)] for oec in range(mid, n)]\n    B11 = [[B[i][j] for tme in range(royh)] for oec in range(royh)]\n    B12 = [[B[i][j] for tme in range(mid, n)] for oec in range(royh)]\n    B21 = [[B[i][j] for tme in range(royh)] for oec in range(mid, n)]\n    B22 = [[B[i][j] for tme in range(mid, n)] for oec in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for tme in range(royh)] for oec in range(royh)], [[B11[i][j] + B22[i][j] for tme in range(royh)] for oec in range(royh)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for tme in range(royh)] for oec in range(royh)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for tme in range(royh)] for oec in range(royh)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for tme in range(royh)] for oec in range(royh)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for tme in range(royh)] for oec in range(royh)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for tme in range(royh)] for oec in range(royh)], [[B11[i][j] + B12[i][j] for tme in range(royh)] for oec in range(royh)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for tme in range(royh)] for oec in range(royh)], [[B21[i][j] + B22[i][j] for tme in range(royh)] for oec in range(royh)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for tme in range(royh)] for oec in range(royh)]\n    C12 = [[P3[i][j] + P5[i][j] for tme in range(royh)] for oec in range(royh)]\n    C21 = [[P2[i][j] + P4[i][j] for tme in range(royh)] for oec in range(royh)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for tme in range(royh)] for oec in range(royh)]\n    C = [[0] * qdu for _ in range(qdu)]\n    for oec in range(royh):\n        for tme in range(royh):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    vpc = len(A)\n    if vpc <= 1:\n        return [[A[0][0] * B[0][0]]]\n    pffo = vpc // 2\n    A11 = [[A[i][j] for txp in range(pffo)] for lcz in range(pffo)]\n    A12 = [[A[i][j] for txp in range(mid, n)] for lcz in range(pffo)]\n    A21 = [[A[i][j] for txp in range(pffo)] for lcz in range(mid, n)]\n    A22 = [[A[i][j] for txp in range(mid, n)] for lcz in range(mid, n)]\n    B11 = [[B[i][j] for txp in range(pffo)] for lcz in range(pffo)]\n    B12 = [[B[i][j] for txp in range(mid, n)] for lcz in range(pffo)]\n    B21 = [[B[i][j] for txp in range(pffo)] for lcz in range(mid, n)]\n    B22 = [[B[i][j] for txp in range(mid, n)] for lcz in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for txp in range(pffo)] for lcz in range(pffo)], [[B11[i][j] + B22[i][j] for txp in range(pffo)] for lcz in range(pffo)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for txp in range(pffo)] for lcz in range(pffo)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for txp in range(pffo)] for lcz in range(pffo)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for txp in range(pffo)] for lcz in range(pffo)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for txp in range(pffo)] for lcz in range(pffo)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for txp in range(pffo)] for lcz in range(pffo)], [[B11[i][j] + B12[i][j] for txp in range(pffo)] for lcz in range(pffo)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for txp in range(pffo)] for lcz in range(pffo)], [[B21[i][j] + B22[i][j] for txp in range(pffo)] for lcz in range(pffo)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for txp in range(pffo)] for lcz in range(pffo)]\n    C12 = [[P3[i][j] + P5[i][j] for txp in range(pffo)] for lcz in range(pffo)]\n    C21 = [[P2[i][j] + P4[i][j] for txp in range(pffo)] for lcz in range(pffo)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for txp in range(pffo)] for lcz in range(pffo)]\n    C = [[0] * vpc for _ in range(vpc)]\n    for lcz in range(pffo):\n        for txp in range(pffo):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    mli = len(A)\n    if mli <= 1:\n        return [[A[0][0] * B[0][0]]]\n    vklt = mli // 2\n    A11 = [[A[i][j] for djd in range(vklt)] for ifk in range(vklt)]\n    A12 = [[A[i][j] for djd in range(mid, n)] for ifk in range(vklt)]\n    A21 = [[A[i][j] for djd in range(vklt)] for ifk in range(mid, n)]\n    A22 = [[A[i][j] for djd in range(mid, n)] for ifk in range(mid, n)]\n    B11 = [[B[i][j] for djd in range(vklt)] for ifk in range(vklt)]\n    B12 = [[B[i][j] for djd in range(mid, n)] for ifk in range(vklt)]\n    B21 = [[B[i][j] for djd in range(vklt)] for ifk in range(mid, n)]\n    B22 = [[B[i][j] for djd in range(mid, n)] for ifk in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for djd in range(vklt)] for ifk in range(vklt)], [[B11[i][j] + B22[i][j] for djd in range(vklt)] for ifk in range(vklt)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for djd in range(vklt)] for ifk in range(vklt)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for djd in range(vklt)] for ifk in range(vklt)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for djd in range(vklt)] for ifk in range(vklt)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for djd in range(vklt)] for ifk in range(vklt)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for djd in range(vklt)] for ifk in range(vklt)], [[B11[i][j] + B12[i][j] for djd in range(vklt)] for ifk in range(vklt)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for djd in range(vklt)] for ifk in range(vklt)], [[B21[i][j] + B22[i][j] for djd in range(vklt)] for ifk in range(vklt)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for djd in range(vklt)] for ifk in range(vklt)]\n    C12 = [[P3[i][j] + P5[i][j] for djd in range(vklt)] for ifk in range(vklt)]\n    C21 = [[P2[i][j] + P4[i][j] for djd in range(vklt)] for ifk in range(vklt)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for djd in range(vklt)] for ifk in range(vklt)]\n    C = [[0] * mli for _ in range(mli)]\n    for ifk in range(vklt):\n        for djd in range(vklt):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    ppe = len(A)\n    if ppe <= 1:\n        return [[A[0][0] * B[0][0]]]\n    bael = ppe // 2\n    A11 = [[A[i][j] for nkp in range(bael)] for szc in range(bael)]\n    A12 = [[A[i][j] for nkp in range(mid, n)] for szc in range(bael)]\n    A21 = [[A[i][j] for nkp in range(bael)] for szc in range(mid, n)]\n    A22 = [[A[i][j] for nkp in range(mid, n)] for szc in range(mid, n)]\n    B11 = [[B[i][j] for nkp in range(bael)] for szc in range(bael)]\n    B12 = [[B[i][j] for nkp in range(mid, n)] for szc in range(bael)]\n    B21 = [[B[i][j] for nkp in range(bael)] for szc in range(mid, n)]\n    B22 = [[B[i][j] for nkp in range(mid, n)] for szc in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for nkp in range(bael)] for szc in range(bael)], [[B11[i][j] + B22[i][j] for nkp in range(bael)] for szc in range(bael)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for nkp in range(bael)] for szc in range(bael)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for nkp in range(bael)] for szc in range(bael)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for nkp in range(bael)] for szc in range(bael)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for nkp in range(bael)] for szc in range(bael)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for nkp in range(bael)] for szc in range(bael)], [[B11[i][j] + B12[i][j] for nkp in range(bael)] for szc in range(bael)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for nkp in range(bael)] for szc in range(bael)], [[B21[i][j] + B22[i][j] for nkp in range(bael)] for szc in range(bael)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for nkp in range(bael)] for szc in range(bael)]\n    C12 = [[P3[i][j] + P5[i][j] for nkp in range(bael)] for szc in range(bael)]\n    C21 = [[P2[i][j] + P4[i][j] for nkp in range(bael)] for szc in range(bael)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for nkp in range(bael)] for szc in range(bael)]\n    C = [[0] * ppe for _ in range(ppe)]\n    for szc in range(bael):\n        for nkp in range(bael):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    pva = len(A)\n    if pva <= 1:\n        return [[A[0][0] * B[0][0]]]\n    pqby = pva // 2\n    A11 = [[A[i][j] for gat in range(pqby)] for sal in range(pqby)]\n    A12 = [[A[i][j] for gat in range(mid, n)] for sal in range(pqby)]\n    A21 = [[A[i][j] for gat in range(pqby)] for sal in range(mid, n)]\n    A22 = [[A[i][j] for gat in range(mid, n)] for sal in range(mid, n)]\n    B11 = [[B[i][j] for gat in range(pqby)] for sal in range(pqby)]\n    B12 = [[B[i][j] for gat in range(mid, n)] for sal in range(pqby)]\n    B21 = [[B[i][j] for gat in range(pqby)] for sal in range(mid, n)]\n    B22 = [[B[i][j] for gat in range(mid, n)] for sal in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for gat in range(pqby)] for sal in range(pqby)], [[B11[i][j] + B22[i][j] for gat in range(pqby)] for sal in range(pqby)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for gat in range(pqby)] for sal in range(pqby)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for gat in range(pqby)] for sal in range(pqby)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for gat in range(pqby)] for sal in range(pqby)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for gat in range(pqby)] for sal in range(pqby)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for gat in range(pqby)] for sal in range(pqby)], [[B11[i][j] + B12[i][j] for gat in range(pqby)] for sal in range(pqby)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for gat in range(pqby)] for sal in range(pqby)], [[B21[i][j] + B22[i][j] for gat in range(pqby)] for sal in range(pqby)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for gat in range(pqby)] for sal in range(pqby)]\n    C12 = [[P3[i][j] + P5[i][j] for gat in range(pqby)] for sal in range(pqby)]\n    C21 = [[P2[i][j] + P4[i][j] for gat in range(pqby)] for sal in range(pqby)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for gat in range(pqby)] for sal in range(pqby)]\n    C = [[0] * pva for _ in range(pva)]\n    for sal in range(pqby):\n        for gat in range(pqby):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    fdd = len(A)\n    if fdd <= 1:\n        return [[A[0][0] * B[0][0]]]\n    dpno = fdd // 2\n    A11 = [[A[i][j] for mqg in range(dpno)] for tbw in range(dpno)]\n    A12 = [[A[i][j] for mqg in range(mid, n)] for tbw in range(dpno)]\n    A21 = [[A[i][j] for mqg in range(dpno)] for tbw in range(mid, n)]\n    A22 = [[A[i][j] for mqg in range(mid, n)] for tbw in range(mid, n)]\n    B11 = [[B[i][j] for mqg in range(dpno)] for tbw in range(dpno)]\n    B12 = [[B[i][j] for mqg in range(mid, n)] for tbw in range(dpno)]\n    B21 = [[B[i][j] for mqg in range(dpno)] for tbw in range(mid, n)]\n    B22 = [[B[i][j] for mqg in range(mid, n)] for tbw in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for mqg in range(dpno)] for tbw in range(dpno)], [[B11[i][j] + B22[i][j] for mqg in range(dpno)] for tbw in range(dpno)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for mqg in range(dpno)] for tbw in range(dpno)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for mqg in range(dpno)] for tbw in range(dpno)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for mqg in range(dpno)] for tbw in range(dpno)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for mqg in range(dpno)] for tbw in range(dpno)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for mqg in range(dpno)] for tbw in range(dpno)], [[B11[i][j] + B12[i][j] for mqg in range(dpno)] for tbw in range(dpno)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for mqg in range(dpno)] for tbw in range(dpno)], [[B21[i][j] + B22[i][j] for mqg in range(dpno)] for tbw in range(dpno)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for mqg in range(dpno)] for tbw in range(dpno)]\n    C12 = [[P3[i][j] + P5[i][j] for mqg in range(dpno)] for tbw in range(dpno)]\n    C21 = [[P2[i][j] + P4[i][j] for mqg in range(dpno)] for tbw in range(dpno)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for mqg in range(dpno)] for tbw in range(dpno)]\n    C = [[0] * fdd for _ in range(fdd)]\n    for tbw in range(dpno):\n        for mqg in range(dpno):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    wqt = len(A)\n    if wqt <= 1:\n        return [[A[0][0] * B[0][0]]]\n    gpzk = wqt // 2\n    A11 = [[A[i][j] for etr in range(gpzk)] for bpt in range(gpzk)]\n    A12 = [[A[i][j] for etr in range(mid, n)] for bpt in range(gpzk)]\n    A21 = [[A[i][j] for etr in range(gpzk)] for bpt in range(mid, n)]\n    A22 = [[A[i][j] for etr in range(mid, n)] for bpt in range(mid, n)]\n    B11 = [[B[i][j] for etr in range(gpzk)] for bpt in range(gpzk)]\n    B12 = [[B[i][j] for etr in range(mid, n)] for bpt in range(gpzk)]\n    B21 = [[B[i][j] for etr in range(gpzk)] for bpt in range(mid, n)]\n    B22 = [[B[i][j] for etr in range(mid, n)] for bpt in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for etr in range(gpzk)] for bpt in range(gpzk)], [[B11[i][j] + B22[i][j] for etr in range(gpzk)] for bpt in range(gpzk)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for etr in range(gpzk)] for bpt in range(gpzk)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for etr in range(gpzk)] for bpt in range(gpzk)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for etr in range(gpzk)] for bpt in range(gpzk)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for etr in range(gpzk)] for bpt in range(gpzk)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for etr in range(gpzk)] for bpt in range(gpzk)], [[B11[i][j] + B12[i][j] for etr in range(gpzk)] for bpt in range(gpzk)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for etr in range(gpzk)] for bpt in range(gpzk)], [[B21[i][j] + B22[i][j] for etr in range(gpzk)] for bpt in range(gpzk)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for etr in range(gpzk)] for bpt in range(gpzk)]\n    C12 = [[P3[i][j] + P5[i][j] for etr in range(gpzk)] for bpt in range(gpzk)]\n    C21 = [[P2[i][j] + P4[i][j] for etr in range(gpzk)] for bpt in range(gpzk)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for etr in range(gpzk)] for bpt in range(gpzk)]\n    C = [[0] * wqt for _ in range(wqt)]\n    for bpt in range(gpzk):\n        for etr in range(gpzk):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    aln = len(A)\n    if aln <= 1:\n        return [[A[0][0] * B[0][0]]]\n    hvlj = aln // 2\n    A11 = [[A[i][j] for ysv in range(hvlj)] for jxk in range(hvlj)]\n    A12 = [[A[i][j] for ysv in range(mid, n)] for jxk in range(hvlj)]\n    A21 = [[A[i][j] for ysv in range(hvlj)] for jxk in range(mid, n)]\n    A22 = [[A[i][j] for ysv in range(mid, n)] for jxk in range(mid, n)]\n    B11 = [[B[i][j] for ysv in range(hvlj)] for jxk in range(hvlj)]\n    B12 = [[B[i][j] for ysv in range(mid, n)] for jxk in range(hvlj)]\n    B21 = [[B[i][j] for ysv in range(hvlj)] for jxk in range(mid, n)]\n    B22 = [[B[i][j] for ysv in range(mid, n)] for jxk in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for ysv in range(hvlj)] for jxk in range(hvlj)], [[B11[i][j] + B22[i][j] for ysv in range(hvlj)] for jxk in range(hvlj)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for ysv in range(hvlj)] for jxk in range(hvlj)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for ysv in range(hvlj)] for jxk in range(hvlj)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for ysv in range(hvlj)] for jxk in range(hvlj)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for ysv in range(hvlj)] for jxk in range(hvlj)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for ysv in range(hvlj)] for jxk in range(hvlj)], [[B11[i][j] + B12[i][j] for ysv in range(hvlj)] for jxk in range(hvlj)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for ysv in range(hvlj)] for jxk in range(hvlj)], [[B21[i][j] + B22[i][j] for ysv in range(hvlj)] for jxk in range(hvlj)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for ysv in range(hvlj)] for jxk in range(hvlj)]\n    C12 = [[P3[i][j] + P5[i][j] for ysv in range(hvlj)] for jxk in range(hvlj)]\n    C21 = [[P2[i][j] + P4[i][j] for ysv in range(hvlj)] for jxk in range(hvlj)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for ysv in range(hvlj)] for jxk in range(hvlj)]\n    C = [[0] * aln for _ in range(aln)]\n    for jxk in range(hvlj):\n        for ysv in range(hvlj):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    zqv = len(A)\n    if zqv <= 1:\n        return [[A[0][0] * B[0][0]]]\n    thuj = zqv // 2\n    A11 = [[A[i][j] for rjt in range(thuj)] for mxa in range(thuj)]\n    A12 = [[A[i][j] for rjt in range(mid, n)] for mxa in range(thuj)]\n    A21 = [[A[i][j] for rjt in range(thuj)] for mxa in range(mid, n)]\n    A22 = [[A[i][j] for rjt in range(mid, n)] for mxa in range(mid, n)]\n    B11 = [[B[i][j] for rjt in range(thuj)] for mxa in range(thuj)]\n    B12 = [[B[i][j] for rjt in range(mid, n)] for mxa in range(thuj)]\n    B21 = [[B[i][j] for rjt in range(thuj)] for mxa in range(mid, n)]\n    B22 = [[B[i][j] for rjt in range(mid, n)] for mxa in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for rjt in range(thuj)] for mxa in range(thuj)], [[B11[i][j] + B22[i][j] for rjt in range(thuj)] for mxa in range(thuj)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for rjt in range(thuj)] for mxa in range(thuj)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for rjt in range(thuj)] for mxa in range(thuj)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for rjt in range(thuj)] for mxa in range(thuj)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for rjt in range(thuj)] for mxa in range(thuj)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for rjt in range(thuj)] for mxa in range(thuj)], [[B11[i][j] + B12[i][j] for rjt in range(thuj)] for mxa in range(thuj)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for rjt in range(thuj)] for mxa in range(thuj)], [[B21[i][j] + B22[i][j] for rjt in range(thuj)] for mxa in range(thuj)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for rjt in range(thuj)] for mxa in range(thuj)]\n    C12 = [[P3[i][j] + P5[i][j] for rjt in range(thuj)] for mxa in range(thuj)]\n    C21 = [[P2[i][j] + P4[i][j] for rjt in range(thuj)] for mxa in range(thuj)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for rjt in range(thuj)] for mxa in range(thuj)]\n    C = [[0] * zqv for _ in range(zqv)]\n    for mxa in range(thuj):\n        for rjt in range(thuj):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    wgl = len(A)\n    if wgl <= 1:\n        return [[A[0][0] * B[0][0]]]\n    xwpr = wgl // 2\n    A11 = [[A[i][j] for mzx in range(xwpr)] for bqj in range(xwpr)]\n    A12 = [[A[i][j] for mzx in range(mid, n)] for bqj in range(xwpr)]\n    A21 = [[A[i][j] for mzx in range(xwpr)] for bqj in range(mid, n)]\n    A22 = [[A[i][j] for mzx in range(mid, n)] for bqj in range(mid, n)]\n    B11 = [[B[i][j] for mzx in range(xwpr)] for bqj in range(xwpr)]\n    B12 = [[B[i][j] for mzx in range(mid, n)] for bqj in range(xwpr)]\n    B21 = [[B[i][j] for mzx in range(xwpr)] for bqj in range(mid, n)]\n    B22 = [[B[i][j] for mzx in range(mid, n)] for bqj in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for mzx in range(xwpr)] for bqj in range(xwpr)], [[B11[i][j] + B22[i][j] for mzx in range(xwpr)] for bqj in range(xwpr)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for mzx in range(xwpr)] for bqj in range(xwpr)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for mzx in range(xwpr)] for bqj in range(xwpr)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for mzx in range(xwpr)] for bqj in range(xwpr)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for mzx in range(xwpr)] for bqj in range(xwpr)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for mzx in range(xwpr)] for bqj in range(xwpr)], [[B11[i][j] + B12[i][j] for mzx in range(xwpr)] for bqj in range(xwpr)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for mzx in range(xwpr)] for bqj in range(xwpr)], [[B21[i][j] + B22[i][j] for mzx in range(xwpr)] for bqj in range(xwpr)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for mzx in range(xwpr)] for bqj in range(xwpr)]\n    C12 = [[P3[i][j] + P5[i][j] for mzx in range(xwpr)] for bqj in range(xwpr)]\n    C21 = [[P2[i][j] + P4[i][j] for mzx in range(xwpr)] for bqj in range(xwpr)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for mzx in range(xwpr)] for bqj in range(xwpr)]\n    C = [[0] * wgl for _ in range(wgl)]\n    for bqj in range(xwpr):\n        for mzx in range(xwpr):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    gys = len(A)\n    if gys <= 1:\n        return [[A[0][0] * B[0][0]]]\n    xtox = gys // 2\n    A11 = [[A[i][j] for odv in range(xtox)] for ayw in range(xtox)]\n    A12 = [[A[i][j] for odv in range(mid, n)] for ayw in range(xtox)]\n    A21 = [[A[i][j] for odv in range(xtox)] for ayw in range(mid, n)]\n    A22 = [[A[i][j] for odv in range(mid, n)] for ayw in range(mid, n)]\n    B11 = [[B[i][j] for odv in range(xtox)] for ayw in range(xtox)]\n    B12 = [[B[i][j] for odv in range(mid, n)] for ayw in range(xtox)]\n    B21 = [[B[i][j] for odv in range(xtox)] for ayw in range(mid, n)]\n    B22 = [[B[i][j] for odv in range(mid, n)] for ayw in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for odv in range(xtox)] for ayw in range(xtox)], [[B11[i][j] + B22[i][j] for odv in range(xtox)] for ayw in range(xtox)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for odv in range(xtox)] for ayw in range(xtox)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for odv in range(xtox)] for ayw in range(xtox)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for odv in range(xtox)] for ayw in range(xtox)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for odv in range(xtox)] for ayw in range(xtox)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for odv in range(xtox)] for ayw in range(xtox)], [[B11[i][j] + B12[i][j] for odv in range(xtox)] for ayw in range(xtox)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for odv in range(xtox)] for ayw in range(xtox)], [[B21[i][j] + B22[i][j] for odv in range(xtox)] for ayw in range(xtox)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for odv in range(xtox)] for ayw in range(xtox)]\n    C12 = [[P3[i][j] + P5[i][j] for odv in range(xtox)] for ayw in range(xtox)]\n    C21 = [[P2[i][j] + P4[i][j] for odv in range(xtox)] for ayw in range(xtox)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for odv in range(xtox)] for ayw in range(xtox)]\n    C = [[0] * gys for _ in range(gys)]\n    for ayw in range(xtox):\n        for odv in range(xtox):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    dga = len(A)\n    if dga <= 1:\n        return [[A[0][0] * B[0][0]]]\n    yqws = dga // 2\n    A11 = [[A[i][j] for pio in range(yqws)] for ozw in range(yqws)]\n    A12 = [[A[i][j] for pio in range(mid, n)] for ozw in range(yqws)]\n    A21 = [[A[i][j] for pio in range(yqws)] for ozw in range(mid, n)]\n    A22 = [[A[i][j] for pio in range(mid, n)] for ozw in range(mid, n)]\n    B11 = [[B[i][j] for pio in range(yqws)] for ozw in range(yqws)]\n    B12 = [[B[i][j] for pio in range(mid, n)] for ozw in range(yqws)]\n    B21 = [[B[i][j] for pio in range(yqws)] for ozw in range(mid, n)]\n    B22 = [[B[i][j] for pio in range(mid, n)] for ozw in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for pio in range(yqws)] for ozw in range(yqws)], [[B11[i][j] + B22[i][j] for pio in range(yqws)] for ozw in range(yqws)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for pio in range(yqws)] for ozw in range(yqws)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for pio in range(yqws)] for ozw in range(yqws)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for pio in range(yqws)] for ozw in range(yqws)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for pio in range(yqws)] for ozw in range(yqws)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for pio in range(yqws)] for ozw in range(yqws)], [[B11[i][j] + B12[i][j] for pio in range(yqws)] for ozw in range(yqws)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for pio in range(yqws)] for ozw in range(yqws)], [[B21[i][j] + B22[i][j] for pio in range(yqws)] for ozw in range(yqws)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for pio in range(yqws)] for ozw in range(yqws)]\n    C12 = [[P3[i][j] + P5[i][j] for pio in range(yqws)] for ozw in range(yqws)]\n    C21 = [[P2[i][j] + P4[i][j] for pio in range(yqws)] for ozw in range(yqws)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for pio in range(yqws)] for ozw in range(yqws)]\n    C = [[0] * dga for _ in range(dga)]\n    for ozw in range(yqws):\n        for pio in range(yqws):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    zdh = len(A)\n    if zdh <= 1:\n        return [[A[0][0] * B[0][0]]]\n    nqkh = zdh // 2\n    A11 = [[A[i][j] for ijg in range(nqkh)] for cuk in range(nqkh)]\n    A12 = [[A[i][j] for ijg in range(mid, n)] for cuk in range(nqkh)]\n    A21 = [[A[i][j] for ijg in range(nqkh)] for cuk in range(mid, n)]\n    A22 = [[A[i][j] for ijg in range(mid, n)] for cuk in range(mid, n)]\n    B11 = [[B[i][j] for ijg in range(nqkh)] for cuk in range(nqkh)]\n    B12 = [[B[i][j] for ijg in range(mid, n)] for cuk in range(nqkh)]\n    B21 = [[B[i][j] for ijg in range(nqkh)] for cuk in range(mid, n)]\n    B22 = [[B[i][j] for ijg in range(mid, n)] for cuk in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for ijg in range(nqkh)] for cuk in range(nqkh)], [[B11[i][j] + B22[i][j] for ijg in range(nqkh)] for cuk in range(nqkh)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for ijg in range(nqkh)] for cuk in range(nqkh)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for ijg in range(nqkh)] for cuk in range(nqkh)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for ijg in range(nqkh)] for cuk in range(nqkh)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for ijg in range(nqkh)] for cuk in range(nqkh)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for ijg in range(nqkh)] for cuk in range(nqkh)], [[B11[i][j] + B12[i][j] for ijg in range(nqkh)] for cuk in range(nqkh)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for ijg in range(nqkh)] for cuk in range(nqkh)], [[B21[i][j] + B22[i][j] for ijg in range(nqkh)] for cuk in range(nqkh)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for ijg in range(nqkh)] for cuk in range(nqkh)]\n    C12 = [[P3[i][j] + P5[i][j] for ijg in range(nqkh)] for cuk in range(nqkh)]\n    C21 = [[P2[i][j] + P4[i][j] for ijg in range(nqkh)] for cuk in range(nqkh)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for ijg in range(nqkh)] for cuk in range(nqkh)]\n    C = [[0] * zdh for _ in range(zdh)]\n    for cuk in range(nqkh):\n        for ijg in range(nqkh):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    mvg = len(A)\n    if mvg <= 1:\n        return [[A[0][0] * B[0][0]]]\n    qfvw = mvg // 2\n    A11 = [[A[i][j] for dyl in range(qfvw)] for qjy in range(qfvw)]\n    A12 = [[A[i][j] for dyl in range(mid, n)] for qjy in range(qfvw)]\n    A21 = [[A[i][j] for dyl in range(qfvw)] for qjy in range(mid, n)]\n    A22 = [[A[i][j] for dyl in range(mid, n)] for qjy in range(mid, n)]\n    B11 = [[B[i][j] for dyl in range(qfvw)] for qjy in range(qfvw)]\n    B12 = [[B[i][j] for dyl in range(mid, n)] for qjy in range(qfvw)]\n    B21 = [[B[i][j] for dyl in range(qfvw)] for qjy in range(mid, n)]\n    B22 = [[B[i][j] for dyl in range(mid, n)] for qjy in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for dyl in range(qfvw)] for qjy in range(qfvw)], [[B11[i][j] + B22[i][j] for dyl in range(qfvw)] for qjy in range(qfvw)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for dyl in range(qfvw)] for qjy in range(qfvw)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for dyl in range(qfvw)] for qjy in range(qfvw)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for dyl in range(qfvw)] for qjy in range(qfvw)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for dyl in range(qfvw)] for qjy in range(qfvw)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for dyl in range(qfvw)] for qjy in range(qfvw)], [[B11[i][j] + B12[i][j] for dyl in range(qfvw)] for qjy in range(qfvw)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for dyl in range(qfvw)] for qjy in range(qfvw)], [[B21[i][j] + B22[i][j] for dyl in range(qfvw)] for qjy in range(qfvw)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for dyl in range(qfvw)] for qjy in range(qfvw)]\n    C12 = [[P3[i][j] + P5[i][j] for dyl in range(qfvw)] for qjy in range(qfvw)]\n    C21 = [[P2[i][j] + P4[i][j] for dyl in range(qfvw)] for qjy in range(qfvw)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for dyl in range(qfvw)] for qjy in range(qfvw)]\n    C = [[0] * mvg for _ in range(mvg)]\n    for qjy in range(qfvw):\n        for dyl in range(qfvw):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    brj = len(A)\n    if brj <= 1:\n        return [[A[0][0] * B[0][0]]]\n    zwtl = brj // 2\n    A11 = [[A[i][j] for tvm in range(zwtl)] for pmc in range(zwtl)]\n    A12 = [[A[i][j] for tvm in range(mid, n)] for pmc in range(zwtl)]\n    A21 = [[A[i][j] for tvm in range(zwtl)] for pmc in range(mid, n)]\n    A22 = [[A[i][j] for tvm in range(mid, n)] for pmc in range(mid, n)]\n    B11 = [[B[i][j] for tvm in range(zwtl)] for pmc in range(zwtl)]\n    B12 = [[B[i][j] for tvm in range(mid, n)] for pmc in range(zwtl)]\n    B21 = [[B[i][j] for tvm in range(zwtl)] for pmc in range(mid, n)]\n    B22 = [[B[i][j] for tvm in range(mid, n)] for pmc in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for tvm in range(zwtl)] for pmc in range(zwtl)], [[B11[i][j] + B22[i][j] for tvm in range(zwtl)] for pmc in range(zwtl)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for tvm in range(zwtl)] for pmc in range(zwtl)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for tvm in range(zwtl)] for pmc in range(zwtl)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for tvm in range(zwtl)] for pmc in range(zwtl)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for tvm in range(zwtl)] for pmc in range(zwtl)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for tvm in range(zwtl)] for pmc in range(zwtl)], [[B11[i][j] + B12[i][j] for tvm in range(zwtl)] for pmc in range(zwtl)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for tvm in range(zwtl)] for pmc in range(zwtl)], [[B21[i][j] + B22[i][j] for tvm in range(zwtl)] for pmc in range(zwtl)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for tvm in range(zwtl)] for pmc in range(zwtl)]\n    C12 = [[P3[i][j] + P5[i][j] for tvm in range(zwtl)] for pmc in range(zwtl)]\n    C21 = [[P2[i][j] + P4[i][j] for tvm in range(zwtl)] for pmc in range(zwtl)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for tvm in range(zwtl)] for pmc in range(zwtl)]\n    C = [[0] * brj for _ in range(brj)]\n    for pmc in range(zwtl):\n        for tvm in range(zwtl):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    sqs = len(A)\n    if sqs <= 1:\n        return [[A[0][0] * B[0][0]]]\n    ryoo = sqs // 2\n    A11 = [[A[i][j] for von in range(ryoo)] for vif in range(ryoo)]\n    A12 = [[A[i][j] for von in range(mid, n)] for vif in range(ryoo)]\n    A21 = [[A[i][j] for von in range(ryoo)] for vif in range(mid, n)]\n    A22 = [[A[i][j] for von in range(mid, n)] for vif in range(mid, n)]\n    B11 = [[B[i][j] for von in range(ryoo)] for vif in range(ryoo)]\n    B12 = [[B[i][j] for von in range(mid, n)] for vif in range(ryoo)]\n    B21 = [[B[i][j] for von in range(ryoo)] for vif in range(mid, n)]\n    B22 = [[B[i][j] for von in range(mid, n)] for vif in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for von in range(ryoo)] for vif in range(ryoo)], [[B11[i][j] + B22[i][j] for von in range(ryoo)] for vif in range(ryoo)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for von in range(ryoo)] for vif in range(ryoo)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for von in range(ryoo)] for vif in range(ryoo)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for von in range(ryoo)] for vif in range(ryoo)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for von in range(ryoo)] for vif in range(ryoo)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for von in range(ryoo)] for vif in range(ryoo)], [[B11[i][j] + B12[i][j] for von in range(ryoo)] for vif in range(ryoo)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for von in range(ryoo)] for vif in range(ryoo)], [[B21[i][j] + B22[i][j] for von in range(ryoo)] for vif in range(ryoo)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for von in range(ryoo)] for vif in range(ryoo)]\n    C12 = [[P3[i][j] + P5[i][j] for von in range(ryoo)] for vif in range(ryoo)]\n    C21 = [[P2[i][j] + P4[i][j] for von in range(ryoo)] for vif in range(ryoo)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for von in range(ryoo)] for vif in range(ryoo)]\n    C = [[0] * sqs for _ in range(sqs)]\n    for vif in range(ryoo):\n        for von in range(ryoo):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    szz = len(A)\n    if szz <= 1:\n        return [[A[0][0] * B[0][0]]]\n    zoyp = szz // 2\n    A11 = [[A[i][j] for efi in range(zoyp)] for oib in range(zoyp)]\n    A12 = [[A[i][j] for efi in range(mid, n)] for oib in range(zoyp)]\n    A21 = [[A[i][j] for efi in range(zoyp)] for oib in range(mid, n)]\n    A22 = [[A[i][j] for efi in range(mid, n)] for oib in range(mid, n)]\n    B11 = [[B[i][j] for efi in range(zoyp)] for oib in range(zoyp)]\n    B12 = [[B[i][j] for efi in range(mid, n)] for oib in range(zoyp)]\n    B21 = [[B[i][j] for efi in range(zoyp)] for oib in range(mid, n)]\n    B22 = [[B[i][j] for efi in range(mid, n)] for oib in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for efi in range(zoyp)] for oib in range(zoyp)], [[B11[i][j] + B22[i][j] for efi in range(zoyp)] for oib in range(zoyp)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for efi in range(zoyp)] for oib in range(zoyp)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for efi in range(zoyp)] for oib in range(zoyp)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for efi in range(zoyp)] for oib in range(zoyp)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for efi in range(zoyp)] for oib in range(zoyp)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for efi in range(zoyp)] for oib in range(zoyp)], [[B11[i][j] + B12[i][j] for efi in range(zoyp)] for oib in range(zoyp)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for efi in range(zoyp)] for oib in range(zoyp)], [[B21[i][j] + B22[i][j] for efi in range(zoyp)] for oib in range(zoyp)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for efi in range(zoyp)] for oib in range(zoyp)]\n    C12 = [[P3[i][j] + P5[i][j] for efi in range(zoyp)] for oib in range(zoyp)]\n    C21 = [[P2[i][j] + P4[i][j] for efi in range(zoyp)] for oib in range(zoyp)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for efi in range(zoyp)] for oib in range(zoyp)]\n    C = [[0] * szz for _ in range(szz)]\n    for oib in range(zoyp):\n        for efi in range(zoyp):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    hyg = len(A)\n    if hyg <= 1:\n        return [[A[0][0] * B[0][0]]]\n    hqty = hyg // 2\n    A11 = [[A[i][j] for uwb in range(hqty)] for agr in range(hqty)]\n    A12 = [[A[i][j] for uwb in range(mid, n)] for agr in range(hqty)]\n    A21 = [[A[i][j] for uwb in range(hqty)] for agr in range(mid, n)]\n    A22 = [[A[i][j] for uwb in range(mid, n)] for agr in range(mid, n)]\n    B11 = [[B[i][j] for uwb in range(hqty)] for agr in range(hqty)]\n    B12 = [[B[i][j] for uwb in range(mid, n)] for agr in range(hqty)]\n    B21 = [[B[i][j] for uwb in range(hqty)] for agr in range(mid, n)]\n    B22 = [[B[i][j] for uwb in range(mid, n)] for agr in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for uwb in range(hqty)] for agr in range(hqty)], [[B11[i][j] + B22[i][j] for uwb in range(hqty)] for agr in range(hqty)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for uwb in range(hqty)] for agr in range(hqty)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for uwb in range(hqty)] for agr in range(hqty)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for uwb in range(hqty)] for agr in range(hqty)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for uwb in range(hqty)] for agr in range(hqty)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for uwb in range(hqty)] for agr in range(hqty)], [[B11[i][j] + B12[i][j] for uwb in range(hqty)] for agr in range(hqty)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for uwb in range(hqty)] for agr in range(hqty)], [[B21[i][j] + B22[i][j] for uwb in range(hqty)] for agr in range(hqty)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for uwb in range(hqty)] for agr in range(hqty)]\n    C12 = [[P3[i][j] + P5[i][j] for uwb in range(hqty)] for agr in range(hqty)]\n    C21 = [[P2[i][j] + P4[i][j] for uwb in range(hqty)] for agr in range(hqty)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for uwb in range(hqty)] for agr in range(hqty)]\n    C = [[0] * hyg for _ in range(hyg)]\n    for agr in range(hqty):\n        for uwb in range(hqty):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    jng = len(A)\n    if jng <= 1:\n        return [[A[0][0] * B[0][0]]]\n    guux = jng // 2\n    A11 = [[A[i][j] for aww in range(guux)] for xtn in range(guux)]\n    A12 = [[A[i][j] for aww in range(mid, n)] for xtn in range(guux)]\n    A21 = [[A[i][j] for aww in range(guux)] for xtn in range(mid, n)]\n    A22 = [[A[i][j] for aww in range(mid, n)] for xtn in range(mid, n)]\n    B11 = [[B[i][j] for aww in range(guux)] for xtn in range(guux)]\n    B12 = [[B[i][j] for aww in range(mid, n)] for xtn in range(guux)]\n    B21 = [[B[i][j] for aww in range(guux)] for xtn in range(mid, n)]\n    B22 = [[B[i][j] for aww in range(mid, n)] for xtn in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for aww in range(guux)] for xtn in range(guux)], [[B11[i][j] + B22[i][j] for aww in range(guux)] for xtn in range(guux)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for aww in range(guux)] for xtn in range(guux)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for aww in range(guux)] for xtn in range(guux)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for aww in range(guux)] for xtn in range(guux)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for aww in range(guux)] for xtn in range(guux)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for aww in range(guux)] for xtn in range(guux)], [[B11[i][j] + B12[i][j] for aww in range(guux)] for xtn in range(guux)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for aww in range(guux)] for xtn in range(guux)], [[B21[i][j] + B22[i][j] for aww in range(guux)] for xtn in range(guux)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for aww in range(guux)] for xtn in range(guux)]\n    C12 = [[P3[i][j] + P5[i][j] for aww in range(guux)] for xtn in range(guux)]\n    C21 = [[P2[i][j] + P4[i][j] for aww in range(guux)] for xtn in range(guux)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for aww in range(guux)] for xtn in range(guux)]\n    C = [[0] * jng for _ in range(jng)]\n    for xtn in range(guux):\n        for aww in range(guux):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    yaq = len(A)\n    if yaq <= 1:\n        return [[A[0][0] * B[0][0]]]\n    fyib = yaq // 2\n    A11 = [[A[i][j] for hgt in range(fyib)] for hcx in range(fyib)]\n    A12 = [[A[i][j] for hgt in range(mid, n)] for hcx in range(fyib)]\n    A21 = [[A[i][j] for hgt in range(fyib)] for hcx in range(mid, n)]\n    A22 = [[A[i][j] for hgt in range(mid, n)] for hcx in range(mid, n)]\n    B11 = [[B[i][j] for hgt in range(fyib)] for hcx in range(fyib)]\n    B12 = [[B[i][j] for hgt in range(mid, n)] for hcx in range(fyib)]\n    B21 = [[B[i][j] for hgt in range(fyib)] for hcx in range(mid, n)]\n    B22 = [[B[i][j] for hgt in range(mid, n)] for hcx in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for hgt in range(fyib)] for hcx in range(fyib)], [[B11[i][j] + B22[i][j] for hgt in range(fyib)] for hcx in range(fyib)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for hgt in range(fyib)] for hcx in range(fyib)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for hgt in range(fyib)] for hcx in range(fyib)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for hgt in range(fyib)] for hcx in range(fyib)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for hgt in range(fyib)] for hcx in range(fyib)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for hgt in range(fyib)] for hcx in range(fyib)], [[B11[i][j] + B12[i][j] for hgt in range(fyib)] for hcx in range(fyib)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for hgt in range(fyib)] for hcx in range(fyib)], [[B21[i][j] + B22[i][j] for hgt in range(fyib)] for hcx in range(fyib)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for hgt in range(fyib)] for hcx in range(fyib)]\n    C12 = [[P3[i][j] + P5[i][j] for hgt in range(fyib)] for hcx in range(fyib)]\n    C21 = [[P2[i][j] + P4[i][j] for hgt in range(fyib)] for hcx in range(fyib)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for hgt in range(fyib)] for hcx in range(fyib)]\n    C = [[0] * yaq for _ in range(yaq)]\n    for hcx in range(fyib):\n        for hgt in range(fyib):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    ruz = len(A)\n    if ruz <= 1:\n        return [[A[0][0] * B[0][0]]]\n    fgtj = ruz // 2\n    A11 = [[A[i][j] for goz in range(fgtj)] for nkt in range(fgtj)]\n    A12 = [[A[i][j] for goz in range(mid, n)] for nkt in range(fgtj)]\n    A21 = [[A[i][j] for goz in range(fgtj)] for nkt in range(mid, n)]\n    A22 = [[A[i][j] for goz in range(mid, n)] for nkt in range(mid, n)]\n    B11 = [[B[i][j] for goz in range(fgtj)] for nkt in range(fgtj)]\n    B12 = [[B[i][j] for goz in range(mid, n)] for nkt in range(fgtj)]\n    B21 = [[B[i][j] for goz in range(fgtj)] for nkt in range(mid, n)]\n    B22 = [[B[i][j] for goz in range(mid, n)] for nkt in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for goz in range(fgtj)] for nkt in range(fgtj)], [[B11[i][j] + B22[i][j] for goz in range(fgtj)] for nkt in range(fgtj)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for goz in range(fgtj)] for nkt in range(fgtj)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for goz in range(fgtj)] for nkt in range(fgtj)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for goz in range(fgtj)] for nkt in range(fgtj)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for goz in range(fgtj)] for nkt in range(fgtj)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for goz in range(fgtj)] for nkt in range(fgtj)], [[B11[i][j] + B12[i][j] for goz in range(fgtj)] for nkt in range(fgtj)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for goz in range(fgtj)] for nkt in range(fgtj)], [[B21[i][j] + B22[i][j] for goz in range(fgtj)] for nkt in range(fgtj)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for goz in range(fgtj)] for nkt in range(fgtj)]\n    C12 = [[P3[i][j] + P5[i][j] for goz in range(fgtj)] for nkt in range(fgtj)]\n    C21 = [[P2[i][j] + P4[i][j] for goz in range(fgtj)] for nkt in range(fgtj)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for goz in range(fgtj)] for nkt in range(fgtj)]\n    C = [[0] * ruz for _ in range(ruz)]\n    for nkt in range(fgtj):\n        for goz in range(fgtj):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    ers = len(A)\n    if ers <= 1:\n        return [[A[0][0] * B[0][0]]]\n    ayao = ers // 2\n    A11 = [[A[i][j] for xoc in range(ayao)] for aze in range(ayao)]\n    A12 = [[A[i][j] for xoc in range(mid, n)] for aze in range(ayao)]\n    A21 = [[A[i][j] for xoc in range(ayao)] for aze in range(mid, n)]\n    A22 = [[A[i][j] for xoc in range(mid, n)] for aze in range(mid, n)]\n    B11 = [[B[i][j] for xoc in range(ayao)] for aze in range(ayao)]\n    B12 = [[B[i][j] for xoc in range(mid, n)] for aze in range(ayao)]\n    B21 = [[B[i][j] for xoc in range(ayao)] for aze in range(mid, n)]\n    B22 = [[B[i][j] for xoc in range(mid, n)] for aze in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for xoc in range(ayao)] for aze in range(ayao)], [[B11[i][j] + B22[i][j] for xoc in range(ayao)] for aze in range(ayao)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for xoc in range(ayao)] for aze in range(ayao)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for xoc in range(ayao)] for aze in range(ayao)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for xoc in range(ayao)] for aze in range(ayao)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for xoc in range(ayao)] for aze in range(ayao)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for xoc in range(ayao)] for aze in range(ayao)], [[B11[i][j] + B12[i][j] for xoc in range(ayao)] for aze in range(ayao)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for xoc in range(ayao)] for aze in range(ayao)], [[B21[i][j] + B22[i][j] for xoc in range(ayao)] for aze in range(ayao)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for xoc in range(ayao)] for aze in range(ayao)]\n    C12 = [[P3[i][j] + P5[i][j] for xoc in range(ayao)] for aze in range(ayao)]\n    C21 = [[P2[i][j] + P4[i][j] for xoc in range(ayao)] for aze in range(ayao)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for xoc in range(ayao)] for aze in range(ayao)]\n    C = [[0] * ers for _ in range(ers)]\n    for aze in range(ayao):\n        for xoc in range(ayao):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    jap = len(A)\n    if jap <= 1:\n        return [[A[0][0] * B[0][0]]]\n    lwox = jap // 2\n    A11 = [[A[i][j] for frg in range(lwox)] for dbw in range(lwox)]\n    A12 = [[A[i][j] for frg in range(mid, n)] for dbw in range(lwox)]\n    A21 = [[A[i][j] for frg in range(lwox)] for dbw in range(mid, n)]\n    A22 = [[A[i][j] for frg in range(mid, n)] for dbw in range(mid, n)]\n    B11 = [[B[i][j] for frg in range(lwox)] for dbw in range(lwox)]\n    B12 = [[B[i][j] for frg in range(mid, n)] for dbw in range(lwox)]\n    B21 = [[B[i][j] for frg in range(lwox)] for dbw in range(mid, n)]\n    B22 = [[B[i][j] for frg in range(mid, n)] for dbw in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for frg in range(lwox)] for dbw in range(lwox)], [[B11[i][j] + B22[i][j] for frg in range(lwox)] for dbw in range(lwox)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for frg in range(lwox)] for dbw in range(lwox)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for frg in range(lwox)] for dbw in range(lwox)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for frg in range(lwox)] for dbw in range(lwox)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for frg in range(lwox)] for dbw in range(lwox)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for frg in range(lwox)] for dbw in range(lwox)], [[B11[i][j] + B12[i][j] for frg in range(lwox)] for dbw in range(lwox)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for frg in range(lwox)] for dbw in range(lwox)], [[B21[i][j] + B22[i][j] for frg in range(lwox)] for dbw in range(lwox)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for frg in range(lwox)] for dbw in range(lwox)]\n    C12 = [[P3[i][j] + P5[i][j] for frg in range(lwox)] for dbw in range(lwox)]\n    C21 = [[P2[i][j] + P4[i][j] for frg in range(lwox)] for dbw in range(lwox)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for frg in range(lwox)] for dbw in range(lwox)]\n    C = [[0] * jap for _ in range(jap)]\n    for dbw in range(lwox):\n        for frg in range(lwox):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    vfh = len(A)\n    if vfh <= 1:\n        return [[A[0][0] * B[0][0]]]\n    ynpf = vfh // 2\n    A11 = [[A[i][j] for fax in range(ynpf)] for naj in range(ynpf)]\n    A12 = [[A[i][j] for fax in range(mid, n)] for naj in range(ynpf)]\n    A21 = [[A[i][j] for fax in range(ynpf)] for naj in range(mid, n)]\n    A22 = [[A[i][j] for fax in range(mid, n)] for naj in range(mid, n)]\n    B11 = [[B[i][j] for fax in range(ynpf)] for naj in range(ynpf)]\n    B12 = [[B[i][j] for fax in range(mid, n)] for naj in range(ynpf)]\n    B21 = [[B[i][j] for fax in range(ynpf)] for naj in range(mid, n)]\n    B22 = [[B[i][j] for fax in range(mid, n)] for naj in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for fax in range(ynpf)] for naj in range(ynpf)], [[B11[i][j] + B22[i][j] for fax in range(ynpf)] for naj in range(ynpf)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for fax in range(ynpf)] for naj in range(ynpf)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for fax in range(ynpf)] for naj in range(ynpf)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for fax in range(ynpf)] for naj in range(ynpf)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for fax in range(ynpf)] for naj in range(ynpf)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for fax in range(ynpf)] for naj in range(ynpf)], [[B11[i][j] + B12[i][j] for fax in range(ynpf)] for naj in range(ynpf)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for fax in range(ynpf)] for naj in range(ynpf)], [[B21[i][j] + B22[i][j] for fax in range(ynpf)] for naj in range(ynpf)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for fax in range(ynpf)] for naj in range(ynpf)]\n    C12 = [[P3[i][j] + P5[i][j] for fax in range(ynpf)] for naj in range(ynpf)]\n    C21 = [[P2[i][j] + P4[i][j] for fax in range(ynpf)] for naj in range(ynpf)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for fax in range(ynpf)] for naj in range(ynpf)]\n    C = [[0] * vfh for _ in range(vfh)]\n    for naj in range(ynpf):\n        for fax in range(ynpf):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    dgo = len(A)\n    if dgo <= 1:\n        return [[A[0][0] * B[0][0]]]\n    tiin = dgo // 2\n    A11 = [[A[i][j] for gkq in range(tiin)] for gps in range(tiin)]\n    A12 = [[A[i][j] for gkq in range(mid, n)] for gps in range(tiin)]\n    A21 = [[A[i][j] for gkq in range(tiin)] for gps in range(mid, n)]\n    A22 = [[A[i][j] for gkq in range(mid, n)] for gps in range(mid, n)]\n    B11 = [[B[i][j] for gkq in range(tiin)] for gps in range(tiin)]\n    B12 = [[B[i][j] for gkq in range(mid, n)] for gps in range(tiin)]\n    B21 = [[B[i][j] for gkq in range(tiin)] for gps in range(mid, n)]\n    B22 = [[B[i][j] for gkq in range(mid, n)] for gps in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for gkq in range(tiin)] for gps in range(tiin)], [[B11[i][j] + B22[i][j] for gkq in range(tiin)] for gps in range(tiin)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for gkq in range(tiin)] for gps in range(tiin)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for gkq in range(tiin)] for gps in range(tiin)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for gkq in range(tiin)] for gps in range(tiin)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for gkq in range(tiin)] for gps in range(tiin)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for gkq in range(tiin)] for gps in range(tiin)], [[B11[i][j] + B12[i][j] for gkq in range(tiin)] for gps in range(tiin)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for gkq in range(tiin)] for gps in range(tiin)], [[B21[i][j] + B22[i][j] for gkq in range(tiin)] for gps in range(tiin)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for gkq in range(tiin)] for gps in range(tiin)]\n    C12 = [[P3[i][j] + P5[i][j] for gkq in range(tiin)] for gps in range(tiin)]\n    C21 = [[P2[i][j] + P4[i][j] for gkq in range(tiin)] for gps in range(tiin)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for gkq in range(tiin)] for gps in range(tiin)]\n    C = [[0] * dgo for _ in range(dgo)]\n    for gps in range(tiin):\n        for gkq in range(tiin):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    ynx = len(A)\n    if ynx <= 1:\n        return [[A[0][0] * B[0][0]]]\n    hmuf = ynx // 2\n    A11 = [[A[i][j] for mdi in range(hmuf)] for sqg in range(hmuf)]\n    A12 = [[A[i][j] for mdi in range(mid, n)] for sqg in range(hmuf)]\n    A21 = [[A[i][j] for mdi in range(hmuf)] for sqg in range(mid, n)]\n    A22 = [[A[i][j] for mdi in range(mid, n)] for sqg in range(mid, n)]\n    B11 = [[B[i][j] for mdi in range(hmuf)] for sqg in range(hmuf)]\n    B12 = [[B[i][j] for mdi in range(mid, n)] for sqg in range(hmuf)]\n    B21 = [[B[i][j] for mdi in range(hmuf)] for sqg in range(mid, n)]\n    B22 = [[B[i][j] for mdi in range(mid, n)] for sqg in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for mdi in range(hmuf)] for sqg in range(hmuf)], [[B11[i][j] + B22[i][j] for mdi in range(hmuf)] for sqg in range(hmuf)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for mdi in range(hmuf)] for sqg in range(hmuf)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for mdi in range(hmuf)] for sqg in range(hmuf)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for mdi in range(hmuf)] for sqg in range(hmuf)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for mdi in range(hmuf)] for sqg in range(hmuf)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for mdi in range(hmuf)] for sqg in range(hmuf)], [[B11[i][j] + B12[i][j] for mdi in range(hmuf)] for sqg in range(hmuf)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for mdi in range(hmuf)] for sqg in range(hmuf)], [[B21[i][j] + B22[i][j] for mdi in range(hmuf)] for sqg in range(hmuf)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for mdi in range(hmuf)] for sqg in range(hmuf)]\n    C12 = [[P3[i][j] + P5[i][j] for mdi in range(hmuf)] for sqg in range(hmuf)]\n    C21 = [[P2[i][j] + P4[i][j] for mdi in range(hmuf)] for sqg in range(hmuf)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for mdi in range(hmuf)] for sqg in range(hmuf)]\n    C = [[0] * ynx for _ in range(ynx)]\n    for sqg in range(hmuf):\n        for mdi in range(hmuf):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    hph = len(A)\n    if hph <= 1:\n        return [[A[0][0] * B[0][0]]]\n    cyme = hph // 2\n    A11 = [[A[i][j] for hpl in range(cyme)] for yto in range(cyme)]\n    A12 = [[A[i][j] for hpl in range(mid, n)] for yto in range(cyme)]\n    A21 = [[A[i][j] for hpl in range(cyme)] for yto in range(mid, n)]\n    A22 = [[A[i][j] for hpl in range(mid, n)] for yto in range(mid, n)]\n    B11 = [[B[i][j] for hpl in range(cyme)] for yto in range(cyme)]\n    B12 = [[B[i][j] for hpl in range(mid, n)] for yto in range(cyme)]\n    B21 = [[B[i][j] for hpl in range(cyme)] for yto in range(mid, n)]\n    B22 = [[B[i][j] for hpl in range(mid, n)] for yto in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for hpl in range(cyme)] for yto in range(cyme)], [[B11[i][j] + B22[i][j] for hpl in range(cyme)] for yto in range(cyme)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for hpl in range(cyme)] for yto in range(cyme)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for hpl in range(cyme)] for yto in range(cyme)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for hpl in range(cyme)] for yto in range(cyme)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for hpl in range(cyme)] for yto in range(cyme)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for hpl in range(cyme)] for yto in range(cyme)], [[B11[i][j] + B12[i][j] for hpl in range(cyme)] for yto in range(cyme)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for hpl in range(cyme)] for yto in range(cyme)], [[B21[i][j] + B22[i][j] for hpl in range(cyme)] for yto in range(cyme)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for hpl in range(cyme)] for yto in range(cyme)]\n    C12 = [[P3[i][j] + P5[i][j] for hpl in range(cyme)] for yto in range(cyme)]\n    C21 = [[P2[i][j] + P4[i][j] for hpl in range(cyme)] for yto in range(cyme)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for hpl in range(cyme)] for yto in range(cyme)]\n    C = [[0] * hph for _ in range(hph)]\n    for yto in range(cyme):\n        for hpl in range(cyme):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    mdx = len(A)\n    if mdx <= 1:\n        return [[A[0][0] * B[0][0]]]\n    pmdp = mdx // 2\n    A11 = [[A[i][j] for xgc in range(pmdp)] for gke in range(pmdp)]\n    A12 = [[A[i][j] for xgc in range(mid, n)] for gke in range(pmdp)]\n    A21 = [[A[i][j] for xgc in range(pmdp)] for gke in range(mid, n)]\n    A22 = [[A[i][j] for xgc in range(mid, n)] for gke in range(mid, n)]\n    B11 = [[B[i][j] for xgc in range(pmdp)] for gke in range(pmdp)]\n    B12 = [[B[i][j] for xgc in range(mid, n)] for gke in range(pmdp)]\n    B21 = [[B[i][j] for xgc in range(pmdp)] for gke in range(mid, n)]\n    B22 = [[B[i][j] for xgc in range(mid, n)] for gke in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for xgc in range(pmdp)] for gke in range(pmdp)], [[B11[i][j] + B22[i][j] for xgc in range(pmdp)] for gke in range(pmdp)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for xgc in range(pmdp)] for gke in range(pmdp)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for xgc in range(pmdp)] for gke in range(pmdp)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for xgc in range(pmdp)] for gke in range(pmdp)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for xgc in range(pmdp)] for gke in range(pmdp)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for xgc in range(pmdp)] for gke in range(pmdp)], [[B11[i][j] + B12[i][j] for xgc in range(pmdp)] for gke in range(pmdp)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for xgc in range(pmdp)] for gke in range(pmdp)], [[B21[i][j] + B22[i][j] for xgc in range(pmdp)] for gke in range(pmdp)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for xgc in range(pmdp)] for gke in range(pmdp)]\n    C12 = [[P3[i][j] + P5[i][j] for xgc in range(pmdp)] for gke in range(pmdp)]\n    C21 = [[P2[i][j] + P4[i][j] for xgc in range(pmdp)] for gke in range(pmdp)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for xgc in range(pmdp)] for gke in range(pmdp)]\n    C = [[0] * mdx for _ in range(mdx)]\n    for gke in range(pmdp):\n        for xgc in range(pmdp):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    clp = len(A)\n    if clp <= 1:\n        return [[A[0][0] * B[0][0]]]\n    bgcj = clp // 2\n    A11 = [[A[i][j] for ive in range(bgcj)] for uyi in range(bgcj)]\n    A12 = [[A[i][j] for ive in range(mid, n)] for uyi in range(bgcj)]\n    A21 = [[A[i][j] for ive in range(bgcj)] for uyi in range(mid, n)]\n    A22 = [[A[i][j] for ive in range(mid, n)] for uyi in range(mid, n)]\n    B11 = [[B[i][j] for ive in range(bgcj)] for uyi in range(bgcj)]\n    B12 = [[B[i][j] for ive in range(mid, n)] for uyi in range(bgcj)]\n    B21 = [[B[i][j] for ive in range(bgcj)] for uyi in range(mid, n)]\n    B22 = [[B[i][j] for ive in range(mid, n)] for uyi in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for ive in range(bgcj)] for uyi in range(bgcj)], [[B11[i][j] + B22[i][j] for ive in range(bgcj)] for uyi in range(bgcj)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for ive in range(bgcj)] for uyi in range(bgcj)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for ive in range(bgcj)] for uyi in range(bgcj)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for ive in range(bgcj)] for uyi in range(bgcj)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for ive in range(bgcj)] for uyi in range(bgcj)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for ive in range(bgcj)] for uyi in range(bgcj)], [[B11[i][j] + B12[i][j] for ive in range(bgcj)] for uyi in range(bgcj)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for ive in range(bgcj)] for uyi in range(bgcj)], [[B21[i][j] + B22[i][j] for ive in range(bgcj)] for uyi in range(bgcj)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for ive in range(bgcj)] for uyi in range(bgcj)]\n    C12 = [[P3[i][j] + P5[i][j] for ive in range(bgcj)] for uyi in range(bgcj)]\n    C21 = [[P2[i][j] + P4[i][j] for ive in range(bgcj)] for uyi in range(bgcj)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for ive in range(bgcj)] for uyi in range(bgcj)]\n    C = [[0] * clp for _ in range(clp)]\n    for uyi in range(bgcj):\n        for ive in range(bgcj):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    crt = len(A)\n    if crt <= 1:\n        return [[A[0][0] * B[0][0]]]\n    iesl = crt // 2\n    A11 = [[A[i][j] for aav in range(iesl)] for mrb in range(iesl)]\n    A12 = [[A[i][j] for aav in range(mid, n)] for mrb in range(iesl)]\n    A21 = [[A[i][j] for aav in range(iesl)] for mrb in range(mid, n)]\n    A22 = [[A[i][j] for aav in range(mid, n)] for mrb in range(mid, n)]\n    B11 = [[B[i][j] for aav in range(iesl)] for mrb in range(iesl)]\n    B12 = [[B[i][j] for aav in range(mid, n)] for mrb in range(iesl)]\n    B21 = [[B[i][j] for aav in range(iesl)] for mrb in range(mid, n)]\n    B22 = [[B[i][j] for aav in range(mid, n)] for mrb in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for aav in range(iesl)] for mrb in range(iesl)], [[B11[i][j] + B22[i][j] for aav in range(iesl)] for mrb in range(iesl)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for aav in range(iesl)] for mrb in range(iesl)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for aav in range(iesl)] for mrb in range(iesl)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for aav in range(iesl)] for mrb in range(iesl)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for aav in range(iesl)] for mrb in range(iesl)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for aav in range(iesl)] for mrb in range(iesl)], [[B11[i][j] + B12[i][j] for aav in range(iesl)] for mrb in range(iesl)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for aav in range(iesl)] for mrb in range(iesl)], [[B21[i][j] + B22[i][j] for aav in range(iesl)] for mrb in range(iesl)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for aav in range(iesl)] for mrb in range(iesl)]\n    C12 = [[P3[i][j] + P5[i][j] for aav in range(iesl)] for mrb in range(iesl)]\n    C21 = [[P2[i][j] + P4[i][j] for aav in range(iesl)] for mrb in range(iesl)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for aav in range(iesl)] for mrb in range(iesl)]\n    C = [[0] * crt for _ in range(crt)]\n    for mrb in range(iesl):\n        for aav in range(iesl):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    lqx = len(A)\n    if lqx <= 1:\n        return [[A[0][0] * B[0][0]]]\n    witk = lqx // 2\n    A11 = [[A[i][j] for epz in range(witk)] for xcb in range(witk)]\n    A12 = [[A[i][j] for epz in range(mid, n)] for xcb in range(witk)]\n    A21 = [[A[i][j] for epz in range(witk)] for xcb in range(mid, n)]\n    A22 = [[A[i][j] for epz in range(mid, n)] for xcb in range(mid, n)]\n    B11 = [[B[i][j] for epz in range(witk)] for xcb in range(witk)]\n    B12 = [[B[i][j] for epz in range(mid, n)] for xcb in range(witk)]\n    B21 = [[B[i][j] for epz in range(witk)] for xcb in range(mid, n)]\n    B22 = [[B[i][j] for epz in range(mid, n)] for xcb in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for epz in range(witk)] for xcb in range(witk)], [[B11[i][j] + B22[i][j] for epz in range(witk)] for xcb in range(witk)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for epz in range(witk)] for xcb in range(witk)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for epz in range(witk)] for xcb in range(witk)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for epz in range(witk)] for xcb in range(witk)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for epz in range(witk)] for xcb in range(witk)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for epz in range(witk)] for xcb in range(witk)], [[B11[i][j] + B12[i][j] for epz in range(witk)] for xcb in range(witk)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for epz in range(witk)] for xcb in range(witk)], [[B21[i][j] + B22[i][j] for epz in range(witk)] for xcb in range(witk)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for epz in range(witk)] for xcb in range(witk)]\n    C12 = [[P3[i][j] + P5[i][j] for epz in range(witk)] for xcb in range(witk)]\n    C21 = [[P2[i][j] + P4[i][j] for epz in range(witk)] for xcb in range(witk)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for epz in range(witk)] for xcb in range(witk)]\n    C = [[0] * lqx for _ in range(lqx)]\n    for xcb in range(witk):\n        for epz in range(witk):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    smb = len(A)\n    if smb <= 1:\n        return [[A[0][0] * B[0][0]]]\n    giiq = smb // 2\n    A11 = [[A[i][j] for xzg in range(giiq)] for nfg in range(giiq)]\n    A12 = [[A[i][j] for xzg in range(mid, n)] for nfg in range(giiq)]\n    A21 = [[A[i][j] for xzg in range(giiq)] for nfg in range(mid, n)]\n    A22 = [[A[i][j] for xzg in range(mid, n)] for nfg in range(mid, n)]\n    B11 = [[B[i][j] for xzg in range(giiq)] for nfg in range(giiq)]\n    B12 = [[B[i][j] for xzg in range(mid, n)] for nfg in range(giiq)]\n    B21 = [[B[i][j] for xzg in range(giiq)] for nfg in range(mid, n)]\n    B22 = [[B[i][j] for xzg in range(mid, n)] for nfg in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for xzg in range(giiq)] for nfg in range(giiq)], [[B11[i][j] + B22[i][j] for xzg in range(giiq)] for nfg in range(giiq)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for xzg in range(giiq)] for nfg in range(giiq)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for xzg in range(giiq)] for nfg in range(giiq)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for xzg in range(giiq)] for nfg in range(giiq)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for xzg in range(giiq)] for nfg in range(giiq)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for xzg in range(giiq)] for nfg in range(giiq)], [[B11[i][j] + B12[i][j] for xzg in range(giiq)] for nfg in range(giiq)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for xzg in range(giiq)] for nfg in range(giiq)], [[B21[i][j] + B22[i][j] for xzg in range(giiq)] for nfg in range(giiq)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for xzg in range(giiq)] for nfg in range(giiq)]\n    C12 = [[P3[i][j] + P5[i][j] for xzg in range(giiq)] for nfg in range(giiq)]\n    C21 = [[P2[i][j] + P4[i][j] for xzg in range(giiq)] for nfg in range(giiq)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for xzg in range(giiq)] for nfg in range(giiq)]\n    C = [[0] * smb for _ in range(smb)]\n    for nfg in range(giiq):\n        for xzg in range(giiq):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    mqk = len(A)\n    if mqk <= 1:\n        return [[A[0][0] * B[0][0]]]\n    bxul = mqk // 2\n    A11 = [[A[i][j] for pjc in range(bxul)] for ycr in range(bxul)]\n    A12 = [[A[i][j] for pjc in range(mid, n)] for ycr in range(bxul)]\n    A21 = [[A[i][j] for pjc in range(bxul)] for ycr in range(mid, n)]\n    A22 = [[A[i][j] for pjc in range(mid, n)] for ycr in range(mid, n)]\n    B11 = [[B[i][j] for pjc in range(bxul)] for ycr in range(bxul)]\n    B12 = [[B[i][j] for pjc in range(mid, n)] for ycr in range(bxul)]\n    B21 = [[B[i][j] for pjc in range(bxul)] for ycr in range(mid, n)]\n    B22 = [[B[i][j] for pjc in range(mid, n)] for ycr in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for pjc in range(bxul)] for ycr in range(bxul)], [[B11[i][j] + B22[i][j] for pjc in range(bxul)] for ycr in range(bxul)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for pjc in range(bxul)] for ycr in range(bxul)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for pjc in range(bxul)] for ycr in range(bxul)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for pjc in range(bxul)] for ycr in range(bxul)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for pjc in range(bxul)] for ycr in range(bxul)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for pjc in range(bxul)] for ycr in range(bxul)], [[B11[i][j] + B12[i][j] for pjc in range(bxul)] for ycr in range(bxul)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for pjc in range(bxul)] for ycr in range(bxul)], [[B21[i][j] + B22[i][j] for pjc in range(bxul)] for ycr in range(bxul)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for pjc in range(bxul)] for ycr in range(bxul)]\n    C12 = [[P3[i][j] + P5[i][j] for pjc in range(bxul)] for ycr in range(bxul)]\n    C21 = [[P2[i][j] + P4[i][j] for pjc in range(bxul)] for ycr in range(bxul)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for pjc in range(bxul)] for ycr in range(bxul)]\n    C = [[0] * mqk for _ in range(mqk)]\n    for ycr in range(bxul):\n        for pjc in range(bxul):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    cdd = len(A)\n    if cdd <= 1:\n        return [[A[0][0] * B[0][0]]]\n    pbxj = cdd // 2\n    A11 = [[A[i][j] for lre in range(pbxj)] for dxd in range(pbxj)]\n    A12 = [[A[i][j] for lre in range(mid, n)] for dxd in range(pbxj)]\n    A21 = [[A[i][j] for lre in range(pbxj)] for dxd in range(mid, n)]\n    A22 = [[A[i][j] for lre in range(mid, n)] for dxd in range(mid, n)]\n    B11 = [[B[i][j] for lre in range(pbxj)] for dxd in range(pbxj)]\n    B12 = [[B[i][j] for lre in range(mid, n)] for dxd in range(pbxj)]\n    B21 = [[B[i][j] for lre in range(pbxj)] for dxd in range(mid, n)]\n    B22 = [[B[i][j] for lre in range(mid, n)] for dxd in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for lre in range(pbxj)] for dxd in range(pbxj)], [[B11[i][j] + B22[i][j] for lre in range(pbxj)] for dxd in range(pbxj)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for lre in range(pbxj)] for dxd in range(pbxj)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for lre in range(pbxj)] for dxd in range(pbxj)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for lre in range(pbxj)] for dxd in range(pbxj)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for lre in range(pbxj)] for dxd in range(pbxj)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for lre in range(pbxj)] for dxd in range(pbxj)], [[B11[i][j] + B12[i][j] for lre in range(pbxj)] for dxd in range(pbxj)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for lre in range(pbxj)] for dxd in range(pbxj)], [[B21[i][j] + B22[i][j] for lre in range(pbxj)] for dxd in range(pbxj)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for lre in range(pbxj)] for dxd in range(pbxj)]\n    C12 = [[P3[i][j] + P5[i][j] for lre in range(pbxj)] for dxd in range(pbxj)]\n    C21 = [[P2[i][j] + P4[i][j] for lre in range(pbxj)] for dxd in range(pbxj)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for lre in range(pbxj)] for dxd in range(pbxj)]\n    C = [[0] * cdd for _ in range(cdd)]\n    for dxd in range(pbxj):\n        for lre in range(pbxj):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    gti = len(A)\n    if gti <= 1:\n        return [[A[0][0] * B[0][0]]]\n    deit = gti // 2\n    A11 = [[A[i][j] for fgj in range(deit)] for orz in range(deit)]\n    A12 = [[A[i][j] for fgj in range(mid, n)] for orz in range(deit)]\n    A21 = [[A[i][j] for fgj in range(deit)] for orz in range(mid, n)]\n    A22 = [[A[i][j] for fgj in range(mid, n)] for orz in range(mid, n)]\n    B11 = [[B[i][j] for fgj in range(deit)] for orz in range(deit)]\n    B12 = [[B[i][j] for fgj in range(mid, n)] for orz in range(deit)]\n    B21 = [[B[i][j] for fgj in range(deit)] for orz in range(mid, n)]\n    B22 = [[B[i][j] for fgj in range(mid, n)] for orz in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for fgj in range(deit)] for orz in range(deit)], [[B11[i][j] + B22[i][j] for fgj in range(deit)] for orz in range(deit)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for fgj in range(deit)] for orz in range(deit)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for fgj in range(deit)] for orz in range(deit)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for fgj in range(deit)] for orz in range(deit)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for fgj in range(deit)] for orz in range(deit)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for fgj in range(deit)] for orz in range(deit)], [[B11[i][j] + B12[i][j] for fgj in range(deit)] for orz in range(deit)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for fgj in range(deit)] for orz in range(deit)], [[B21[i][j] + B22[i][j] for fgj in range(deit)] for orz in range(deit)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for fgj in range(deit)] for orz in range(deit)]\n    C12 = [[P3[i][j] + P5[i][j] for fgj in range(deit)] for orz in range(deit)]\n    C21 = [[P2[i][j] + P4[i][j] for fgj in range(deit)] for orz in range(deit)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for fgj in range(deit)] for orz in range(deit)]\n    C = [[0] * gti for _ in range(gti)]\n    for orz in range(deit):\n        for fgj in range(deit):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    vrh = len(A)\n    if vrh <= 1:\n        return [[A[0][0] * B[0][0]]]\n    ogwx = vrh // 2\n    A11 = [[A[i][j] for laq in range(ogwx)] for sad in range(ogwx)]\n    A12 = [[A[i][j] for laq in range(mid, n)] for sad in range(ogwx)]\n    A21 = [[A[i][j] for laq in range(ogwx)] for sad in range(mid, n)]\n    A22 = [[A[i][j] for laq in range(mid, n)] for sad in range(mid, n)]\n    B11 = [[B[i][j] for laq in range(ogwx)] for sad in range(ogwx)]\n    B12 = [[B[i][j] for laq in range(mid, n)] for sad in range(ogwx)]\n    B21 = [[B[i][j] for laq in range(ogwx)] for sad in range(mid, n)]\n    B22 = [[B[i][j] for laq in range(mid, n)] for sad in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for laq in range(ogwx)] for sad in range(ogwx)], [[B11[i][j] + B22[i][j] for laq in range(ogwx)] for sad in range(ogwx)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for laq in range(ogwx)] for sad in range(ogwx)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for laq in range(ogwx)] for sad in range(ogwx)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for laq in range(ogwx)] for sad in range(ogwx)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for laq in range(ogwx)] for sad in range(ogwx)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for laq in range(ogwx)] for sad in range(ogwx)], [[B11[i][j] + B12[i][j] for laq in range(ogwx)] for sad in range(ogwx)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for laq in range(ogwx)] for sad in range(ogwx)], [[B21[i][j] + B22[i][j] for laq in range(ogwx)] for sad in range(ogwx)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for laq in range(ogwx)] for sad in range(ogwx)]\n    C12 = [[P3[i][j] + P5[i][j] for laq in range(ogwx)] for sad in range(ogwx)]\n    C21 = [[P2[i][j] + P4[i][j] for laq in range(ogwx)] for sad in range(ogwx)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for laq in range(ogwx)] for sad in range(ogwx)]\n    C = [[0] * vrh for _ in range(vrh)]\n    for sad in range(ogwx):\n        for laq in range(ogwx):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    omx = len(A)\n    if omx <= 1:\n        return [[A[0][0] * B[0][0]]]\n    cmjh = omx // 2\n    A11 = [[A[i][j] for vcs in range(cmjh)] for pan in range(cmjh)]\n    A12 = [[A[i][j] for vcs in range(mid, n)] for pan in range(cmjh)]\n    A21 = [[A[i][j] for vcs in range(cmjh)] for pan in range(mid, n)]\n    A22 = [[A[i][j] for vcs in range(mid, n)] for pan in range(mid, n)]\n    B11 = [[B[i][j] for vcs in range(cmjh)] for pan in range(cmjh)]\n    B12 = [[B[i][j] for vcs in range(mid, n)] for pan in range(cmjh)]\n    B21 = [[B[i][j] for vcs in range(cmjh)] for pan in range(mid, n)]\n    B22 = [[B[i][j] for vcs in range(mid, n)] for pan in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for vcs in range(cmjh)] for pan in range(cmjh)], [[B11[i][j] + B22[i][j] for vcs in range(cmjh)] for pan in range(cmjh)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for vcs in range(cmjh)] for pan in range(cmjh)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for vcs in range(cmjh)] for pan in range(cmjh)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for vcs in range(cmjh)] for pan in range(cmjh)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for vcs in range(cmjh)] for pan in range(cmjh)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for vcs in range(cmjh)] for pan in range(cmjh)], [[B11[i][j] + B12[i][j] for vcs in range(cmjh)] for pan in range(cmjh)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for vcs in range(cmjh)] for pan in range(cmjh)], [[B21[i][j] + B22[i][j] for vcs in range(cmjh)] for pan in range(cmjh)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for vcs in range(cmjh)] for pan in range(cmjh)]\n    C12 = [[P3[i][j] + P5[i][j] for vcs in range(cmjh)] for pan in range(cmjh)]\n    C21 = [[P2[i][j] + P4[i][j] for vcs in range(cmjh)] for pan in range(cmjh)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for vcs in range(cmjh)] for pan in range(cmjh)]\n    C = [[0] * omx for _ in range(omx)]\n    for pan in range(cmjh):\n        for vcs in range(cmjh):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    smt = len(A)\n    if smt <= 1:\n        return [[A[0][0] * B[0][0]]]\n    favz = smt // 2\n    A11 = [[A[i][j] for jyz in range(favz)] for pay in range(favz)]\n    A12 = [[A[i][j] for jyz in range(mid, n)] for pay in range(favz)]\n    A21 = [[A[i][j] for jyz in range(favz)] for pay in range(mid, n)]\n    A22 = [[A[i][j] for jyz in range(mid, n)] for pay in range(mid, n)]\n    B11 = [[B[i][j] for jyz in range(favz)] for pay in range(favz)]\n    B12 = [[B[i][j] for jyz in range(mid, n)] for pay in range(favz)]\n    B21 = [[B[i][j] for jyz in range(favz)] for pay in range(mid, n)]\n    B22 = [[B[i][j] for jyz in range(mid, n)] for pay in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for jyz in range(favz)] for pay in range(favz)], [[B11[i][j] + B22[i][j] for jyz in range(favz)] for pay in range(favz)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for jyz in range(favz)] for pay in range(favz)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for jyz in range(favz)] for pay in range(favz)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for jyz in range(favz)] for pay in range(favz)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for jyz in range(favz)] for pay in range(favz)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for jyz in range(favz)] for pay in range(favz)], [[B11[i][j] + B12[i][j] for jyz in range(favz)] for pay in range(favz)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for jyz in range(favz)] for pay in range(favz)], [[B21[i][j] + B22[i][j] for jyz in range(favz)] for pay in range(favz)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for jyz in range(favz)] for pay in range(favz)]\n    C12 = [[P3[i][j] + P5[i][j] for jyz in range(favz)] for pay in range(favz)]\n    C21 = [[P2[i][j] + P4[i][j] for jyz in range(favz)] for pay in range(favz)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for jyz in range(favz)] for pay in range(favz)]\n    C = [[0] * smt for _ in range(smt)]\n    for pay in range(favz):\n        for jyz in range(favz):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    jsz = len(A)\n    if jsz <= 1:\n        return [[A[0][0] * B[0][0]]]\n    mqtz = jsz // 2\n    A11 = [[A[i][j] for muq in range(mqtz)] for mbo in range(mqtz)]\n    A12 = [[A[i][j] for muq in range(mid, n)] for mbo in range(mqtz)]\n    A21 = [[A[i][j] for muq in range(mqtz)] for mbo in range(mid, n)]\n    A22 = [[A[i][j] for muq in range(mid, n)] for mbo in range(mid, n)]\n    B11 = [[B[i][j] for muq in range(mqtz)] for mbo in range(mqtz)]\n    B12 = [[B[i][j] for muq in range(mid, n)] for mbo in range(mqtz)]\n    B21 = [[B[i][j] for muq in range(mqtz)] for mbo in range(mid, n)]\n    B22 = [[B[i][j] for muq in range(mid, n)] for mbo in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for muq in range(mqtz)] for mbo in range(mqtz)], [[B11[i][j] + B22[i][j] for muq in range(mqtz)] for mbo in range(mqtz)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for muq in range(mqtz)] for mbo in range(mqtz)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for muq in range(mqtz)] for mbo in range(mqtz)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for muq in range(mqtz)] for mbo in range(mqtz)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for muq in range(mqtz)] for mbo in range(mqtz)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for muq in range(mqtz)] for mbo in range(mqtz)], [[B11[i][j] + B12[i][j] for muq in range(mqtz)] for mbo in range(mqtz)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for muq in range(mqtz)] for mbo in range(mqtz)], [[B21[i][j] + B22[i][j] for muq in range(mqtz)] for mbo in range(mqtz)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for muq in range(mqtz)] for mbo in range(mqtz)]\n    C12 = [[P3[i][j] + P5[i][j] for muq in range(mqtz)] for mbo in range(mqtz)]\n    C21 = [[P2[i][j] + P4[i][j] for muq in range(mqtz)] for mbo in range(mqtz)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for muq in range(mqtz)] for mbo in range(mqtz)]\n    C = [[0] * jsz for _ in range(jsz)]\n    for mbo in range(mqtz):\n        for muq in range(mqtz):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    zhs = len(A)\n    if zhs <= 1:\n        return [[A[0][0] * B[0][0]]]\n    olui = zhs // 2\n    A11 = [[A[i][j] for nnl in range(olui)] for xfy in range(olui)]\n    A12 = [[A[i][j] for nnl in range(mid, n)] for xfy in range(olui)]\n    A21 = [[A[i][j] for nnl in range(olui)] for xfy in range(mid, n)]\n    A22 = [[A[i][j] for nnl in range(mid, n)] for xfy in range(mid, n)]\n    B11 = [[B[i][j] for nnl in range(olui)] for xfy in range(olui)]\n    B12 = [[B[i][j] for nnl in range(mid, n)] for xfy in range(olui)]\n    B21 = [[B[i][j] for nnl in range(olui)] for xfy in range(mid, n)]\n    B22 = [[B[i][j] for nnl in range(mid, n)] for xfy in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for nnl in range(olui)] for xfy in range(olui)], [[B11[i][j] + B22[i][j] for nnl in range(olui)] for xfy in range(olui)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for nnl in range(olui)] for xfy in range(olui)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for nnl in range(olui)] for xfy in range(olui)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for nnl in range(olui)] for xfy in range(olui)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for nnl in range(olui)] for xfy in range(olui)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for nnl in range(olui)] for xfy in range(olui)], [[B11[i][j] + B12[i][j] for nnl in range(olui)] for xfy in range(olui)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for nnl in range(olui)] for xfy in range(olui)], [[B21[i][j] + B22[i][j] for nnl in range(olui)] for xfy in range(olui)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for nnl in range(olui)] for xfy in range(olui)]\n    C12 = [[P3[i][j] + P5[i][j] for nnl in range(olui)] for xfy in range(olui)]\n    C21 = [[P2[i][j] + P4[i][j] for nnl in range(olui)] for xfy in range(olui)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for nnl in range(olui)] for xfy in range(olui)]\n    C = [[0] * zhs for _ in range(zhs)]\n    for xfy in range(olui):\n        for nnl in range(olui):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    ixl = len(A)\n    if ixl <= 1:\n        return [[A[0][0] * B[0][0]]]\n    fibv = ixl // 2\n    A11 = [[A[i][j] for gzn in range(fibv)] for aft in range(fibv)]\n    A12 = [[A[i][j] for gzn in range(mid, n)] for aft in range(fibv)]\n    A21 = [[A[i][j] for gzn in range(fibv)] for aft in range(mid, n)]\n    A22 = [[A[i][j] for gzn in range(mid, n)] for aft in range(mid, n)]\n    B11 = [[B[i][j] for gzn in range(fibv)] for aft in range(fibv)]\n    B12 = [[B[i][j] for gzn in range(mid, n)] for aft in range(fibv)]\n    B21 = [[B[i][j] for gzn in range(fibv)] for aft in range(mid, n)]\n    B22 = [[B[i][j] for gzn in range(mid, n)] for aft in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for gzn in range(fibv)] for aft in range(fibv)], [[B11[i][j] + B22[i][j] for gzn in range(fibv)] for aft in range(fibv)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for gzn in range(fibv)] for aft in range(fibv)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for gzn in range(fibv)] for aft in range(fibv)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for gzn in range(fibv)] for aft in range(fibv)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for gzn in range(fibv)] for aft in range(fibv)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for gzn in range(fibv)] for aft in range(fibv)], [[B11[i][j] + B12[i][j] for gzn in range(fibv)] for aft in range(fibv)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for gzn in range(fibv)] for aft in range(fibv)], [[B21[i][j] + B22[i][j] for gzn in range(fibv)] for aft in range(fibv)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for gzn in range(fibv)] for aft in range(fibv)]\n    C12 = [[P3[i][j] + P5[i][j] for gzn in range(fibv)] for aft in range(fibv)]\n    C21 = [[P2[i][j] + P4[i][j] for gzn in range(fibv)] for aft in range(fibv)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for gzn in range(fibv)] for aft in range(fibv)]\n    C = [[0] * ixl for _ in range(ixl)]\n    for aft in range(fibv):\n        for gzn in range(fibv):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    seg = len(A)\n    if seg <= 1:\n        return [[A[0][0] * B[0][0]]]\n    zism = seg // 2\n    A11 = [[A[i][j] for tvf in range(zism)] for xnz in range(zism)]\n    A12 = [[A[i][j] for tvf in range(mid, n)] for xnz in range(zism)]\n    A21 = [[A[i][j] for tvf in range(zism)] for xnz in range(mid, n)]\n    A22 = [[A[i][j] for tvf in range(mid, n)] for xnz in range(mid, n)]\n    B11 = [[B[i][j] for tvf in range(zism)] for xnz in range(zism)]\n    B12 = [[B[i][j] for tvf in range(mid, n)] for xnz in range(zism)]\n    B21 = [[B[i][j] for tvf in range(zism)] for xnz in range(mid, n)]\n    B22 = [[B[i][j] for tvf in range(mid, n)] for xnz in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for tvf in range(zism)] for xnz in range(zism)], [[B11[i][j] + B22[i][j] for tvf in range(zism)] for xnz in range(zism)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for tvf in range(zism)] for xnz in range(zism)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for tvf in range(zism)] for xnz in range(zism)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for tvf in range(zism)] for xnz in range(zism)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for tvf in range(zism)] for xnz in range(zism)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for tvf in range(zism)] for xnz in range(zism)], [[B11[i][j] + B12[i][j] for tvf in range(zism)] for xnz in range(zism)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for tvf in range(zism)] for xnz in range(zism)], [[B21[i][j] + B22[i][j] for tvf in range(zism)] for xnz in range(zism)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for tvf in range(zism)] for xnz in range(zism)]\n    C12 = [[P3[i][j] + P5[i][j] for tvf in range(zism)] for xnz in range(zism)]\n    C21 = [[P2[i][j] + P4[i][j] for tvf in range(zism)] for xnz in range(zism)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for tvf in range(zism)] for xnz in range(zism)]\n    C = [[0] * seg for _ in range(seg)]\n    for xnz in range(zism):\n        for tvf in range(zism):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    mfg = len(A)\n    if mfg <= 1:\n        return [[A[0][0] * B[0][0]]]\n    cqca = mfg // 2\n    A11 = [[A[i][j] for smy in range(cqca)] for tty in range(cqca)]\n    A12 = [[A[i][j] for smy in range(mid, n)] for tty in range(cqca)]\n    A21 = [[A[i][j] for smy in range(cqca)] for tty in range(mid, n)]\n    A22 = [[A[i][j] for smy in range(mid, n)] for tty in range(mid, n)]\n    B11 = [[B[i][j] for smy in range(cqca)] for tty in range(cqca)]\n    B12 = [[B[i][j] for smy in range(mid, n)] for tty in range(cqca)]\n    B21 = [[B[i][j] for smy in range(cqca)] for tty in range(mid, n)]\n    B22 = [[B[i][j] for smy in range(mid, n)] for tty in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for smy in range(cqca)] for tty in range(cqca)], [[B11[i][j] + B22[i][j] for smy in range(cqca)] for tty in range(cqca)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for smy in range(cqca)] for tty in range(cqca)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for smy in range(cqca)] for tty in range(cqca)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for smy in range(cqca)] for tty in range(cqca)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for smy in range(cqca)] for tty in range(cqca)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for smy in range(cqca)] for tty in range(cqca)], [[B11[i][j] + B12[i][j] for smy in range(cqca)] for tty in range(cqca)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for smy in range(cqca)] for tty in range(cqca)], [[B21[i][j] + B22[i][j] for smy in range(cqca)] for tty in range(cqca)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for smy in range(cqca)] for tty in range(cqca)]\n    C12 = [[P3[i][j] + P5[i][j] for smy in range(cqca)] for tty in range(cqca)]\n    C21 = [[P2[i][j] + P4[i][j] for smy in range(cqca)] for tty in range(cqca)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for smy in range(cqca)] for tty in range(cqca)]\n    C = [[0] * mfg for _ in range(mfg)]\n    for tty in range(cqca):\n        for smy in range(cqca):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    pgh = len(A)\n    if pgh <= 1:\n        return [[A[0][0] * B[0][0]]]\n    vuwp = pgh // 2\n    A11 = [[A[i][j] for ong in range(vuwp)] for sag in range(vuwp)]\n    A12 = [[A[i][j] for ong in range(mid, n)] for sag in range(vuwp)]\n    A21 = [[A[i][j] for ong in range(vuwp)] for sag in range(mid, n)]\n    A22 = [[A[i][j] for ong in range(mid, n)] for sag in range(mid, n)]\n    B11 = [[B[i][j] for ong in range(vuwp)] for sag in range(vuwp)]\n    B12 = [[B[i][j] for ong in range(mid, n)] for sag in range(vuwp)]\n    B21 = [[B[i][j] for ong in range(vuwp)] for sag in range(mid, n)]\n    B22 = [[B[i][j] for ong in range(mid, n)] for sag in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for ong in range(vuwp)] for sag in range(vuwp)], [[B11[i][j] + B22[i][j] for ong in range(vuwp)] for sag in range(vuwp)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for ong in range(vuwp)] for sag in range(vuwp)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for ong in range(vuwp)] for sag in range(vuwp)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for ong in range(vuwp)] for sag in range(vuwp)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for ong in range(vuwp)] for sag in range(vuwp)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for ong in range(vuwp)] for sag in range(vuwp)], [[B11[i][j] + B12[i][j] for ong in range(vuwp)] for sag in range(vuwp)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for ong in range(vuwp)] for sag in range(vuwp)], [[B21[i][j] + B22[i][j] for ong in range(vuwp)] for sag in range(vuwp)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for ong in range(vuwp)] for sag in range(vuwp)]\n    C12 = [[P3[i][j] + P5[i][j] for ong in range(vuwp)] for sag in range(vuwp)]\n    C21 = [[P2[i][j] + P4[i][j] for ong in range(vuwp)] for sag in range(vuwp)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for ong in range(vuwp)] for sag in range(vuwp)]\n    C = [[0] * pgh for _ in range(pgh)]\n    for sag in range(vuwp):\n        for ong in range(vuwp):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    eqj = len(A)\n    if eqj <= 1:\n        return [[A[0][0] * B[0][0]]]\n    wqyu = eqj // 2\n    A11 = [[A[i][j] for ibn in range(wqyu)] for yoa in range(wqyu)]\n    A12 = [[A[i][j] for ibn in range(mid, n)] for yoa in range(wqyu)]\n    A21 = [[A[i][j] for ibn in range(wqyu)] for yoa in range(mid, n)]\n    A22 = [[A[i][j] for ibn in range(mid, n)] for yoa in range(mid, n)]\n    B11 = [[B[i][j] for ibn in range(wqyu)] for yoa in range(wqyu)]\n    B12 = [[B[i][j] for ibn in range(mid, n)] for yoa in range(wqyu)]\n    B21 = [[B[i][j] for ibn in range(wqyu)] for yoa in range(mid, n)]\n    B22 = [[B[i][j] for ibn in range(mid, n)] for yoa in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for ibn in range(wqyu)] for yoa in range(wqyu)], [[B11[i][j] + B22[i][j] for ibn in range(wqyu)] for yoa in range(wqyu)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for ibn in range(wqyu)] for yoa in range(wqyu)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for ibn in range(wqyu)] for yoa in range(wqyu)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for ibn in range(wqyu)] for yoa in range(wqyu)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for ibn in range(wqyu)] for yoa in range(wqyu)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for ibn in range(wqyu)] for yoa in range(wqyu)], [[B11[i][j] + B12[i][j] for ibn in range(wqyu)] for yoa in range(wqyu)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for ibn in range(wqyu)] for yoa in range(wqyu)], [[B21[i][j] + B22[i][j] for ibn in range(wqyu)] for yoa in range(wqyu)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for ibn in range(wqyu)] for yoa in range(wqyu)]\n    C12 = [[P3[i][j] + P5[i][j] for ibn in range(wqyu)] for yoa in range(wqyu)]\n    C21 = [[P2[i][j] + P4[i][j] for ibn in range(wqyu)] for yoa in range(wqyu)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for ibn in range(wqyu)] for yoa in range(wqyu)]\n    C = [[0] * eqj for _ in range(eqj)]\n    for yoa in range(wqyu):\n        for ibn in range(wqyu):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    rod = len(A)\n    if rod <= 1:\n        return [[A[0][0] * B[0][0]]]\n    ttfe = rod // 2\n    A11 = [[A[i][j] for fto in range(ttfe)] for aan in range(ttfe)]\n    A12 = [[A[i][j] for fto in range(mid, n)] for aan in range(ttfe)]\n    A21 = [[A[i][j] for fto in range(ttfe)] for aan in range(mid, n)]\n    A22 = [[A[i][j] for fto in range(mid, n)] for aan in range(mid, n)]\n    B11 = [[B[i][j] for fto in range(ttfe)] for aan in range(ttfe)]\n    B12 = [[B[i][j] for fto in range(mid, n)] for aan in range(ttfe)]\n    B21 = [[B[i][j] for fto in range(ttfe)] for aan in range(mid, n)]\n    B22 = [[B[i][j] for fto in range(mid, n)] for aan in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for fto in range(ttfe)] for aan in range(ttfe)], [[B11[i][j] + B22[i][j] for fto in range(ttfe)] for aan in range(ttfe)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for fto in range(ttfe)] for aan in range(ttfe)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for fto in range(ttfe)] for aan in range(ttfe)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for fto in range(ttfe)] for aan in range(ttfe)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for fto in range(ttfe)] for aan in range(ttfe)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for fto in range(ttfe)] for aan in range(ttfe)], [[B11[i][j] + B12[i][j] for fto in range(ttfe)] for aan in range(ttfe)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for fto in range(ttfe)] for aan in range(ttfe)], [[B21[i][j] + B22[i][j] for fto in range(ttfe)] for aan in range(ttfe)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for fto in range(ttfe)] for aan in range(ttfe)]\n    C12 = [[P3[i][j] + P5[i][j] for fto in range(ttfe)] for aan in range(ttfe)]\n    C21 = [[P2[i][j] + P4[i][j] for fto in range(ttfe)] for aan in range(ttfe)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for fto in range(ttfe)] for aan in range(ttfe)]\n    C = [[0] * rod for _ in range(rod)]\n    for aan in range(ttfe):\n        for fto in range(ttfe):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    tgp = len(A)\n    if tgp <= 1:\n        return [[A[0][0] * B[0][0]]]\n    zovr = tgp // 2\n    A11 = [[A[i][j] for aif in range(zovr)] for gtx in range(zovr)]\n    A12 = [[A[i][j] for aif in range(mid, n)] for gtx in range(zovr)]\n    A21 = [[A[i][j] for aif in range(zovr)] for gtx in range(mid, n)]\n    A22 = [[A[i][j] for aif in range(mid, n)] for gtx in range(mid, n)]\n    B11 = [[B[i][j] for aif in range(zovr)] for gtx in range(zovr)]\n    B12 = [[B[i][j] for aif in range(mid, n)] for gtx in range(zovr)]\n    B21 = [[B[i][j] for aif in range(zovr)] for gtx in range(mid, n)]\n    B22 = [[B[i][j] for aif in range(mid, n)] for gtx in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for aif in range(zovr)] for gtx in range(zovr)], [[B11[i][j] + B22[i][j] for aif in range(zovr)] for gtx in range(zovr)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for aif in range(zovr)] for gtx in range(zovr)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for aif in range(zovr)] for gtx in range(zovr)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for aif in range(zovr)] for gtx in range(zovr)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for aif in range(zovr)] for gtx in range(zovr)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for aif in range(zovr)] for gtx in range(zovr)], [[B11[i][j] + B12[i][j] for aif in range(zovr)] for gtx in range(zovr)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for aif in range(zovr)] for gtx in range(zovr)], [[B21[i][j] + B22[i][j] for aif in range(zovr)] for gtx in range(zovr)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for aif in range(zovr)] for gtx in range(zovr)]\n    C12 = [[P3[i][j] + P5[i][j] for aif in range(zovr)] for gtx in range(zovr)]\n    C21 = [[P2[i][j] + P4[i][j] for aif in range(zovr)] for gtx in range(zovr)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for aif in range(zovr)] for gtx in range(zovr)]\n    C = [[0] * tgp for _ in range(tgp)]\n    for gtx in range(zovr):\n        for aif in range(zovr):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    eze = len(A)\n    if eze <= 1:\n        return [[A[0][0] * B[0][0]]]\n    srqp = eze // 2\n    A11 = [[A[i][j] for bkn in range(srqp)] for ams in range(srqp)]\n    A12 = [[A[i][j] for bkn in range(mid, n)] for ams in range(srqp)]\n    A21 = [[A[i][j] for bkn in range(srqp)] for ams in range(mid, n)]\n    A22 = [[A[i][j] for bkn in range(mid, n)] for ams in range(mid, n)]\n    B11 = [[B[i][j] for bkn in range(srqp)] for ams in range(srqp)]\n    B12 = [[B[i][j] for bkn in range(mid, n)] for ams in range(srqp)]\n    B21 = [[B[i][j] for bkn in range(srqp)] for ams in range(mid, n)]\n    B22 = [[B[i][j] for bkn in range(mid, n)] for ams in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for bkn in range(srqp)] for ams in range(srqp)], [[B11[i][j] + B22[i][j] for bkn in range(srqp)] for ams in range(srqp)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for bkn in range(srqp)] for ams in range(srqp)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for bkn in range(srqp)] for ams in range(srqp)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for bkn in range(srqp)] for ams in range(srqp)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for bkn in range(srqp)] for ams in range(srqp)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for bkn in range(srqp)] for ams in range(srqp)], [[B11[i][j] + B12[i][j] for bkn in range(srqp)] for ams in range(srqp)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for bkn in range(srqp)] for ams in range(srqp)], [[B21[i][j] + B22[i][j] for bkn in range(srqp)] for ams in range(srqp)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for bkn in range(srqp)] for ams in range(srqp)]\n    C12 = [[P3[i][j] + P5[i][j] for bkn in range(srqp)] for ams in range(srqp)]\n    C21 = [[P2[i][j] + P4[i][j] for bkn in range(srqp)] for ams in range(srqp)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for bkn in range(srqp)] for ams in range(srqp)]\n    C = [[0] * eze for _ in range(eze)]\n    for ams in range(srqp):\n        for bkn in range(srqp):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    vui = len(A)\n    if vui <= 1:\n        return [[A[0][0] * B[0][0]]]\n    pckf = vui // 2\n    A11 = [[A[i][j] for ica in range(pckf)] for avs in range(pckf)]\n    A12 = [[A[i][j] for ica in range(mid, n)] for avs in range(pckf)]\n    A21 = [[A[i][j] for ica in range(pckf)] for avs in range(mid, n)]\n    A22 = [[A[i][j] for ica in range(mid, n)] for avs in range(mid, n)]\n    B11 = [[B[i][j] for ica in range(pckf)] for avs in range(pckf)]\n    B12 = [[B[i][j] for ica in range(mid, n)] for avs in range(pckf)]\n    B21 = [[B[i][j] for ica in range(pckf)] for avs in range(mid, n)]\n    B22 = [[B[i][j] for ica in range(mid, n)] for avs in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for ica in range(pckf)] for avs in range(pckf)], [[B11[i][j] + B22[i][j] for ica in range(pckf)] for avs in range(pckf)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for ica in range(pckf)] for avs in range(pckf)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for ica in range(pckf)] for avs in range(pckf)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for ica in range(pckf)] for avs in range(pckf)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for ica in range(pckf)] for avs in range(pckf)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for ica in range(pckf)] for avs in range(pckf)], [[B11[i][j] + B12[i][j] for ica in range(pckf)] for avs in range(pckf)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for ica in range(pckf)] for avs in range(pckf)], [[B21[i][j] + B22[i][j] for ica in range(pckf)] for avs in range(pckf)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for ica in range(pckf)] for avs in range(pckf)]\n    C12 = [[P3[i][j] + P5[i][j] for ica in range(pckf)] for avs in range(pckf)]\n    C21 = [[P2[i][j] + P4[i][j] for ica in range(pckf)] for avs in range(pckf)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for ica in range(pckf)] for avs in range(pckf)]\n    C = [[0] * vui for _ in range(vui)]\n    for avs in range(pckf):\n        for ica in range(pckf):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    sfs = len(A)\n    if sfs <= 1:\n        return [[A[0][0] * B[0][0]]]\n    noqw = sfs // 2\n    A11 = [[A[i][j] for eeg in range(noqw)] for vru in range(noqw)]\n    A12 = [[A[i][j] for eeg in range(mid, n)] for vru in range(noqw)]\n    A21 = [[A[i][j] for eeg in range(noqw)] for vru in range(mid, n)]\n    A22 = [[A[i][j] for eeg in range(mid, n)] for vru in range(mid, n)]\n    B11 = [[B[i][j] for eeg in range(noqw)] for vru in range(noqw)]\n    B12 = [[B[i][j] for eeg in range(mid, n)] for vru in range(noqw)]\n    B21 = [[B[i][j] for eeg in range(noqw)] for vru in range(mid, n)]\n    B22 = [[B[i][j] for eeg in range(mid, n)] for vru in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for eeg in range(noqw)] for vru in range(noqw)], [[B11[i][j] + B22[i][j] for eeg in range(noqw)] for vru in range(noqw)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for eeg in range(noqw)] for vru in range(noqw)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for eeg in range(noqw)] for vru in range(noqw)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for eeg in range(noqw)] for vru in range(noqw)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for eeg in range(noqw)] for vru in range(noqw)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for eeg in range(noqw)] for vru in range(noqw)], [[B11[i][j] + B12[i][j] for eeg in range(noqw)] for vru in range(noqw)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for eeg in range(noqw)] for vru in range(noqw)], [[B21[i][j] + B22[i][j] for eeg in range(noqw)] for vru in range(noqw)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for eeg in range(noqw)] for vru in range(noqw)]\n    C12 = [[P3[i][j] + P5[i][j] for eeg in range(noqw)] for vru in range(noqw)]\n    C21 = [[P2[i][j] + P4[i][j] for eeg in range(noqw)] for vru in range(noqw)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for eeg in range(noqw)] for vru in range(noqw)]\n    C = [[0] * sfs for _ in range(sfs)]\n    for vru in range(noqw):\n        for eeg in range(noqw):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    mzy = len(A)\n    if mzy <= 1:\n        return [[A[0][0] * B[0][0]]]\n    czdl = mzy // 2\n    A11 = [[A[i][j] for xul in range(czdl)] for ymo in range(czdl)]\n    A12 = [[A[i][j] for xul in range(mid, n)] for ymo in range(czdl)]\n    A21 = [[A[i][j] for xul in range(czdl)] for ymo in range(mid, n)]\n    A22 = [[A[i][j] for xul in range(mid, n)] for ymo in range(mid, n)]\n    B11 = [[B[i][j] for xul in range(czdl)] for ymo in range(czdl)]\n    B12 = [[B[i][j] for xul in range(mid, n)] for ymo in range(czdl)]\n    B21 = [[B[i][j] for xul in range(czdl)] for ymo in range(mid, n)]\n    B22 = [[B[i][j] for xul in range(mid, n)] for ymo in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for xul in range(czdl)] for ymo in range(czdl)], [[B11[i][j] + B22[i][j] for xul in range(czdl)] for ymo in range(czdl)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for xul in range(czdl)] for ymo in range(czdl)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for xul in range(czdl)] for ymo in range(czdl)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for xul in range(czdl)] for ymo in range(czdl)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for xul in range(czdl)] for ymo in range(czdl)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for xul in range(czdl)] for ymo in range(czdl)], [[B11[i][j] + B12[i][j] for xul in range(czdl)] for ymo in range(czdl)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for xul in range(czdl)] for ymo in range(czdl)], [[B21[i][j] + B22[i][j] for xul in range(czdl)] for ymo in range(czdl)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for xul in range(czdl)] for ymo in range(czdl)]\n    C12 = [[P3[i][j] + P5[i][j] for xul in range(czdl)] for ymo in range(czdl)]\n    C21 = [[P2[i][j] + P4[i][j] for xul in range(czdl)] for ymo in range(czdl)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for xul in range(czdl)] for ymo in range(czdl)]\n    C = [[0] * mzy for _ in range(mzy)]\n    for ymo in range(czdl):\n        for xul in range(czdl):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    urv = len(A)\n    if urv <= 1:\n        return [[A[0][0] * B[0][0]]]\n    mfns = urv // 2\n    A11 = [[A[i][j] for ruy in range(mfns)] for jpm in range(mfns)]\n    A12 = [[A[i][j] for ruy in range(mid, n)] for jpm in range(mfns)]\n    A21 = [[A[i][j] for ruy in range(mfns)] for jpm in range(mid, n)]\n    A22 = [[A[i][j] for ruy in range(mid, n)] for jpm in range(mid, n)]\n    B11 = [[B[i][j] for ruy in range(mfns)] for jpm in range(mfns)]\n    B12 = [[B[i][j] for ruy in range(mid, n)] for jpm in range(mfns)]\n    B21 = [[B[i][j] for ruy in range(mfns)] for jpm in range(mid, n)]\n    B22 = [[B[i][j] for ruy in range(mid, n)] for jpm in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for ruy in range(mfns)] for jpm in range(mfns)], [[B11[i][j] + B22[i][j] for ruy in range(mfns)] for jpm in range(mfns)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for ruy in range(mfns)] for jpm in range(mfns)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for ruy in range(mfns)] for jpm in range(mfns)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for ruy in range(mfns)] for jpm in range(mfns)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for ruy in range(mfns)] for jpm in range(mfns)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for ruy in range(mfns)] for jpm in range(mfns)], [[B11[i][j] + B12[i][j] for ruy in range(mfns)] for jpm in range(mfns)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for ruy in range(mfns)] for jpm in range(mfns)], [[B21[i][j] + B22[i][j] for ruy in range(mfns)] for jpm in range(mfns)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for ruy in range(mfns)] for jpm in range(mfns)]\n    C12 = [[P3[i][j] + P5[i][j] for ruy in range(mfns)] for jpm in range(mfns)]\n    C21 = [[P2[i][j] + P4[i][j] for ruy in range(mfns)] for jpm in range(mfns)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for ruy in range(mfns)] for jpm in range(mfns)]\n    C = [[0] * urv for _ in range(urv)]\n    for jpm in range(mfns):\n        for ruy in range(mfns):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    wfn = len(A)\n    if wfn <= 1:\n        return [[A[0][0] * B[0][0]]]\n    irzu = wfn // 2\n    A11 = [[A[i][j] for vjv in range(irzu)] for jwl in range(irzu)]\n    A12 = [[A[i][j] for vjv in range(mid, n)] for jwl in range(irzu)]\n    A21 = [[A[i][j] for vjv in range(irzu)] for jwl in range(mid, n)]\n    A22 = [[A[i][j] for vjv in range(mid, n)] for jwl in range(mid, n)]\n    B11 = [[B[i][j] for vjv in range(irzu)] for jwl in range(irzu)]\n    B12 = [[B[i][j] for vjv in range(mid, n)] for jwl in range(irzu)]\n    B21 = [[B[i][j] for vjv in range(irzu)] for jwl in range(mid, n)]\n    B22 = [[B[i][j] for vjv in range(mid, n)] for jwl in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for vjv in range(irzu)] for jwl in range(irzu)], [[B11[i][j] + B22[i][j] for vjv in range(irzu)] for jwl in range(irzu)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for vjv in range(irzu)] for jwl in range(irzu)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for vjv in range(irzu)] for jwl in range(irzu)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for vjv in range(irzu)] for jwl in range(irzu)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for vjv in range(irzu)] for jwl in range(irzu)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for vjv in range(irzu)] for jwl in range(irzu)], [[B11[i][j] + B12[i][j] for vjv in range(irzu)] for jwl in range(irzu)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for vjv in range(irzu)] for jwl in range(irzu)], [[B21[i][j] + B22[i][j] for vjv in range(irzu)] for jwl in range(irzu)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for vjv in range(irzu)] for jwl in range(irzu)]\n    C12 = [[P3[i][j] + P5[i][j] for vjv in range(irzu)] for jwl in range(irzu)]\n    C21 = [[P2[i][j] + P4[i][j] for vjv in range(irzu)] for jwl in range(irzu)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for vjv in range(irzu)] for jwl in range(irzu)]\n    C = [[0] * wfn for _ in range(wfn)]\n    for jwl in range(irzu):\n        for vjv in range(irzu):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    lhv = len(A)\n    if lhv <= 1:\n        return [[A[0][0] * B[0][0]]]\n    clsl = lhv // 2\n    A11 = [[A[i][j] for ipv in range(clsl)] for avm in range(clsl)]\n    A12 = [[A[i][j] for ipv in range(mid, n)] for avm in range(clsl)]\n    A21 = [[A[i][j] for ipv in range(clsl)] for avm in range(mid, n)]\n    A22 = [[A[i][j] for ipv in range(mid, n)] for avm in range(mid, n)]\n    B11 = [[B[i][j] for ipv in range(clsl)] for avm in range(clsl)]\n    B12 = [[B[i][j] for ipv in range(mid, n)] for avm in range(clsl)]\n    B21 = [[B[i][j] for ipv in range(clsl)] for avm in range(mid, n)]\n    B22 = [[B[i][j] for ipv in range(mid, n)] for avm in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for ipv in range(clsl)] for avm in range(clsl)], [[B11[i][j] + B22[i][j] for ipv in range(clsl)] for avm in range(clsl)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for ipv in range(clsl)] for avm in range(clsl)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for ipv in range(clsl)] for avm in range(clsl)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for ipv in range(clsl)] for avm in range(clsl)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for ipv in range(clsl)] for avm in range(clsl)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for ipv in range(clsl)] for avm in range(clsl)], [[B11[i][j] + B12[i][j] for ipv in range(clsl)] for avm in range(clsl)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for ipv in range(clsl)] for avm in range(clsl)], [[B21[i][j] + B22[i][j] for ipv in range(clsl)] for avm in range(clsl)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for ipv in range(clsl)] for avm in range(clsl)]\n    C12 = [[P3[i][j] + P5[i][j] for ipv in range(clsl)] for avm in range(clsl)]\n    C21 = [[P2[i][j] + P4[i][j] for ipv in range(clsl)] for avm in range(clsl)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for ipv in range(clsl)] for avm in range(clsl)]\n    C = [[0] * lhv for _ in range(lhv)]\n    for avm in range(clsl):\n        for ipv in range(clsl):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    qmo = len(A)\n    if qmo <= 1:\n        return [[A[0][0] * B[0][0]]]\n    vzlm = qmo // 2\n    A11 = [[A[i][j] for mjq in range(vzlm)] for qrp in range(vzlm)]\n    A12 = [[A[i][j] for mjq in range(mid, n)] for qrp in range(vzlm)]\n    A21 = [[A[i][j] for mjq in range(vzlm)] for qrp in range(mid, n)]\n    A22 = [[A[i][j] for mjq in range(mid, n)] for qrp in range(mid, n)]\n    B11 = [[B[i][j] for mjq in range(vzlm)] for qrp in range(vzlm)]\n    B12 = [[B[i][j] for mjq in range(mid, n)] for qrp in range(vzlm)]\n    B21 = [[B[i][j] for mjq in range(vzlm)] for qrp in range(mid, n)]\n    B22 = [[B[i][j] for mjq in range(mid, n)] for qrp in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for mjq in range(vzlm)] for qrp in range(vzlm)], [[B11[i][j] + B22[i][j] for mjq in range(vzlm)] for qrp in range(vzlm)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for mjq in range(vzlm)] for qrp in range(vzlm)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for mjq in range(vzlm)] for qrp in range(vzlm)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for mjq in range(vzlm)] for qrp in range(vzlm)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for mjq in range(vzlm)] for qrp in range(vzlm)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for mjq in range(vzlm)] for qrp in range(vzlm)], [[B11[i][j] + B12[i][j] for mjq in range(vzlm)] for qrp in range(vzlm)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for mjq in range(vzlm)] for qrp in range(vzlm)], [[B21[i][j] + B22[i][j] for mjq in range(vzlm)] for qrp in range(vzlm)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for mjq in range(vzlm)] for qrp in range(vzlm)]\n    C12 = [[P3[i][j] + P5[i][j] for mjq in range(vzlm)] for qrp in range(vzlm)]\n    C21 = [[P2[i][j] + P4[i][j] for mjq in range(vzlm)] for qrp in range(vzlm)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for mjq in range(vzlm)] for qrp in range(vzlm)]\n    C = [[0] * qmo for _ in range(qmo)]\n    for qrp in range(vzlm):\n        for mjq in range(vzlm):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    awz = len(A)\n    if awz <= 1:\n        return [[A[0][0] * B[0][0]]]\n    mwmh = awz // 2\n    A11 = [[A[i][j] for mqn in range(mwmh)] for bcc in range(mwmh)]\n    A12 = [[A[i][j] for mqn in range(mid, n)] for bcc in range(mwmh)]\n    A21 = [[A[i][j] for mqn in range(mwmh)] for bcc in range(mid, n)]\n    A22 = [[A[i][j] for mqn in range(mid, n)] for bcc in range(mid, n)]\n    B11 = [[B[i][j] for mqn in range(mwmh)] for bcc in range(mwmh)]\n    B12 = [[B[i][j] for mqn in range(mid, n)] for bcc in range(mwmh)]\n    B21 = [[B[i][j] for mqn in range(mwmh)] for bcc in range(mid, n)]\n    B22 = [[B[i][j] for mqn in range(mid, n)] for bcc in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for mqn in range(mwmh)] for bcc in range(mwmh)], [[B11[i][j] + B22[i][j] for mqn in range(mwmh)] for bcc in range(mwmh)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for mqn in range(mwmh)] for bcc in range(mwmh)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for mqn in range(mwmh)] for bcc in range(mwmh)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for mqn in range(mwmh)] for bcc in range(mwmh)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for mqn in range(mwmh)] for bcc in range(mwmh)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for mqn in range(mwmh)] for bcc in range(mwmh)], [[B11[i][j] + B12[i][j] for mqn in range(mwmh)] for bcc in range(mwmh)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for mqn in range(mwmh)] for bcc in range(mwmh)], [[B21[i][j] + B22[i][j] for mqn in range(mwmh)] for bcc in range(mwmh)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for mqn in range(mwmh)] for bcc in range(mwmh)]\n    C12 = [[P3[i][j] + P5[i][j] for mqn in range(mwmh)] for bcc in range(mwmh)]\n    C21 = [[P2[i][j] + P4[i][j] for mqn in range(mwmh)] for bcc in range(mwmh)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for mqn in range(mwmh)] for bcc in range(mwmh)]\n    C = [[0] * awz for _ in range(awz)]\n    for bcc in range(mwmh):\n        for mqn in range(mwmh):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    kvx = len(A)\n    if kvx <= 1:\n        return [[A[0][0] * B[0][0]]]\n    mfnh = kvx // 2\n    A11 = [[A[i][j] for ssd in range(mfnh)] for kli in range(mfnh)]\n    A12 = [[A[i][j] for ssd in range(mid, n)] for kli in range(mfnh)]\n    A21 = [[A[i][j] for ssd in range(mfnh)] for kli in range(mid, n)]\n    A22 = [[A[i][j] for ssd in range(mid, n)] for kli in range(mid, n)]\n    B11 = [[B[i][j] for ssd in range(mfnh)] for kli in range(mfnh)]\n    B12 = [[B[i][j] for ssd in range(mid, n)] for kli in range(mfnh)]\n    B21 = [[B[i][j] for ssd in range(mfnh)] for kli in range(mid, n)]\n    B22 = [[B[i][j] for ssd in range(mid, n)] for kli in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for ssd in range(mfnh)] for kli in range(mfnh)], [[B11[i][j] + B22[i][j] for ssd in range(mfnh)] for kli in range(mfnh)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for ssd in range(mfnh)] for kli in range(mfnh)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for ssd in range(mfnh)] for kli in range(mfnh)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for ssd in range(mfnh)] for kli in range(mfnh)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for ssd in range(mfnh)] for kli in range(mfnh)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for ssd in range(mfnh)] for kli in range(mfnh)], [[B11[i][j] + B12[i][j] for ssd in range(mfnh)] for kli in range(mfnh)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for ssd in range(mfnh)] for kli in range(mfnh)], [[B21[i][j] + B22[i][j] for ssd in range(mfnh)] for kli in range(mfnh)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for ssd in range(mfnh)] for kli in range(mfnh)]\n    C12 = [[P3[i][j] + P5[i][j] for ssd in range(mfnh)] for kli in range(mfnh)]\n    C21 = [[P2[i][j] + P4[i][j] for ssd in range(mfnh)] for kli in range(mfnh)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for ssd in range(mfnh)] for kli in range(mfnh)]\n    C = [[0] * kvx for _ in range(kvx)]\n    for kli in range(mfnh):\n        for ssd in range(mfnh):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    ypb = len(A)\n    if ypb <= 1:\n        return [[A[0][0] * B[0][0]]]\n    xhas = ypb // 2\n    A11 = [[A[i][j] for bev in range(xhas)] for kkf in range(xhas)]\n    A12 = [[A[i][j] for bev in range(mid, n)] for kkf in range(xhas)]\n    A21 = [[A[i][j] for bev in range(xhas)] for kkf in range(mid, n)]\n    A22 = [[A[i][j] for bev in range(mid, n)] for kkf in range(mid, n)]\n    B11 = [[B[i][j] for bev in range(xhas)] for kkf in range(xhas)]\n    B12 = [[B[i][j] for bev in range(mid, n)] for kkf in range(xhas)]\n    B21 = [[B[i][j] for bev in range(xhas)] for kkf in range(mid, n)]\n    B22 = [[B[i][j] for bev in range(mid, n)] for kkf in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for bev in range(xhas)] for kkf in range(xhas)], [[B11[i][j] + B22[i][j] for bev in range(xhas)] for kkf in range(xhas)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for bev in range(xhas)] for kkf in range(xhas)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for bev in range(xhas)] for kkf in range(xhas)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for bev in range(xhas)] for kkf in range(xhas)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for bev in range(xhas)] for kkf in range(xhas)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for bev in range(xhas)] for kkf in range(xhas)], [[B11[i][j] + B12[i][j] for bev in range(xhas)] for kkf in range(xhas)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for bev in range(xhas)] for kkf in range(xhas)], [[B21[i][j] + B22[i][j] for bev in range(xhas)] for kkf in range(xhas)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for bev in range(xhas)] for kkf in range(xhas)]\n    C12 = [[P3[i][j] + P5[i][j] for bev in range(xhas)] for kkf in range(xhas)]\n    C21 = [[P2[i][j] + P4[i][j] for bev in range(xhas)] for kkf in range(xhas)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for bev in range(xhas)] for kkf in range(xhas)]\n    C = [[0] * ypb for _ in range(ypb)]\n    for kkf in range(xhas):\n        for bev in range(xhas):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    vyk = len(A)\n    if vyk <= 1:\n        return [[A[0][0] * B[0][0]]]\n    shda = vyk // 2\n    A11 = [[A[i][j] for ezc in range(shda)] for fva in range(shda)]\n    A12 = [[A[i][j] for ezc in range(mid, n)] for fva in range(shda)]\n    A21 = [[A[i][j] for ezc in range(shda)] for fva in range(mid, n)]\n    A22 = [[A[i][j] for ezc in range(mid, n)] for fva in range(mid, n)]\n    B11 = [[B[i][j] for ezc in range(shda)] for fva in range(shda)]\n    B12 = [[B[i][j] for ezc in range(mid, n)] for fva in range(shda)]\n    B21 = [[B[i][j] for ezc in range(shda)] for fva in range(mid, n)]\n    B22 = [[B[i][j] for ezc in range(mid, n)] for fva in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for ezc in range(shda)] for fva in range(shda)], [[B11[i][j] + B22[i][j] for ezc in range(shda)] for fva in range(shda)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for ezc in range(shda)] for fva in range(shda)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for ezc in range(shda)] for fva in range(shda)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for ezc in range(shda)] for fva in range(shda)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for ezc in range(shda)] for fva in range(shda)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for ezc in range(shda)] for fva in range(shda)], [[B11[i][j] + B12[i][j] for ezc in range(shda)] for fva in range(shda)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for ezc in range(shda)] for fva in range(shda)], [[B21[i][j] + B22[i][j] for ezc in range(shda)] for fva in range(shda)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for ezc in range(shda)] for fva in range(shda)]\n    C12 = [[P3[i][j] + P5[i][j] for ezc in range(shda)] for fva in range(shda)]\n    C21 = [[P2[i][j] + P4[i][j] for ezc in range(shda)] for fva in range(shda)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for ezc in range(shda)] for fva in range(shda)]\n    C = [[0] * vyk for _ in range(vyk)]\n    for fva in range(shda):\n        for ezc in range(shda):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    nza = len(A)\n    if nza <= 1:\n        return [[A[0][0] * B[0][0]]]\n    vslj = nza // 2\n    A11 = [[A[i][j] for khc in range(vslj)] for htb in range(vslj)]\n    A12 = [[A[i][j] for khc in range(mid, n)] for htb in range(vslj)]\n    A21 = [[A[i][j] for khc in range(vslj)] for htb in range(mid, n)]\n    A22 = [[A[i][j] for khc in range(mid, n)] for htb in range(mid, n)]\n    B11 = [[B[i][j] for khc in range(vslj)] for htb in range(vslj)]\n    B12 = [[B[i][j] for khc in range(mid, n)] for htb in range(vslj)]\n    B21 = [[B[i][j] for khc in range(vslj)] for htb in range(mid, n)]\n    B22 = [[B[i][j] for khc in range(mid, n)] for htb in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for khc in range(vslj)] for htb in range(vslj)], [[B11[i][j] + B22[i][j] for khc in range(vslj)] for htb in range(vslj)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for khc in range(vslj)] for htb in range(vslj)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for khc in range(vslj)] for htb in range(vslj)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for khc in range(vslj)] for htb in range(vslj)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for khc in range(vslj)] for htb in range(vslj)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for khc in range(vslj)] for htb in range(vslj)], [[B11[i][j] + B12[i][j] for khc in range(vslj)] for htb in range(vslj)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for khc in range(vslj)] for htb in range(vslj)], [[B21[i][j] + B22[i][j] for khc in range(vslj)] for htb in range(vslj)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for khc in range(vslj)] for htb in range(vslj)]\n    C12 = [[P3[i][j] + P5[i][j] for khc in range(vslj)] for htb in range(vslj)]\n    C21 = [[P2[i][j] + P4[i][j] for khc in range(vslj)] for htb in range(vslj)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for khc in range(vslj)] for htb in range(vslj)]\n    C = [[0] * nza for _ in range(nza)]\n    for htb in range(vslj):\n        for khc in range(vslj):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    ngy = len(A)\n    if ngy <= 1:\n        return [[A[0][0] * B[0][0]]]\n    ithz = ngy // 2\n    A11 = [[A[i][j] for etd in range(ithz)] for nys in range(ithz)]\n    A12 = [[A[i][j] for etd in range(mid, n)] for nys in range(ithz)]\n    A21 = [[A[i][j] for etd in range(ithz)] for nys in range(mid, n)]\n    A22 = [[A[i][j] for etd in range(mid, n)] for nys in range(mid, n)]\n    B11 = [[B[i][j] for etd in range(ithz)] for nys in range(ithz)]\n    B12 = [[B[i][j] for etd in range(mid, n)] for nys in range(ithz)]\n    B21 = [[B[i][j] for etd in range(ithz)] for nys in range(mid, n)]\n    B22 = [[B[i][j] for etd in range(mid, n)] for nys in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for etd in range(ithz)] for nys in range(ithz)], [[B11[i][j] + B22[i][j] for etd in range(ithz)] for nys in range(ithz)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for etd in range(ithz)] for nys in range(ithz)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for etd in range(ithz)] for nys in range(ithz)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for etd in range(ithz)] for nys in range(ithz)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for etd in range(ithz)] for nys in range(ithz)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for etd in range(ithz)] for nys in range(ithz)], [[B11[i][j] + B12[i][j] for etd in range(ithz)] for nys in range(ithz)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for etd in range(ithz)] for nys in range(ithz)], [[B21[i][j] + B22[i][j] for etd in range(ithz)] for nys in range(ithz)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for etd in range(ithz)] for nys in range(ithz)]\n    C12 = [[P3[i][j] + P5[i][j] for etd in range(ithz)] for nys in range(ithz)]\n    C21 = [[P2[i][j] + P4[i][j] for etd in range(ithz)] for nys in range(ithz)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for etd in range(ithz)] for nys in range(ithz)]\n    C = [[0] * ngy for _ in range(ngy)]\n    for nys in range(ithz):\n        for etd in range(ithz):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    ikb = len(A)\n    if ikb <= 1:\n        return [[A[0][0] * B[0][0]]]\n    rkok = ikb // 2\n    A11 = [[A[i][j] for olx in range(rkok)] for tfg in range(rkok)]\n    A12 = [[A[i][j] for olx in range(mid, n)] for tfg in range(rkok)]\n    A21 = [[A[i][j] for olx in range(rkok)] for tfg in range(mid, n)]\n    A22 = [[A[i][j] for olx in range(mid, n)] for tfg in range(mid, n)]\n    B11 = [[B[i][j] for olx in range(rkok)] for tfg in range(rkok)]\n    B12 = [[B[i][j] for olx in range(mid, n)] for tfg in range(rkok)]\n    B21 = [[B[i][j] for olx in range(rkok)] for tfg in range(mid, n)]\n    B22 = [[B[i][j] for olx in range(mid, n)] for tfg in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for olx in range(rkok)] for tfg in range(rkok)], [[B11[i][j] + B22[i][j] for olx in range(rkok)] for tfg in range(rkok)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for olx in range(rkok)] for tfg in range(rkok)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for olx in range(rkok)] for tfg in range(rkok)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for olx in range(rkok)] for tfg in range(rkok)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for olx in range(rkok)] for tfg in range(rkok)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for olx in range(rkok)] for tfg in range(rkok)], [[B11[i][j] + B12[i][j] for olx in range(rkok)] for tfg in range(rkok)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for olx in range(rkok)] for tfg in range(rkok)], [[B21[i][j] + B22[i][j] for olx in range(rkok)] for tfg in range(rkok)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for olx in range(rkok)] for tfg in range(rkok)]\n    C12 = [[P3[i][j] + P5[i][j] for olx in range(rkok)] for tfg in range(rkok)]\n    C21 = [[P2[i][j] + P4[i][j] for olx in range(rkok)] for tfg in range(rkok)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for olx in range(rkok)] for tfg in range(rkok)]\n    C = [[0] * ikb for _ in range(ikb)]\n    for tfg in range(rkok):\n        for olx in range(rkok):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    okx = len(A)\n    if okx <= 1:\n        return [[A[0][0] * B[0][0]]]\n    whyg = okx // 2\n    A11 = [[A[i][j] for rbh in range(whyg)] for qcp in range(whyg)]\n    A12 = [[A[i][j] for rbh in range(mid, n)] for qcp in range(whyg)]\n    A21 = [[A[i][j] for rbh in range(whyg)] for qcp in range(mid, n)]\n    A22 = [[A[i][j] for rbh in range(mid, n)] for qcp in range(mid, n)]\n    B11 = [[B[i][j] for rbh in range(whyg)] for qcp in range(whyg)]\n    B12 = [[B[i][j] for rbh in range(mid, n)] for qcp in range(whyg)]\n    B21 = [[B[i][j] for rbh in range(whyg)] for qcp in range(mid, n)]\n    B22 = [[B[i][j] for rbh in range(mid, n)] for qcp in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for rbh in range(whyg)] for qcp in range(whyg)], [[B11[i][j] + B22[i][j] for rbh in range(whyg)] for qcp in range(whyg)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for rbh in range(whyg)] for qcp in range(whyg)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for rbh in range(whyg)] for qcp in range(whyg)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for rbh in range(whyg)] for qcp in range(whyg)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for rbh in range(whyg)] for qcp in range(whyg)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for rbh in range(whyg)] for qcp in range(whyg)], [[B11[i][j] + B12[i][j] for rbh in range(whyg)] for qcp in range(whyg)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for rbh in range(whyg)] for qcp in range(whyg)], [[B21[i][j] + B22[i][j] for rbh in range(whyg)] for qcp in range(whyg)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for rbh in range(whyg)] for qcp in range(whyg)]\n    C12 = [[P3[i][j] + P5[i][j] for rbh in range(whyg)] for qcp in range(whyg)]\n    C21 = [[P2[i][j] + P4[i][j] for rbh in range(whyg)] for qcp in range(whyg)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for rbh in range(whyg)] for qcp in range(whyg)]\n    C = [[0] * okx for _ in range(okx)]\n    for qcp in range(whyg):\n        for rbh in range(whyg):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    nrd = len(A)\n    if nrd <= 1:\n        return [[A[0][0] * B[0][0]]]\n    tjpq = nrd // 2\n    A11 = [[A[i][j] for jfl in range(tjpq)] for ccy in range(tjpq)]\n    A12 = [[A[i][j] for jfl in range(mid, n)] for ccy in range(tjpq)]\n    A21 = [[A[i][j] for jfl in range(tjpq)] for ccy in range(mid, n)]\n    A22 = [[A[i][j] for jfl in range(mid, n)] for ccy in range(mid, n)]\n    B11 = [[B[i][j] for jfl in range(tjpq)] for ccy in range(tjpq)]\n    B12 = [[B[i][j] for jfl in range(mid, n)] for ccy in range(tjpq)]\n    B21 = [[B[i][j] for jfl in range(tjpq)] for ccy in range(mid, n)]\n    B22 = [[B[i][j] for jfl in range(mid, n)] for ccy in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for jfl in range(tjpq)] for ccy in range(tjpq)], [[B11[i][j] + B22[i][j] for jfl in range(tjpq)] for ccy in range(tjpq)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for jfl in range(tjpq)] for ccy in range(tjpq)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for jfl in range(tjpq)] for ccy in range(tjpq)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for jfl in range(tjpq)] for ccy in range(tjpq)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for jfl in range(tjpq)] for ccy in range(tjpq)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for jfl in range(tjpq)] for ccy in range(tjpq)], [[B11[i][j] + B12[i][j] for jfl in range(tjpq)] for ccy in range(tjpq)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for jfl in range(tjpq)] for ccy in range(tjpq)], [[B21[i][j] + B22[i][j] for jfl in range(tjpq)] for ccy in range(tjpq)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for jfl in range(tjpq)] for ccy in range(tjpq)]\n    C12 = [[P3[i][j] + P5[i][j] for jfl in range(tjpq)] for ccy in range(tjpq)]\n    C21 = [[P2[i][j] + P4[i][j] for jfl in range(tjpq)] for ccy in range(tjpq)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for jfl in range(tjpq)] for ccy in range(tjpq)]\n    C = [[0] * nrd for _ in range(nrd)]\n    for ccy in range(tjpq):\n        for jfl in range(tjpq):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    qqq = len(A)\n    if qqq <= 1:\n        return [[A[0][0] * B[0][0]]]\n    fowl = qqq // 2\n    A11 = [[A[i][j] for hqe in range(fowl)] for fmx in range(fowl)]\n    A12 = [[A[i][j] for hqe in range(mid, n)] for fmx in range(fowl)]\n    A21 = [[A[i][j] for hqe in range(fowl)] for fmx in range(mid, n)]\n    A22 = [[A[i][j] for hqe in range(mid, n)] for fmx in range(mid, n)]\n    B11 = [[B[i][j] for hqe in range(fowl)] for fmx in range(fowl)]\n    B12 = [[B[i][j] for hqe in range(mid, n)] for fmx in range(fowl)]\n    B21 = [[B[i][j] for hqe in range(fowl)] for fmx in range(mid, n)]\n    B22 = [[B[i][j] for hqe in range(mid, n)] for fmx in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for hqe in range(fowl)] for fmx in range(fowl)], [[B11[i][j] + B22[i][j] for hqe in range(fowl)] for fmx in range(fowl)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for hqe in range(fowl)] for fmx in range(fowl)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for hqe in range(fowl)] for fmx in range(fowl)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for hqe in range(fowl)] for fmx in range(fowl)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for hqe in range(fowl)] for fmx in range(fowl)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for hqe in range(fowl)] for fmx in range(fowl)], [[B11[i][j] + B12[i][j] for hqe in range(fowl)] for fmx in range(fowl)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for hqe in range(fowl)] for fmx in range(fowl)], [[B21[i][j] + B22[i][j] for hqe in range(fowl)] for fmx in range(fowl)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for hqe in range(fowl)] for fmx in range(fowl)]\n    C12 = [[P3[i][j] + P5[i][j] for hqe in range(fowl)] for fmx in range(fowl)]\n    C21 = [[P2[i][j] + P4[i][j] for hqe in range(fowl)] for fmx in range(fowl)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for hqe in range(fowl)] for fmx in range(fowl)]\n    C = [[0] * qqq for _ in range(qqq)]\n    for fmx in range(fowl):\n        for hqe in range(fowl):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    oif = len(A)\n    if oif <= 1:\n        return [[A[0][0] * B[0][0]]]\n    jteg = oif // 2\n    A11 = [[A[i][j] for uop in range(jteg)] for ujk in range(jteg)]\n    A12 = [[A[i][j] for uop in range(mid, n)] for ujk in range(jteg)]\n    A21 = [[A[i][j] for uop in range(jteg)] for ujk in range(mid, n)]\n    A22 = [[A[i][j] for uop in range(mid, n)] for ujk in range(mid, n)]\n    B11 = [[B[i][j] for uop in range(jteg)] for ujk in range(jteg)]\n    B12 = [[B[i][j] for uop in range(mid, n)] for ujk in range(jteg)]\n    B21 = [[B[i][j] for uop in range(jteg)] for ujk in range(mid, n)]\n    B22 = [[B[i][j] for uop in range(mid, n)] for ujk in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for uop in range(jteg)] for ujk in range(jteg)], [[B11[i][j] + B22[i][j] for uop in range(jteg)] for ujk in range(jteg)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for uop in range(jteg)] for ujk in range(jteg)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for uop in range(jteg)] for ujk in range(jteg)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for uop in range(jteg)] for ujk in range(jteg)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for uop in range(jteg)] for ujk in range(jteg)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for uop in range(jteg)] for ujk in range(jteg)], [[B11[i][j] + B12[i][j] for uop in range(jteg)] for ujk in range(jteg)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for uop in range(jteg)] for ujk in range(jteg)], [[B21[i][j] + B22[i][j] for uop in range(jteg)] for ujk in range(jteg)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for uop in range(jteg)] for ujk in range(jteg)]\n    C12 = [[P3[i][j] + P5[i][j] for uop in range(jteg)] for ujk in range(jteg)]\n    C21 = [[P2[i][j] + P4[i][j] for uop in range(jteg)] for ujk in range(jteg)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for uop in range(jteg)] for ujk in range(jteg)]\n    C = [[0] * oif for _ in range(oif)]\n    for ujk in range(jteg):\n        for uop in range(jteg):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    hag = len(A)\n    if hag <= 1:\n        return [[A[0][0] * B[0][0]]]\n    xqlf = hag // 2\n    A11 = [[A[i][j] for ygf in range(xqlf)] for plq in range(xqlf)]\n    A12 = [[A[i][j] for ygf in range(mid, n)] for plq in range(xqlf)]\n    A21 = [[A[i][j] for ygf in range(xqlf)] for plq in range(mid, n)]\n    A22 = [[A[i][j] for ygf in range(mid, n)] for plq in range(mid, n)]\n    B11 = [[B[i][j] for ygf in range(xqlf)] for plq in range(xqlf)]\n    B12 = [[B[i][j] for ygf in range(mid, n)] for plq in range(xqlf)]\n    B21 = [[B[i][j] for ygf in range(xqlf)] for plq in range(mid, n)]\n    B22 = [[B[i][j] for ygf in range(mid, n)] for plq in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for ygf in range(xqlf)] for plq in range(xqlf)], [[B11[i][j] + B22[i][j] for ygf in range(xqlf)] for plq in range(xqlf)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for ygf in range(xqlf)] for plq in range(xqlf)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for ygf in range(xqlf)] for plq in range(xqlf)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for ygf in range(xqlf)] for plq in range(xqlf)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for ygf in range(xqlf)] for plq in range(xqlf)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for ygf in range(xqlf)] for plq in range(xqlf)], [[B11[i][j] + B12[i][j] for ygf in range(xqlf)] for plq in range(xqlf)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for ygf in range(xqlf)] for plq in range(xqlf)], [[B21[i][j] + B22[i][j] for ygf in range(xqlf)] for plq in range(xqlf)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for ygf in range(xqlf)] for plq in range(xqlf)]\n    C12 = [[P3[i][j] + P5[i][j] for ygf in range(xqlf)] for plq in range(xqlf)]\n    C21 = [[P2[i][j] + P4[i][j] for ygf in range(xqlf)] for plq in range(xqlf)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for ygf in range(xqlf)] for plq in range(xqlf)]\n    C = [[0] * hag for _ in range(hag)]\n    for plq in range(xqlf):\n        for ygf in range(xqlf):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    hdo = len(A)\n    if hdo <= 1:\n        return [[A[0][0] * B[0][0]]]\n    ilyv = hdo // 2\n    A11 = [[A[i][j] for lbz in range(ilyv)] for rru in range(ilyv)]\n    A12 = [[A[i][j] for lbz in range(mid, n)] for rru in range(ilyv)]\n    A21 = [[A[i][j] for lbz in range(ilyv)] for rru in range(mid, n)]\n    A22 = [[A[i][j] for lbz in range(mid, n)] for rru in range(mid, n)]\n    B11 = [[B[i][j] for lbz in range(ilyv)] for rru in range(ilyv)]\n    B12 = [[B[i][j] for lbz in range(mid, n)] for rru in range(ilyv)]\n    B21 = [[B[i][j] for lbz in range(ilyv)] for rru in range(mid, n)]\n    B22 = [[B[i][j] for lbz in range(mid, n)] for rru in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for lbz in range(ilyv)] for rru in range(ilyv)], [[B11[i][j] + B22[i][j] for lbz in range(ilyv)] for rru in range(ilyv)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for lbz in range(ilyv)] for rru in range(ilyv)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for lbz in range(ilyv)] for rru in range(ilyv)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for lbz in range(ilyv)] for rru in range(ilyv)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for lbz in range(ilyv)] for rru in range(ilyv)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for lbz in range(ilyv)] for rru in range(ilyv)], [[B11[i][j] + B12[i][j] for lbz in range(ilyv)] for rru in range(ilyv)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for lbz in range(ilyv)] for rru in range(ilyv)], [[B21[i][j] + B22[i][j] for lbz in range(ilyv)] for rru in range(ilyv)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for lbz in range(ilyv)] for rru in range(ilyv)]\n    C12 = [[P3[i][j] + P5[i][j] for lbz in range(ilyv)] for rru in range(ilyv)]\n    C21 = [[P2[i][j] + P4[i][j] for lbz in range(ilyv)] for rru in range(ilyv)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for lbz in range(ilyv)] for rru in range(ilyv)]\n    C = [[0] * hdo for _ in range(hdo)]\n    for rru in range(ilyv):\n        for lbz in range(ilyv):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    pis = len(A)\n    if pis <= 1:\n        return [[A[0][0] * B[0][0]]]\n    icvz = pis // 2\n    A11 = [[A[i][j] for xhf in range(icvz)] for qhu in range(icvz)]\n    A12 = [[A[i][j] for xhf in range(mid, n)] for qhu in range(icvz)]\n    A21 = [[A[i][j] for xhf in range(icvz)] for qhu in range(mid, n)]\n    A22 = [[A[i][j] for xhf in range(mid, n)] for qhu in range(mid, n)]\n    B11 = [[B[i][j] for xhf in range(icvz)] for qhu in range(icvz)]\n    B12 = [[B[i][j] for xhf in range(mid, n)] for qhu in range(icvz)]\n    B21 = [[B[i][j] for xhf in range(icvz)] for qhu in range(mid, n)]\n    B22 = [[B[i][j] for xhf in range(mid, n)] for qhu in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for xhf in range(icvz)] for qhu in range(icvz)], [[B11[i][j] + B22[i][j] for xhf in range(icvz)] for qhu in range(icvz)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for xhf in range(icvz)] for qhu in range(icvz)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for xhf in range(icvz)] for qhu in range(icvz)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for xhf in range(icvz)] for qhu in range(icvz)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for xhf in range(icvz)] for qhu in range(icvz)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for xhf in range(icvz)] for qhu in range(icvz)], [[B11[i][j] + B12[i][j] for xhf in range(icvz)] for qhu in range(icvz)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for xhf in range(icvz)] for qhu in range(icvz)], [[B21[i][j] + B22[i][j] for xhf in range(icvz)] for qhu in range(icvz)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for xhf in range(icvz)] for qhu in range(icvz)]\n    C12 = [[P3[i][j] + P5[i][j] for xhf in range(icvz)] for qhu in range(icvz)]\n    C21 = [[P2[i][j] + P4[i][j] for xhf in range(icvz)] for qhu in range(icvz)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for xhf in range(icvz)] for qhu in range(icvz)]\n    C = [[0] * pis for _ in range(pis)]\n    for qhu in range(icvz):\n        for xhf in range(icvz):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    dan = len(A)\n    if dan <= 1:\n        return [[A[0][0] * B[0][0]]]\n    tdyy = dan // 2\n    A11 = [[A[i][j] for qpq in range(tdyy)] for iye in range(tdyy)]\n    A12 = [[A[i][j] for qpq in range(mid, n)] for iye in range(tdyy)]\n    A21 = [[A[i][j] for qpq in range(tdyy)] for iye in range(mid, n)]\n    A22 = [[A[i][j] for qpq in range(mid, n)] for iye in range(mid, n)]\n    B11 = [[B[i][j] for qpq in range(tdyy)] for iye in range(tdyy)]\n    B12 = [[B[i][j] for qpq in range(mid, n)] for iye in range(tdyy)]\n    B21 = [[B[i][j] for qpq in range(tdyy)] for iye in range(mid, n)]\n    B22 = [[B[i][j] for qpq in range(mid, n)] for iye in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for qpq in range(tdyy)] for iye in range(tdyy)], [[B11[i][j] + B22[i][j] for qpq in range(tdyy)] for iye in range(tdyy)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for qpq in range(tdyy)] for iye in range(tdyy)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for qpq in range(tdyy)] for iye in range(tdyy)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for qpq in range(tdyy)] for iye in range(tdyy)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for qpq in range(tdyy)] for iye in range(tdyy)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for qpq in range(tdyy)] for iye in range(tdyy)], [[B11[i][j] + B12[i][j] for qpq in range(tdyy)] for iye in range(tdyy)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for qpq in range(tdyy)] for iye in range(tdyy)], [[B21[i][j] + B22[i][j] for qpq in range(tdyy)] for iye in range(tdyy)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for qpq in range(tdyy)] for iye in range(tdyy)]\n    C12 = [[P3[i][j] + P5[i][j] for qpq in range(tdyy)] for iye in range(tdyy)]\n    C21 = [[P2[i][j] + P4[i][j] for qpq in range(tdyy)] for iye in range(tdyy)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for qpq in range(tdyy)] for iye in range(tdyy)]\n    C = [[0] * dan for _ in range(dan)]\n    for iye in range(tdyy):\n        for qpq in range(tdyy):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    hgp = len(A)\n    if hgp <= 1:\n        return [[A[0][0] * B[0][0]]]\n    rdss = hgp // 2\n    A11 = [[A[i][j] for nmm in range(rdss)] for hpm in range(rdss)]\n    A12 = [[A[i][j] for nmm in range(mid, n)] for hpm in range(rdss)]\n    A21 = [[A[i][j] for nmm in range(rdss)] for hpm in range(mid, n)]\n    A22 = [[A[i][j] for nmm in range(mid, n)] for hpm in range(mid, n)]\n    B11 = [[B[i][j] for nmm in range(rdss)] for hpm in range(rdss)]\n    B12 = [[B[i][j] for nmm in range(mid, n)] for hpm in range(rdss)]\n    B21 = [[B[i][j] for nmm in range(rdss)] for hpm in range(mid, n)]\n    B22 = [[B[i][j] for nmm in range(mid, n)] for hpm in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for nmm in range(rdss)] for hpm in range(rdss)], [[B11[i][j] + B22[i][j] for nmm in range(rdss)] for hpm in range(rdss)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for nmm in range(rdss)] for hpm in range(rdss)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for nmm in range(rdss)] for hpm in range(rdss)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for nmm in range(rdss)] for hpm in range(rdss)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for nmm in range(rdss)] for hpm in range(rdss)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for nmm in range(rdss)] for hpm in range(rdss)], [[B11[i][j] + B12[i][j] for nmm in range(rdss)] for hpm in range(rdss)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for nmm in range(rdss)] for hpm in range(rdss)], [[B21[i][j] + B22[i][j] for nmm in range(rdss)] for hpm in range(rdss)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for nmm in range(rdss)] for hpm in range(rdss)]\n    C12 = [[P3[i][j] + P5[i][j] for nmm in range(rdss)] for hpm in range(rdss)]\n    C21 = [[P2[i][j] + P4[i][j] for nmm in range(rdss)] for hpm in range(rdss)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for nmm in range(rdss)] for hpm in range(rdss)]\n    C = [[0] * hgp for _ in range(hgp)]\n    for hpm in range(rdss):\n        for nmm in range(rdss):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    srj = len(A)\n    if srj <= 1:\n        return [[A[0][0] * B[0][0]]]\n    sasw = srj // 2\n    A11 = [[A[i][j] for lhr in range(sasw)] for gui in range(sasw)]\n    A12 = [[A[i][j] for lhr in range(mid, n)] for gui in range(sasw)]\n    A21 = [[A[i][j] for lhr in range(sasw)] for gui in range(mid, n)]\n    A22 = [[A[i][j] for lhr in range(mid, n)] for gui in range(mid, n)]\n    B11 = [[B[i][j] for lhr in range(sasw)] for gui in range(sasw)]\n    B12 = [[B[i][j] for lhr in range(mid, n)] for gui in range(sasw)]\n    B21 = [[B[i][j] for lhr in range(sasw)] for gui in range(mid, n)]\n    B22 = [[B[i][j] for lhr in range(mid, n)] for gui in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for lhr in range(sasw)] for gui in range(sasw)], [[B11[i][j] + B22[i][j] for lhr in range(sasw)] for gui in range(sasw)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for lhr in range(sasw)] for gui in range(sasw)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for lhr in range(sasw)] for gui in range(sasw)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for lhr in range(sasw)] for gui in range(sasw)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for lhr in range(sasw)] for gui in range(sasw)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for lhr in range(sasw)] for gui in range(sasw)], [[B11[i][j] + B12[i][j] for lhr in range(sasw)] for gui in range(sasw)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for lhr in range(sasw)] for gui in range(sasw)], [[B21[i][j] + B22[i][j] for lhr in range(sasw)] for gui in range(sasw)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for lhr in range(sasw)] for gui in range(sasw)]\n    C12 = [[P3[i][j] + P5[i][j] for lhr in range(sasw)] for gui in range(sasw)]\n    C21 = [[P2[i][j] + P4[i][j] for lhr in range(sasw)] for gui in range(sasw)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for lhr in range(sasw)] for gui in range(sasw)]\n    C = [[0] * srj for _ in range(srj)]\n    for gui in range(sasw):\n        for lhr in range(sasw):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    oij = len(A)\n    if oij <= 1:\n        return [[A[0][0] * B[0][0]]]\n    hqhp = oij // 2\n    A11 = [[A[i][j] for oqy in range(hqhp)] for kpd in range(hqhp)]\n    A12 = [[A[i][j] for oqy in range(mid, n)] for kpd in range(hqhp)]\n    A21 = [[A[i][j] for oqy in range(hqhp)] for kpd in range(mid, n)]\n    A22 = [[A[i][j] for oqy in range(mid, n)] for kpd in range(mid, n)]\n    B11 = [[B[i][j] for oqy in range(hqhp)] for kpd in range(hqhp)]\n    B12 = [[B[i][j] for oqy in range(mid, n)] for kpd in range(hqhp)]\n    B21 = [[B[i][j] for oqy in range(hqhp)] for kpd in range(mid, n)]\n    B22 = [[B[i][j] for oqy in range(mid, n)] for kpd in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for oqy in range(hqhp)] for kpd in range(hqhp)], [[B11[i][j] + B22[i][j] for oqy in range(hqhp)] for kpd in range(hqhp)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for oqy in range(hqhp)] for kpd in range(hqhp)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for oqy in range(hqhp)] for kpd in range(hqhp)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for oqy in range(hqhp)] for kpd in range(hqhp)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for oqy in range(hqhp)] for kpd in range(hqhp)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for oqy in range(hqhp)] for kpd in range(hqhp)], [[B11[i][j] + B12[i][j] for oqy in range(hqhp)] for kpd in range(hqhp)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for oqy in range(hqhp)] for kpd in range(hqhp)], [[B21[i][j] + B22[i][j] for oqy in range(hqhp)] for kpd in range(hqhp)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for oqy in range(hqhp)] for kpd in range(hqhp)]\n    C12 = [[P3[i][j] + P5[i][j] for oqy in range(hqhp)] for kpd in range(hqhp)]\n    C21 = [[P2[i][j] + P4[i][j] for oqy in range(hqhp)] for kpd in range(hqhp)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for oqy in range(hqhp)] for kpd in range(hqhp)]\n    C = [[0] * oij for _ in range(oij)]\n    for kpd in range(hqhp):\n        for oqy in range(hqhp):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    lvq = len(A)\n    if lvq <= 1:\n        return [[A[0][0] * B[0][0]]]\n    bmfd = lvq // 2\n    A11 = [[A[i][j] for dvq in range(bmfd)] for lpj in range(bmfd)]\n    A12 = [[A[i][j] for dvq in range(mid, n)] for lpj in range(bmfd)]\n    A21 = [[A[i][j] for dvq in range(bmfd)] for lpj in range(mid, n)]\n    A22 = [[A[i][j] for dvq in range(mid, n)] for lpj in range(mid, n)]\n    B11 = [[B[i][j] for dvq in range(bmfd)] for lpj in range(bmfd)]\n    B12 = [[B[i][j] for dvq in range(mid, n)] for lpj in range(bmfd)]\n    B21 = [[B[i][j] for dvq in range(bmfd)] for lpj in range(mid, n)]\n    B22 = [[B[i][j] for dvq in range(mid, n)] for lpj in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for dvq in range(bmfd)] for lpj in range(bmfd)], [[B11[i][j] + B22[i][j] for dvq in range(bmfd)] for lpj in range(bmfd)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for dvq in range(bmfd)] for lpj in range(bmfd)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for dvq in range(bmfd)] for lpj in range(bmfd)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for dvq in range(bmfd)] for lpj in range(bmfd)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for dvq in range(bmfd)] for lpj in range(bmfd)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for dvq in range(bmfd)] for lpj in range(bmfd)], [[B11[i][j] + B12[i][j] for dvq in range(bmfd)] for lpj in range(bmfd)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for dvq in range(bmfd)] for lpj in range(bmfd)], [[B21[i][j] + B22[i][j] for dvq in range(bmfd)] for lpj in range(bmfd)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for dvq in range(bmfd)] for lpj in range(bmfd)]\n    C12 = [[P3[i][j] + P5[i][j] for dvq in range(bmfd)] for lpj in range(bmfd)]\n    C21 = [[P2[i][j] + P4[i][j] for dvq in range(bmfd)] for lpj in range(bmfd)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for dvq in range(bmfd)] for lpj in range(bmfd)]\n    C = [[0] * lvq for _ in range(lvq)]\n    for lpj in range(bmfd):\n        for dvq in range(bmfd):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    ujx = len(A)\n    if ujx <= 1:\n        return [[A[0][0] * B[0][0]]]\n    kcit = ujx // 2\n    A11 = [[A[i][j] for ytx in range(kcit)] for ypg in range(kcit)]\n    A12 = [[A[i][j] for ytx in range(mid, n)] for ypg in range(kcit)]\n    A21 = [[A[i][j] for ytx in range(kcit)] for ypg in range(mid, n)]\n    A22 = [[A[i][j] for ytx in range(mid, n)] for ypg in range(mid, n)]\n    B11 = [[B[i][j] for ytx in range(kcit)] for ypg in range(kcit)]\n    B12 = [[B[i][j] for ytx in range(mid, n)] for ypg in range(kcit)]\n    B21 = [[B[i][j] for ytx in range(kcit)] for ypg in range(mid, n)]\n    B22 = [[B[i][j] for ytx in range(mid, n)] for ypg in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for ytx in range(kcit)] for ypg in range(kcit)], [[B11[i][j] + B22[i][j] for ytx in range(kcit)] for ypg in range(kcit)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for ytx in range(kcit)] for ypg in range(kcit)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for ytx in range(kcit)] for ypg in range(kcit)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for ytx in range(kcit)] for ypg in range(kcit)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for ytx in range(kcit)] for ypg in range(kcit)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for ytx in range(kcit)] for ypg in range(kcit)], [[B11[i][j] + B12[i][j] for ytx in range(kcit)] for ypg in range(kcit)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for ytx in range(kcit)] for ypg in range(kcit)], [[B21[i][j] + B22[i][j] for ytx in range(kcit)] for ypg in range(kcit)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for ytx in range(kcit)] for ypg in range(kcit)]\n    C12 = [[P3[i][j] + P5[i][j] for ytx in range(kcit)] for ypg in range(kcit)]\n    C21 = [[P2[i][j] + P4[i][j] for ytx in range(kcit)] for ypg in range(kcit)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for ytx in range(kcit)] for ypg in range(kcit)]\n    C = [[0] * ujx for _ in range(ujx)]\n    for ypg in range(kcit):\n        for ytx in range(kcit):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    hza = len(A)\n    if hza <= 1:\n        return [[A[0][0] * B[0][0]]]\n    ytcf = hza // 2\n    A11 = [[A[i][j] for owh in range(ytcf)] for cbq in range(ytcf)]\n    A12 = [[A[i][j] for owh in range(mid, n)] for cbq in range(ytcf)]\n    A21 = [[A[i][j] for owh in range(ytcf)] for cbq in range(mid, n)]\n    A22 = [[A[i][j] for owh in range(mid, n)] for cbq in range(mid, n)]\n    B11 = [[B[i][j] for owh in range(ytcf)] for cbq in range(ytcf)]\n    B12 = [[B[i][j] for owh in range(mid, n)] for cbq in range(ytcf)]\n    B21 = [[B[i][j] for owh in range(ytcf)] for cbq in range(mid, n)]\n    B22 = [[B[i][j] for owh in range(mid, n)] for cbq in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for owh in range(ytcf)] for cbq in range(ytcf)], [[B11[i][j] + B22[i][j] for owh in range(ytcf)] for cbq in range(ytcf)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for owh in range(ytcf)] for cbq in range(ytcf)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for owh in range(ytcf)] for cbq in range(ytcf)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for owh in range(ytcf)] for cbq in range(ytcf)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for owh in range(ytcf)] for cbq in range(ytcf)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for owh in range(ytcf)] for cbq in range(ytcf)], [[B11[i][j] + B12[i][j] for owh in range(ytcf)] for cbq in range(ytcf)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for owh in range(ytcf)] for cbq in range(ytcf)], [[B21[i][j] + B22[i][j] for owh in range(ytcf)] for cbq in range(ytcf)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for owh in range(ytcf)] for cbq in range(ytcf)]\n    C12 = [[P3[i][j] + P5[i][j] for owh in range(ytcf)] for cbq in range(ytcf)]\n    C21 = [[P2[i][j] + P4[i][j] for owh in range(ytcf)] for cbq in range(ytcf)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for owh in range(ytcf)] for cbq in range(ytcf)]\n    C = [[0] * hza for _ in range(hza)]\n    for cbq in range(ytcf):\n        for owh in range(ytcf):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    lfe = len(A)\n    if lfe <= 1:\n        return [[A[0][0] * B[0][0]]]\n    icvx = lfe // 2\n    A11 = [[A[i][j] for txw in range(icvx)] for rzb in range(icvx)]\n    A12 = [[A[i][j] for txw in range(mid, n)] for rzb in range(icvx)]\n    A21 = [[A[i][j] for txw in range(icvx)] for rzb in range(mid, n)]\n    A22 = [[A[i][j] for txw in range(mid, n)] for rzb in range(mid, n)]\n    B11 = [[B[i][j] for txw in range(icvx)] for rzb in range(icvx)]\n    B12 = [[B[i][j] for txw in range(mid, n)] for rzb in range(icvx)]\n    B21 = [[B[i][j] for txw in range(icvx)] for rzb in range(mid, n)]\n    B22 = [[B[i][j] for txw in range(mid, n)] for rzb in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for txw in range(icvx)] for rzb in range(icvx)], [[B11[i][j] + B22[i][j] for txw in range(icvx)] for rzb in range(icvx)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for txw in range(icvx)] for rzb in range(icvx)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for txw in range(icvx)] for rzb in range(icvx)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for txw in range(icvx)] for rzb in range(icvx)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for txw in range(icvx)] for rzb in range(icvx)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for txw in range(icvx)] for rzb in range(icvx)], [[B11[i][j] + B12[i][j] for txw in range(icvx)] for rzb in range(icvx)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for txw in range(icvx)] for rzb in range(icvx)], [[B21[i][j] + B22[i][j] for txw in range(icvx)] for rzb in range(icvx)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for txw in range(icvx)] for rzb in range(icvx)]\n    C12 = [[P3[i][j] + P5[i][j] for txw in range(icvx)] for rzb in range(icvx)]\n    C21 = [[P2[i][j] + P4[i][j] for txw in range(icvx)] for rzb in range(icvx)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for txw in range(icvx)] for rzb in range(icvx)]\n    C = [[0] * lfe for _ in range(lfe)]\n    for rzb in range(icvx):\n        for txw in range(icvx):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    bpz = len(A)\n    if bpz <= 1:\n        return [[A[0][0] * B[0][0]]]\n    wcxq = bpz // 2\n    A11 = [[A[i][j] for jsg in range(wcxq)] for lsy in range(wcxq)]\n    A12 = [[A[i][j] for jsg in range(mid, n)] for lsy in range(wcxq)]\n    A21 = [[A[i][j] for jsg in range(wcxq)] for lsy in range(mid, n)]\n    A22 = [[A[i][j] for jsg in range(mid, n)] for lsy in range(mid, n)]\n    B11 = [[B[i][j] for jsg in range(wcxq)] for lsy in range(wcxq)]\n    B12 = [[B[i][j] for jsg in range(mid, n)] for lsy in range(wcxq)]\n    B21 = [[B[i][j] for jsg in range(wcxq)] for lsy in range(mid, n)]\n    B22 = [[B[i][j] for jsg in range(mid, n)] for lsy in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for jsg in range(wcxq)] for lsy in range(wcxq)], [[B11[i][j] + B22[i][j] for jsg in range(wcxq)] for lsy in range(wcxq)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for jsg in range(wcxq)] for lsy in range(wcxq)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for jsg in range(wcxq)] for lsy in range(wcxq)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for jsg in range(wcxq)] for lsy in range(wcxq)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for jsg in range(wcxq)] for lsy in range(wcxq)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for jsg in range(wcxq)] for lsy in range(wcxq)], [[B11[i][j] + B12[i][j] for jsg in range(wcxq)] for lsy in range(wcxq)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for jsg in range(wcxq)] for lsy in range(wcxq)], [[B21[i][j] + B22[i][j] for jsg in range(wcxq)] for lsy in range(wcxq)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for jsg in range(wcxq)] for lsy in range(wcxq)]\n    C12 = [[P3[i][j] + P5[i][j] for jsg in range(wcxq)] for lsy in range(wcxq)]\n    C21 = [[P2[i][j] + P4[i][j] for jsg in range(wcxq)] for lsy in range(wcxq)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for jsg in range(wcxq)] for lsy in range(wcxq)]\n    C = [[0] * bpz for _ in range(bpz)]\n    for lsy in range(wcxq):\n        for jsg in range(wcxq):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    nyk = len(A)\n    if nyk <= 1:\n        return [[A[0][0] * B[0][0]]]\n    bulm = nyk // 2\n    A11 = [[A[i][j] for znw in range(bulm)] for loj in range(bulm)]\n    A12 = [[A[i][j] for znw in range(mid, n)] for loj in range(bulm)]\n    A21 = [[A[i][j] for znw in range(bulm)] for loj in range(mid, n)]\n    A22 = [[A[i][j] for znw in range(mid, n)] for loj in range(mid, n)]\n    B11 = [[B[i][j] for znw in range(bulm)] for loj in range(bulm)]\n    B12 = [[B[i][j] for znw in range(mid, n)] for loj in range(bulm)]\n    B21 = [[B[i][j] for znw in range(bulm)] for loj in range(mid, n)]\n    B22 = [[B[i][j] for znw in range(mid, n)] for loj in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for znw in range(bulm)] for loj in range(bulm)], [[B11[i][j] + B22[i][j] for znw in range(bulm)] for loj in range(bulm)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for znw in range(bulm)] for loj in range(bulm)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for znw in range(bulm)] for loj in range(bulm)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for znw in range(bulm)] for loj in range(bulm)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for znw in range(bulm)] for loj in range(bulm)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for znw in range(bulm)] for loj in range(bulm)], [[B11[i][j] + B12[i][j] for znw in range(bulm)] for loj in range(bulm)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for znw in range(bulm)] for loj in range(bulm)], [[B21[i][j] + B22[i][j] for znw in range(bulm)] for loj in range(bulm)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for znw in range(bulm)] for loj in range(bulm)]\n    C12 = [[P3[i][j] + P5[i][j] for znw in range(bulm)] for loj in range(bulm)]\n    C21 = [[P2[i][j] + P4[i][j] for znw in range(bulm)] for loj in range(bulm)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for znw in range(bulm)] for loj in range(bulm)]\n    C = [[0] * nyk for _ in range(nyk)]\n    for loj in range(bulm):\n        for znw in range(bulm):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    mvi = len(A)\n    if mvi <= 1:\n        return [[A[0][0] * B[0][0]]]\n    tdqn = mvi // 2\n    A11 = [[A[i][j] for ima in range(tdqn)] for juq in range(tdqn)]\n    A12 = [[A[i][j] for ima in range(mid, n)] for juq in range(tdqn)]\n    A21 = [[A[i][j] for ima in range(tdqn)] for juq in range(mid, n)]\n    A22 = [[A[i][j] for ima in range(mid, n)] for juq in range(mid, n)]\n    B11 = [[B[i][j] for ima in range(tdqn)] for juq in range(tdqn)]\n    B12 = [[B[i][j] for ima in range(mid, n)] for juq in range(tdqn)]\n    B21 = [[B[i][j] for ima in range(tdqn)] for juq in range(mid, n)]\n    B22 = [[B[i][j] for ima in range(mid, n)] for juq in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for ima in range(tdqn)] for juq in range(tdqn)], [[B11[i][j] + B22[i][j] for ima in range(tdqn)] for juq in range(tdqn)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for ima in range(tdqn)] for juq in range(tdqn)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for ima in range(tdqn)] for juq in range(tdqn)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for ima in range(tdqn)] for juq in range(tdqn)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for ima in range(tdqn)] for juq in range(tdqn)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for ima in range(tdqn)] for juq in range(tdqn)], [[B11[i][j] + B12[i][j] for ima in range(tdqn)] for juq in range(tdqn)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for ima in range(tdqn)] for juq in range(tdqn)], [[B21[i][j] + B22[i][j] for ima in range(tdqn)] for juq in range(tdqn)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for ima in range(tdqn)] for juq in range(tdqn)]\n    C12 = [[P3[i][j] + P5[i][j] for ima in range(tdqn)] for juq in range(tdqn)]\n    C21 = [[P2[i][j] + P4[i][j] for ima in range(tdqn)] for juq in range(tdqn)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for ima in range(tdqn)] for juq in range(tdqn)]\n    C = [[0] * mvi for _ in range(mvi)]\n    for juq in range(tdqn):\n        for ima in range(tdqn):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    iks = len(A)\n    if iks <= 1:\n        return [[A[0][0] * B[0][0]]]\n    nnef = iks // 2\n    A11 = [[A[i][j] for bjg in range(nnef)] for sdt in range(nnef)]\n    A12 = [[A[i][j] for bjg in range(mid, n)] for sdt in range(nnef)]\n    A21 = [[A[i][j] for bjg in range(nnef)] for sdt in range(mid, n)]\n    A22 = [[A[i][j] for bjg in range(mid, n)] for sdt in range(mid, n)]\n    B11 = [[B[i][j] for bjg in range(nnef)] for sdt in range(nnef)]\n    B12 = [[B[i][j] for bjg in range(mid, n)] for sdt in range(nnef)]\n    B21 = [[B[i][j] for bjg in range(nnef)] for sdt in range(mid, n)]\n    B22 = [[B[i][j] for bjg in range(mid, n)] for sdt in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for bjg in range(nnef)] for sdt in range(nnef)], [[B11[i][j] + B22[i][j] for bjg in range(nnef)] for sdt in range(nnef)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for bjg in range(nnef)] for sdt in range(nnef)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for bjg in range(nnef)] for sdt in range(nnef)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for bjg in range(nnef)] for sdt in range(nnef)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for bjg in range(nnef)] for sdt in range(nnef)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for bjg in range(nnef)] for sdt in range(nnef)], [[B11[i][j] + B12[i][j] for bjg in range(nnef)] for sdt in range(nnef)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for bjg in range(nnef)] for sdt in range(nnef)], [[B21[i][j] + B22[i][j] for bjg in range(nnef)] for sdt in range(nnef)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for bjg in range(nnef)] for sdt in range(nnef)]\n    C12 = [[P3[i][j] + P5[i][j] for bjg in range(nnef)] for sdt in range(nnef)]\n    C21 = [[P2[i][j] + P4[i][j] for bjg in range(nnef)] for sdt in range(nnef)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for bjg in range(nnef)] for sdt in range(nnef)]\n    C = [[0] * iks for _ in range(iks)]\n    for sdt in range(nnef):\n        for bjg in range(nnef):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    zjv = len(A)\n    if zjv <= 1:\n        return [[A[0][0] * B[0][0]]]\n    vbfp = zjv // 2\n    A11 = [[A[i][j] for bch in range(vbfp)] for azj in range(vbfp)]\n    A12 = [[A[i][j] for bch in range(mid, n)] for azj in range(vbfp)]\n    A21 = [[A[i][j] for bch in range(vbfp)] for azj in range(mid, n)]\n    A22 = [[A[i][j] for bch in range(mid, n)] for azj in range(mid, n)]\n    B11 = [[B[i][j] for bch in range(vbfp)] for azj in range(vbfp)]\n    B12 = [[B[i][j] for bch in range(mid, n)] for azj in range(vbfp)]\n    B21 = [[B[i][j] for bch in range(vbfp)] for azj in range(mid, n)]\n    B22 = [[B[i][j] for bch in range(mid, n)] for azj in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for bch in range(vbfp)] for azj in range(vbfp)], [[B11[i][j] + B22[i][j] for bch in range(vbfp)] for azj in range(vbfp)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for bch in range(vbfp)] for azj in range(vbfp)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for bch in range(vbfp)] for azj in range(vbfp)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for bch in range(vbfp)] for azj in range(vbfp)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for bch in range(vbfp)] for azj in range(vbfp)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for bch in range(vbfp)] for azj in range(vbfp)], [[B11[i][j] + B12[i][j] for bch in range(vbfp)] for azj in range(vbfp)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for bch in range(vbfp)] for azj in range(vbfp)], [[B21[i][j] + B22[i][j] for bch in range(vbfp)] for azj in range(vbfp)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for bch in range(vbfp)] for azj in range(vbfp)]\n    C12 = [[P3[i][j] + P5[i][j] for bch in range(vbfp)] for azj in range(vbfp)]\n    C21 = [[P2[i][j] + P4[i][j] for bch in range(vbfp)] for azj in range(vbfp)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for bch in range(vbfp)] for azj in range(vbfp)]\n    C = [[0] * zjv for _ in range(zjv)]\n    for azj in range(vbfp):\n        for bch in range(vbfp):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    cef = len(A)\n    if cef <= 1:\n        return [[A[0][0] * B[0][0]]]\n    llph = cef // 2\n    A11 = [[A[i][j] for xvl in range(llph)] for esk in range(llph)]\n    A12 = [[A[i][j] for xvl in range(mid, n)] for esk in range(llph)]\n    A21 = [[A[i][j] for xvl in range(llph)] for esk in range(mid, n)]\n    A22 = [[A[i][j] for xvl in range(mid, n)] for esk in range(mid, n)]\n    B11 = [[B[i][j] for xvl in range(llph)] for esk in range(llph)]\n    B12 = [[B[i][j] for xvl in range(mid, n)] for esk in range(llph)]\n    B21 = [[B[i][j] for xvl in range(llph)] for esk in range(mid, n)]\n    B22 = [[B[i][j] for xvl in range(mid, n)] for esk in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for xvl in range(llph)] for esk in range(llph)], [[B11[i][j] + B22[i][j] for xvl in range(llph)] for esk in range(llph)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for xvl in range(llph)] for esk in range(llph)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for xvl in range(llph)] for esk in range(llph)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for xvl in range(llph)] for esk in range(llph)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for xvl in range(llph)] for esk in range(llph)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for xvl in range(llph)] for esk in range(llph)], [[B11[i][j] + B12[i][j] for xvl in range(llph)] for esk in range(llph)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for xvl in range(llph)] for esk in range(llph)], [[B21[i][j] + B22[i][j] for xvl in range(llph)] for esk in range(llph)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for xvl in range(llph)] for esk in range(llph)]\n    C12 = [[P3[i][j] + P5[i][j] for xvl in range(llph)] for esk in range(llph)]\n    C21 = [[P2[i][j] + P4[i][j] for xvl in range(llph)] for esk in range(llph)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for xvl in range(llph)] for esk in range(llph)]\n    C = [[0] * cef for _ in range(cef)]\n    for esk in range(llph):\n        for xvl in range(llph):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    xty = len(A)\n    if xty <= 1:\n        return [[A[0][0] * B[0][0]]]\n    rpsp = xty // 2\n    A11 = [[A[i][j] for bad in range(rpsp)] for huu in range(rpsp)]\n    A12 = [[A[i][j] for bad in range(mid, n)] for huu in range(rpsp)]\n    A21 = [[A[i][j] for bad in range(rpsp)] for huu in range(mid, n)]\n    A22 = [[A[i][j] for bad in range(mid, n)] for huu in range(mid, n)]\n    B11 = [[B[i][j] for bad in range(rpsp)] for huu in range(rpsp)]\n    B12 = [[B[i][j] for bad in range(mid, n)] for huu in range(rpsp)]\n    B21 = [[B[i][j] for bad in range(rpsp)] for huu in range(mid, n)]\n    B22 = [[B[i][j] for bad in range(mid, n)] for huu in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for bad in range(rpsp)] for huu in range(rpsp)], [[B11[i][j] + B22[i][j] for bad in range(rpsp)] for huu in range(rpsp)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for bad in range(rpsp)] for huu in range(rpsp)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for bad in range(rpsp)] for huu in range(rpsp)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for bad in range(rpsp)] for huu in range(rpsp)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for bad in range(rpsp)] for huu in range(rpsp)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for bad in range(rpsp)] for huu in range(rpsp)], [[B11[i][j] + B12[i][j] for bad in range(rpsp)] for huu in range(rpsp)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for bad in range(rpsp)] for huu in range(rpsp)], [[B21[i][j] + B22[i][j] for bad in range(rpsp)] for huu in range(rpsp)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for bad in range(rpsp)] for huu in range(rpsp)]\n    C12 = [[P3[i][j] + P5[i][j] for bad in range(rpsp)] for huu in range(rpsp)]\n    C21 = [[P2[i][j] + P4[i][j] for bad in range(rpsp)] for huu in range(rpsp)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for bad in range(rpsp)] for huu in range(rpsp)]\n    C = [[0] * xty for _ in range(xty)]\n    for huu in range(rpsp):\n        for bad in range(rpsp):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    sjq = len(A)\n    if sjq <= 1:\n        return [[A[0][0] * B[0][0]]]\n    kbdf = sjq // 2\n    A11 = [[A[i][j] for zeh in range(kbdf)] for ocp in range(kbdf)]\n    A12 = [[A[i][j] for zeh in range(mid, n)] for ocp in range(kbdf)]\n    A21 = [[A[i][j] for zeh in range(kbdf)] for ocp in range(mid, n)]\n    A22 = [[A[i][j] for zeh in range(mid, n)] for ocp in range(mid, n)]\n    B11 = [[B[i][j] for zeh in range(kbdf)] for ocp in range(kbdf)]\n    B12 = [[B[i][j] for zeh in range(mid, n)] for ocp in range(kbdf)]\n    B21 = [[B[i][j] for zeh in range(kbdf)] for ocp in range(mid, n)]\n    B22 = [[B[i][j] for zeh in range(mid, n)] for ocp in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for zeh in range(kbdf)] for ocp in range(kbdf)], [[B11[i][j] + B22[i][j] for zeh in range(kbdf)] for ocp in range(kbdf)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for zeh in range(kbdf)] for ocp in range(kbdf)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for zeh in range(kbdf)] for ocp in range(kbdf)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for zeh in range(kbdf)] for ocp in range(kbdf)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for zeh in range(kbdf)] for ocp in range(kbdf)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for zeh in range(kbdf)] for ocp in range(kbdf)], [[B11[i][j] + B12[i][j] for zeh in range(kbdf)] for ocp in range(kbdf)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for zeh in range(kbdf)] for ocp in range(kbdf)], [[B21[i][j] + B22[i][j] for zeh in range(kbdf)] for ocp in range(kbdf)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for zeh in range(kbdf)] for ocp in range(kbdf)]\n    C12 = [[P3[i][j] + P5[i][j] for zeh in range(kbdf)] for ocp in range(kbdf)]\n    C21 = [[P2[i][j] + P4[i][j] for zeh in range(kbdf)] for ocp in range(kbdf)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for zeh in range(kbdf)] for ocp in range(kbdf)]\n    C = [[0] * sjq for _ in range(sjq)]\n    for ocp in range(kbdf):\n        for zeh in range(kbdf):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    xzx = len(A)\n    if xzx <= 1:\n        return [[A[0][0] * B[0][0]]]\n    ukok = xzx // 2\n    A11 = [[A[i][j] for yaa in range(ukok)] for yrx in range(ukok)]\n    A12 = [[A[i][j] for yaa in range(mid, n)] for yrx in range(ukok)]\n    A21 = [[A[i][j] for yaa in range(ukok)] for yrx in range(mid, n)]\n    A22 = [[A[i][j] for yaa in range(mid, n)] for yrx in range(mid, n)]\n    B11 = [[B[i][j] for yaa in range(ukok)] for yrx in range(ukok)]\n    B12 = [[B[i][j] for yaa in range(mid, n)] for yrx in range(ukok)]\n    B21 = [[B[i][j] for yaa in range(ukok)] for yrx in range(mid, n)]\n    B22 = [[B[i][j] for yaa in range(mid, n)] for yrx in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for yaa in range(ukok)] for yrx in range(ukok)], [[B11[i][j] + B22[i][j] for yaa in range(ukok)] for yrx in range(ukok)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for yaa in range(ukok)] for yrx in range(ukok)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for yaa in range(ukok)] for yrx in range(ukok)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for yaa in range(ukok)] for yrx in range(ukok)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for yaa in range(ukok)] for yrx in range(ukok)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for yaa in range(ukok)] for yrx in range(ukok)], [[B11[i][j] + B12[i][j] for yaa in range(ukok)] for yrx in range(ukok)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for yaa in range(ukok)] for yrx in range(ukok)], [[B21[i][j] + B22[i][j] for yaa in range(ukok)] for yrx in range(ukok)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for yaa in range(ukok)] for yrx in range(ukok)]\n    C12 = [[P3[i][j] + P5[i][j] for yaa in range(ukok)] for yrx in range(ukok)]\n    C21 = [[P2[i][j] + P4[i][j] for yaa in range(ukok)] for yrx in range(ukok)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for yaa in range(ukok)] for yrx in range(ukok)]\n    C = [[0] * xzx for _ in range(xzx)]\n    for yrx in range(ukok):\n        for yaa in range(ukok):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    htr = len(A)\n    if htr <= 1:\n        return [[A[0][0] * B[0][0]]]\n    xuxx = htr // 2\n    A11 = [[A[i][j] for oto in range(xuxx)] for uis in range(xuxx)]\n    A12 = [[A[i][j] for oto in range(mid, n)] for uis in range(xuxx)]\n    A21 = [[A[i][j] for oto in range(xuxx)] for uis in range(mid, n)]\n    A22 = [[A[i][j] for oto in range(mid, n)] for uis in range(mid, n)]\n    B11 = [[B[i][j] for oto in range(xuxx)] for uis in range(xuxx)]\n    B12 = [[B[i][j] for oto in range(mid, n)] for uis in range(xuxx)]\n    B21 = [[B[i][j] for oto in range(xuxx)] for uis in range(mid, n)]\n    B22 = [[B[i][j] for oto in range(mid, n)] for uis in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for oto in range(xuxx)] for uis in range(xuxx)], [[B11[i][j] + B22[i][j] for oto in range(xuxx)] for uis in range(xuxx)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for oto in range(xuxx)] for uis in range(xuxx)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for oto in range(xuxx)] for uis in range(xuxx)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for oto in range(xuxx)] for uis in range(xuxx)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for oto in range(xuxx)] for uis in range(xuxx)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for oto in range(xuxx)] for uis in range(xuxx)], [[B11[i][j] + B12[i][j] for oto in range(xuxx)] for uis in range(xuxx)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for oto in range(xuxx)] for uis in range(xuxx)], [[B21[i][j] + B22[i][j] for oto in range(xuxx)] for uis in range(xuxx)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for oto in range(xuxx)] for uis in range(xuxx)]\n    C12 = [[P3[i][j] + P5[i][j] for oto in range(xuxx)] for uis in range(xuxx)]\n    C21 = [[P2[i][j] + P4[i][j] for oto in range(xuxx)] for uis in range(xuxx)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for oto in range(xuxx)] for uis in range(xuxx)]\n    C = [[0] * htr for _ in range(htr)]\n    for uis in range(xuxx):\n        for oto in range(xuxx):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    rgc = len(A)\n    if rgc <= 1:\n        return [[A[0][0] * B[0][0]]]\n    gjez = rgc // 2\n    A11 = [[A[i][j] for nrh in range(gjez)] for cgu in range(gjez)]\n    A12 = [[A[i][j] for nrh in range(mid, n)] for cgu in range(gjez)]\n    A21 = [[A[i][j] for nrh in range(gjez)] for cgu in range(mid, n)]\n    A22 = [[A[i][j] for nrh in range(mid, n)] for cgu in range(mid, n)]\n    B11 = [[B[i][j] for nrh in range(gjez)] for cgu in range(gjez)]\n    B12 = [[B[i][j] for nrh in range(mid, n)] for cgu in range(gjez)]\n    B21 = [[B[i][j] for nrh in range(gjez)] for cgu in range(mid, n)]\n    B22 = [[B[i][j] for nrh in range(mid, n)] for cgu in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for nrh in range(gjez)] for cgu in range(gjez)], [[B11[i][j] + B22[i][j] for nrh in range(gjez)] for cgu in range(gjez)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for nrh in range(gjez)] for cgu in range(gjez)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for nrh in range(gjez)] for cgu in range(gjez)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for nrh in range(gjez)] for cgu in range(gjez)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for nrh in range(gjez)] for cgu in range(gjez)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for nrh in range(gjez)] for cgu in range(gjez)], [[B11[i][j] + B12[i][j] for nrh in range(gjez)] for cgu in range(gjez)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for nrh in range(gjez)] for cgu in range(gjez)], [[B21[i][j] + B22[i][j] for nrh in range(gjez)] for cgu in range(gjez)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for nrh in range(gjez)] for cgu in range(gjez)]\n    C12 = [[P3[i][j] + P5[i][j] for nrh in range(gjez)] for cgu in range(gjez)]\n    C21 = [[P2[i][j] + P4[i][j] for nrh in range(gjez)] for cgu in range(gjez)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for nrh in range(gjez)] for cgu in range(gjez)]\n    C = [[0] * rgc for _ in range(rgc)]\n    for cgu in range(gjez):\n        for nrh in range(gjez):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    juy = len(A)\n    if juy <= 1:\n        return [[A[0][0] * B[0][0]]]\n    umyo = juy // 2\n    A11 = [[A[i][j] for dbm in range(umyo)] for xdd in range(umyo)]\n    A12 = [[A[i][j] for dbm in range(mid, n)] for xdd in range(umyo)]\n    A21 = [[A[i][j] for dbm in range(umyo)] for xdd in range(mid, n)]\n    A22 = [[A[i][j] for dbm in range(mid, n)] for xdd in range(mid, n)]\n    B11 = [[B[i][j] for dbm in range(umyo)] for xdd in range(umyo)]\n    B12 = [[B[i][j] for dbm in range(mid, n)] for xdd in range(umyo)]\n    B21 = [[B[i][j] for dbm in range(umyo)] for xdd in range(mid, n)]\n    B22 = [[B[i][j] for dbm in range(mid, n)] for xdd in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for dbm in range(umyo)] for xdd in range(umyo)], [[B11[i][j] + B22[i][j] for dbm in range(umyo)] for xdd in range(umyo)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for dbm in range(umyo)] for xdd in range(umyo)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for dbm in range(umyo)] for xdd in range(umyo)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for dbm in range(umyo)] for xdd in range(umyo)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for dbm in range(umyo)] for xdd in range(umyo)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for dbm in range(umyo)] for xdd in range(umyo)], [[B11[i][j] + B12[i][j] for dbm in range(umyo)] for xdd in range(umyo)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for dbm in range(umyo)] for xdd in range(umyo)], [[B21[i][j] + B22[i][j] for dbm in range(umyo)] for xdd in range(umyo)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for dbm in range(umyo)] for xdd in range(umyo)]\n    C12 = [[P3[i][j] + P5[i][j] for dbm in range(umyo)] for xdd in range(umyo)]\n    C21 = [[P2[i][j] + P4[i][j] for dbm in range(umyo)] for xdd in range(umyo)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for dbm in range(umyo)] for xdd in range(umyo)]\n    C = [[0] * juy for _ in range(juy)]\n    for xdd in range(umyo):\n        for dbm in range(umyo):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    ohv = len(A)\n    if ohv <= 1:\n        return [[A[0][0] * B[0][0]]]\n    hwcb = ohv // 2\n    A11 = [[A[i][j] for job in range(hwcb)] for qyj in range(hwcb)]\n    A12 = [[A[i][j] for job in range(mid, n)] for qyj in range(hwcb)]\n    A21 = [[A[i][j] for job in range(hwcb)] for qyj in range(mid, n)]\n    A22 = [[A[i][j] for job in range(mid, n)] for qyj in range(mid, n)]\n    B11 = [[B[i][j] for job in range(hwcb)] for qyj in range(hwcb)]\n    B12 = [[B[i][j] for job in range(mid, n)] for qyj in range(hwcb)]\n    B21 = [[B[i][j] for job in range(hwcb)] for qyj in range(mid, n)]\n    B22 = [[B[i][j] for job in range(mid, n)] for qyj in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for job in range(hwcb)] for qyj in range(hwcb)], [[B11[i][j] + B22[i][j] for job in range(hwcb)] for qyj in range(hwcb)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for job in range(hwcb)] for qyj in range(hwcb)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for job in range(hwcb)] for qyj in range(hwcb)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for job in range(hwcb)] for qyj in range(hwcb)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for job in range(hwcb)] for qyj in range(hwcb)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for job in range(hwcb)] for qyj in range(hwcb)], [[B11[i][j] + B12[i][j] for job in range(hwcb)] for qyj in range(hwcb)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for job in range(hwcb)] for qyj in range(hwcb)], [[B21[i][j] + B22[i][j] for job in range(hwcb)] for qyj in range(hwcb)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for job in range(hwcb)] for qyj in range(hwcb)]\n    C12 = [[P3[i][j] + P5[i][j] for job in range(hwcb)] for qyj in range(hwcb)]\n    C21 = [[P2[i][j] + P4[i][j] for job in range(hwcb)] for qyj in range(hwcb)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for job in range(hwcb)] for qyj in range(hwcb)]\n    C = [[0] * ohv for _ in range(ohv)]\n    for qyj in range(hwcb):\n        for job in range(hwcb):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    sms = len(A)\n    if sms <= 1:\n        return [[A[0][0] * B[0][0]]]\n    wruw = sms // 2\n    A11 = [[A[i][j] for qok in range(wruw)] for ajt in range(wruw)]\n    A12 = [[A[i][j] for qok in range(mid, n)] for ajt in range(wruw)]\n    A21 = [[A[i][j] for qok in range(wruw)] for ajt in range(mid, n)]\n    A22 = [[A[i][j] for qok in range(mid, n)] for ajt in range(mid, n)]\n    B11 = [[B[i][j] for qok in range(wruw)] for ajt in range(wruw)]\n    B12 = [[B[i][j] for qok in range(mid, n)] for ajt in range(wruw)]\n    B21 = [[B[i][j] for qok in range(wruw)] for ajt in range(mid, n)]\n    B22 = [[B[i][j] for qok in range(mid, n)] for ajt in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for qok in range(wruw)] for ajt in range(wruw)], [[B11[i][j] + B22[i][j] for qok in range(wruw)] for ajt in range(wruw)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for qok in range(wruw)] for ajt in range(wruw)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for qok in range(wruw)] for ajt in range(wruw)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for qok in range(wruw)] for ajt in range(wruw)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for qok in range(wruw)] for ajt in range(wruw)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for qok in range(wruw)] for ajt in range(wruw)], [[B11[i][j] + B12[i][j] for qok in range(wruw)] for ajt in range(wruw)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for qok in range(wruw)] for ajt in range(wruw)], [[B21[i][j] + B22[i][j] for qok in range(wruw)] for ajt in range(wruw)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for qok in range(wruw)] for ajt in range(wruw)]\n    C12 = [[P3[i][j] + P5[i][j] for qok in range(wruw)] for ajt in range(wruw)]\n    C21 = [[P2[i][j] + P4[i][j] for qok in range(wruw)] for ajt in range(wruw)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for qok in range(wruw)] for ajt in range(wruw)]\n    C = [[0] * sms for _ in range(sms)]\n    for ajt in range(wruw):\n        for qok in range(wruw):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    ljh = len(A)\n    if ljh <= 1:\n        return [[A[0][0] * B[0][0]]]\n    sria = ljh // 2\n    A11 = [[A[i][j] for uzp in range(sria)] for rrj in range(sria)]\n    A12 = [[A[i][j] for uzp in range(mid, n)] for rrj in range(sria)]\n    A21 = [[A[i][j] for uzp in range(sria)] for rrj in range(mid, n)]\n    A22 = [[A[i][j] for uzp in range(mid, n)] for rrj in range(mid, n)]\n    B11 = [[B[i][j] for uzp in range(sria)] for rrj in range(sria)]\n    B12 = [[B[i][j] for uzp in range(mid, n)] for rrj in range(sria)]\n    B21 = [[B[i][j] for uzp in range(sria)] for rrj in range(mid, n)]\n    B22 = [[B[i][j] for uzp in range(mid, n)] for rrj in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for uzp in range(sria)] for rrj in range(sria)], [[B11[i][j] + B22[i][j] for uzp in range(sria)] for rrj in range(sria)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for uzp in range(sria)] for rrj in range(sria)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for uzp in range(sria)] for rrj in range(sria)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for uzp in range(sria)] for rrj in range(sria)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for uzp in range(sria)] for rrj in range(sria)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for uzp in range(sria)] for rrj in range(sria)], [[B11[i][j] + B12[i][j] for uzp in range(sria)] for rrj in range(sria)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for uzp in range(sria)] for rrj in range(sria)], [[B21[i][j] + B22[i][j] for uzp in range(sria)] for rrj in range(sria)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for uzp in range(sria)] for rrj in range(sria)]\n    C12 = [[P3[i][j] + P5[i][j] for uzp in range(sria)] for rrj in range(sria)]\n    C21 = [[P2[i][j] + P4[i][j] for uzp in range(sria)] for rrj in range(sria)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for uzp in range(sria)] for rrj in range(sria)]\n    C = [[0] * ljh for _ in range(ljh)]\n    for rrj in range(sria):\n        for uzp in range(sria):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    qwo = len(A)\n    if qwo <= 1:\n        return [[A[0][0] * B[0][0]]]\n    mlvf = qwo // 2\n    A11 = [[A[i][j] for eze in range(mlvf)] for get in range(mlvf)]\n    A12 = [[A[i][j] for eze in range(mid, n)] for get in range(mlvf)]\n    A21 = [[A[i][j] for eze in range(mlvf)] for get in range(mid, n)]\n    A22 = [[A[i][j] for eze in range(mid, n)] for get in range(mid, n)]\n    B11 = [[B[i][j] for eze in range(mlvf)] for get in range(mlvf)]\n    B12 = [[B[i][j] for eze in range(mid, n)] for get in range(mlvf)]\n    B21 = [[B[i][j] for eze in range(mlvf)] for get in range(mid, n)]\n    B22 = [[B[i][j] for eze in range(mid, n)] for get in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for eze in range(mlvf)] for get in range(mlvf)], [[B11[i][j] + B22[i][j] for eze in range(mlvf)] for get in range(mlvf)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for eze in range(mlvf)] for get in range(mlvf)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for eze in range(mlvf)] for get in range(mlvf)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for eze in range(mlvf)] for get in range(mlvf)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for eze in range(mlvf)] for get in range(mlvf)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for eze in range(mlvf)] for get in range(mlvf)], [[B11[i][j] + B12[i][j] for eze in range(mlvf)] for get in range(mlvf)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for eze in range(mlvf)] for get in range(mlvf)], [[B21[i][j] + B22[i][j] for eze in range(mlvf)] for get in range(mlvf)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for eze in range(mlvf)] for get in range(mlvf)]\n    C12 = [[P3[i][j] + P5[i][j] for eze in range(mlvf)] for get in range(mlvf)]\n    C21 = [[P2[i][j] + P4[i][j] for eze in range(mlvf)] for get in range(mlvf)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for eze in range(mlvf)] for get in range(mlvf)]\n    C = [[0] * qwo for _ in range(qwo)]\n    for get in range(mlvf):\n        for eze in range(mlvf):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    grp = len(A)\n    if grp <= 1:\n        return [[A[0][0] * B[0][0]]]\n    cfyu = grp // 2\n    A11 = [[A[i][j] for ggj in range(cfyu)] for der in range(cfyu)]\n    A12 = [[A[i][j] for ggj in range(mid, n)] for der in range(cfyu)]\n    A21 = [[A[i][j] for ggj in range(cfyu)] for der in range(mid, n)]\n    A22 = [[A[i][j] for ggj in range(mid, n)] for der in range(mid, n)]\n    B11 = [[B[i][j] for ggj in range(cfyu)] for der in range(cfyu)]\n    B12 = [[B[i][j] for ggj in range(mid, n)] for der in range(cfyu)]\n    B21 = [[B[i][j] for ggj in range(cfyu)] for der in range(mid, n)]\n    B22 = [[B[i][j] for ggj in range(mid, n)] for der in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for ggj in range(cfyu)] for der in range(cfyu)], [[B11[i][j] + B22[i][j] for ggj in range(cfyu)] for der in range(cfyu)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for ggj in range(cfyu)] for der in range(cfyu)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for ggj in range(cfyu)] for der in range(cfyu)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for ggj in range(cfyu)] for der in range(cfyu)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for ggj in range(cfyu)] for der in range(cfyu)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for ggj in range(cfyu)] for der in range(cfyu)], [[B11[i][j] + B12[i][j] for ggj in range(cfyu)] for der in range(cfyu)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for ggj in range(cfyu)] for der in range(cfyu)], [[B21[i][j] + B22[i][j] for ggj in range(cfyu)] for der in range(cfyu)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for ggj in range(cfyu)] for der in range(cfyu)]\n    C12 = [[P3[i][j] + P5[i][j] for ggj in range(cfyu)] for der in range(cfyu)]\n    C21 = [[P2[i][j] + P4[i][j] for ggj in range(cfyu)] for der in range(cfyu)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for ggj in range(cfyu)] for der in range(cfyu)]\n    C = [[0] * grp for _ in range(grp)]\n    for der in range(cfyu):\n        for ggj in range(cfyu):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    rcd = len(A)\n    if rcd <= 1:\n        return [[A[0][0] * B[0][0]]]\n    uffk = rcd // 2\n    A11 = [[A[i][j] for tfi in range(uffk)] for uwo in range(uffk)]\n    A12 = [[A[i][j] for tfi in range(mid, n)] for uwo in range(uffk)]\n    A21 = [[A[i][j] for tfi in range(uffk)] for uwo in range(mid, n)]\n    A22 = [[A[i][j] for tfi in range(mid, n)] for uwo in range(mid, n)]\n    B11 = [[B[i][j] for tfi in range(uffk)] for uwo in range(uffk)]\n    B12 = [[B[i][j] for tfi in range(mid, n)] for uwo in range(uffk)]\n    B21 = [[B[i][j] for tfi in range(uffk)] for uwo in range(mid, n)]\n    B22 = [[B[i][j] for tfi in range(mid, n)] for uwo in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for tfi in range(uffk)] for uwo in range(uffk)], [[B11[i][j] + B22[i][j] for tfi in range(uffk)] for uwo in range(uffk)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for tfi in range(uffk)] for uwo in range(uffk)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for tfi in range(uffk)] for uwo in range(uffk)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for tfi in range(uffk)] for uwo in range(uffk)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for tfi in range(uffk)] for uwo in range(uffk)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for tfi in range(uffk)] for uwo in range(uffk)], [[B11[i][j] + B12[i][j] for tfi in range(uffk)] for uwo in range(uffk)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for tfi in range(uffk)] for uwo in range(uffk)], [[B21[i][j] + B22[i][j] for tfi in range(uffk)] for uwo in range(uffk)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for tfi in range(uffk)] for uwo in range(uffk)]\n    C12 = [[P3[i][j] + P5[i][j] for tfi in range(uffk)] for uwo in range(uffk)]\n    C21 = [[P2[i][j] + P4[i][j] for tfi in range(uffk)] for uwo in range(uffk)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for tfi in range(uffk)] for uwo in range(uffk)]\n    C = [[0] * rcd for _ in range(rcd)]\n    for uwo in range(uffk):\n        for tfi in range(uffk):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    pej = len(A)\n    if pej <= 1:\n        return [[A[0][0] * B[0][0]]]\n    aeav = pej // 2\n    A11 = [[A[i][j] for cdr in range(aeav)] for jtz in range(aeav)]\n    A12 = [[A[i][j] for cdr in range(mid, n)] for jtz in range(aeav)]\n    A21 = [[A[i][j] for cdr in range(aeav)] for jtz in range(mid, n)]\n    A22 = [[A[i][j] for cdr in range(mid, n)] for jtz in range(mid, n)]\n    B11 = [[B[i][j] for cdr in range(aeav)] for jtz in range(aeav)]\n    B12 = [[B[i][j] for cdr in range(mid, n)] for jtz in range(aeav)]\n    B21 = [[B[i][j] for cdr in range(aeav)] for jtz in range(mid, n)]\n    B22 = [[B[i][j] for cdr in range(mid, n)] for jtz in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for cdr in range(aeav)] for jtz in range(aeav)], [[B11[i][j] + B22[i][j] for cdr in range(aeav)] for jtz in range(aeav)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for cdr in range(aeav)] for jtz in range(aeav)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for cdr in range(aeav)] for jtz in range(aeav)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for cdr in range(aeav)] for jtz in range(aeav)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for cdr in range(aeav)] for jtz in range(aeav)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for cdr in range(aeav)] for jtz in range(aeav)], [[B11[i][j] + B12[i][j] for cdr in range(aeav)] for jtz in range(aeav)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for cdr in range(aeav)] for jtz in range(aeav)], [[B21[i][j] + B22[i][j] for cdr in range(aeav)] for jtz in range(aeav)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for cdr in range(aeav)] for jtz in range(aeav)]\n    C12 = [[P3[i][j] + P5[i][j] for cdr in range(aeav)] for jtz in range(aeav)]\n    C21 = [[P2[i][j] + P4[i][j] for cdr in range(aeav)] for jtz in range(aeav)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for cdr in range(aeav)] for jtz in range(aeav)]\n    C = [[0] * pej for _ in range(pej)]\n    for jtz in range(aeav):\n        for cdr in range(aeav):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    ege = len(A)\n    if ege <= 1:\n        return [[A[0][0] * B[0][0]]]\n    weiv = ege // 2\n    A11 = [[A[i][j] for agp in range(weiv)] for zae in range(weiv)]\n    A12 = [[A[i][j] for agp in range(mid, n)] for zae in range(weiv)]\n    A21 = [[A[i][j] for agp in range(weiv)] for zae in range(mid, n)]\n    A22 = [[A[i][j] for agp in range(mid, n)] for zae in range(mid, n)]\n    B11 = [[B[i][j] for agp in range(weiv)] for zae in range(weiv)]\n    B12 = [[B[i][j] for agp in range(mid, n)] for zae in range(weiv)]\n    B21 = [[B[i][j] for agp in range(weiv)] for zae in range(mid, n)]\n    B22 = [[B[i][j] for agp in range(mid, n)] for zae in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for agp in range(weiv)] for zae in range(weiv)], [[B11[i][j] + B22[i][j] for agp in range(weiv)] for zae in range(weiv)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for agp in range(weiv)] for zae in range(weiv)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for agp in range(weiv)] for zae in range(weiv)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for agp in range(weiv)] for zae in range(weiv)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for agp in range(weiv)] for zae in range(weiv)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for agp in range(weiv)] for zae in range(weiv)], [[B11[i][j] + B12[i][j] for agp in range(weiv)] for zae in range(weiv)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for agp in range(weiv)] for zae in range(weiv)], [[B21[i][j] + B22[i][j] for agp in range(weiv)] for zae in range(weiv)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for agp in range(weiv)] for zae in range(weiv)]\n    C12 = [[P3[i][j] + P5[i][j] for agp in range(weiv)] for zae in range(weiv)]\n    C21 = [[P2[i][j] + P4[i][j] for agp in range(weiv)] for zae in range(weiv)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for agp in range(weiv)] for zae in range(weiv)]\n    C = [[0] * ege for _ in range(ege)]\n    for zae in range(weiv):\n        for agp in range(weiv):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    igs = len(A)\n    if igs <= 1:\n        return [[A[0][0] * B[0][0]]]\n    fcex = igs // 2\n    A11 = [[A[i][j] for qaq in range(fcex)] for ziv in range(fcex)]\n    A12 = [[A[i][j] for qaq in range(mid, n)] for ziv in range(fcex)]\n    A21 = [[A[i][j] for qaq in range(fcex)] for ziv in range(mid, n)]\n    A22 = [[A[i][j] for qaq in range(mid, n)] for ziv in range(mid, n)]\n    B11 = [[B[i][j] for qaq in range(fcex)] for ziv in range(fcex)]\n    B12 = [[B[i][j] for qaq in range(mid, n)] for ziv in range(fcex)]\n    B21 = [[B[i][j] for qaq in range(fcex)] for ziv in range(mid, n)]\n    B22 = [[B[i][j] for qaq in range(mid, n)] for ziv in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for qaq in range(fcex)] for ziv in range(fcex)], [[B11[i][j] + B22[i][j] for qaq in range(fcex)] for ziv in range(fcex)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for qaq in range(fcex)] for ziv in range(fcex)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for qaq in range(fcex)] for ziv in range(fcex)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for qaq in range(fcex)] for ziv in range(fcex)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for qaq in range(fcex)] for ziv in range(fcex)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for qaq in range(fcex)] for ziv in range(fcex)], [[B11[i][j] + B12[i][j] for qaq in range(fcex)] for ziv in range(fcex)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for qaq in range(fcex)] for ziv in range(fcex)], [[B21[i][j] + B22[i][j] for qaq in range(fcex)] for ziv in range(fcex)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for qaq in range(fcex)] for ziv in range(fcex)]\n    C12 = [[P3[i][j] + P5[i][j] for qaq in range(fcex)] for ziv in range(fcex)]\n    C21 = [[P2[i][j] + P4[i][j] for qaq in range(fcex)] for ziv in range(fcex)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for qaq in range(fcex)] for ziv in range(fcex)]\n    C = [[0] * igs for _ in range(igs)]\n    for ziv in range(fcex):\n        for qaq in range(fcex):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    hpl = len(A)\n    if hpl <= 1:\n        return [[A[0][0] * B[0][0]]]\n    cvae = hpl // 2\n    A11 = [[A[i][j] for jgj in range(cvae)] for fbd in range(cvae)]\n    A12 = [[A[i][j] for jgj in range(mid, n)] for fbd in range(cvae)]\n    A21 = [[A[i][j] for jgj in range(cvae)] for fbd in range(mid, n)]\n    A22 = [[A[i][j] for jgj in range(mid, n)] for fbd in range(mid, n)]\n    B11 = [[B[i][j] for jgj in range(cvae)] for fbd in range(cvae)]\n    B12 = [[B[i][j] for jgj in range(mid, n)] for fbd in range(cvae)]\n    B21 = [[B[i][j] for jgj in range(cvae)] for fbd in range(mid, n)]\n    B22 = [[B[i][j] for jgj in range(mid, n)] for fbd in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for jgj in range(cvae)] for fbd in range(cvae)], [[B11[i][j] + B22[i][j] for jgj in range(cvae)] for fbd in range(cvae)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for jgj in range(cvae)] for fbd in range(cvae)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for jgj in range(cvae)] for fbd in range(cvae)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for jgj in range(cvae)] for fbd in range(cvae)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for jgj in range(cvae)] for fbd in range(cvae)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for jgj in range(cvae)] for fbd in range(cvae)], [[B11[i][j] + B12[i][j] for jgj in range(cvae)] for fbd in range(cvae)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for jgj in range(cvae)] for fbd in range(cvae)], [[B21[i][j] + B22[i][j] for jgj in range(cvae)] for fbd in range(cvae)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for jgj in range(cvae)] for fbd in range(cvae)]\n    C12 = [[P3[i][j] + P5[i][j] for jgj in range(cvae)] for fbd in range(cvae)]\n    C21 = [[P2[i][j] + P4[i][j] for jgj in range(cvae)] for fbd in range(cvae)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for jgj in range(cvae)] for fbd in range(cvae)]\n    C = [[0] * hpl for _ in range(hpl)]\n    for fbd in range(cvae):\n        for jgj in range(cvae):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    wuh = len(A)\n    if wuh <= 1:\n        return [[A[0][0] * B[0][0]]]\n    mxqj = wuh // 2\n    A11 = [[A[i][j] for ynq in range(mxqj)] for hqp in range(mxqj)]\n    A12 = [[A[i][j] for ynq in range(mid, n)] for hqp in range(mxqj)]\n    A21 = [[A[i][j] for ynq in range(mxqj)] for hqp in range(mid, n)]\n    A22 = [[A[i][j] for ynq in range(mid, n)] for hqp in range(mid, n)]\n    B11 = [[B[i][j] for ynq in range(mxqj)] for hqp in range(mxqj)]\n    B12 = [[B[i][j] for ynq in range(mid, n)] for hqp in range(mxqj)]\n    B21 = [[B[i][j] for ynq in range(mxqj)] for hqp in range(mid, n)]\n    B22 = [[B[i][j] for ynq in range(mid, n)] for hqp in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for ynq in range(mxqj)] for hqp in range(mxqj)], [[B11[i][j] + B22[i][j] for ynq in range(mxqj)] for hqp in range(mxqj)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for ynq in range(mxqj)] for hqp in range(mxqj)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for ynq in range(mxqj)] for hqp in range(mxqj)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for ynq in range(mxqj)] for hqp in range(mxqj)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for ynq in range(mxqj)] for hqp in range(mxqj)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for ynq in range(mxqj)] for hqp in range(mxqj)], [[B11[i][j] + B12[i][j] for ynq in range(mxqj)] for hqp in range(mxqj)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for ynq in range(mxqj)] for hqp in range(mxqj)], [[B21[i][j] + B22[i][j] for ynq in range(mxqj)] for hqp in range(mxqj)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for ynq in range(mxqj)] for hqp in range(mxqj)]\n    C12 = [[P3[i][j] + P5[i][j] for ynq in range(mxqj)] for hqp in range(mxqj)]\n    C21 = [[P2[i][j] + P4[i][j] for ynq in range(mxqj)] for hqp in range(mxqj)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for ynq in range(mxqj)] for hqp in range(mxqj)]\n    C = [[0] * wuh for _ in range(wuh)]\n    for hqp in range(mxqj):\n        for ynq in range(mxqj):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    xzi = len(A)\n    if xzi <= 1:\n        return [[A[0][0] * B[0][0]]]\n    zvyx = xzi // 2\n    A11 = [[A[i][j] for wdj in range(zvyx)] for qvs in range(zvyx)]\n    A12 = [[A[i][j] for wdj in range(mid, n)] for qvs in range(zvyx)]\n    A21 = [[A[i][j] for wdj in range(zvyx)] for qvs in range(mid, n)]\n    A22 = [[A[i][j] for wdj in range(mid, n)] for qvs in range(mid, n)]\n    B11 = [[B[i][j] for wdj in range(zvyx)] for qvs in range(zvyx)]\n    B12 = [[B[i][j] for wdj in range(mid, n)] for qvs in range(zvyx)]\n    B21 = [[B[i][j] for wdj in range(zvyx)] for qvs in range(mid, n)]\n    B22 = [[B[i][j] for wdj in range(mid, n)] for qvs in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for wdj in range(zvyx)] for qvs in range(zvyx)], [[B11[i][j] + B22[i][j] for wdj in range(zvyx)] for qvs in range(zvyx)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for wdj in range(zvyx)] for qvs in range(zvyx)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for wdj in range(zvyx)] for qvs in range(zvyx)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for wdj in range(zvyx)] for qvs in range(zvyx)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for wdj in range(zvyx)] for qvs in range(zvyx)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for wdj in range(zvyx)] for qvs in range(zvyx)], [[B11[i][j] + B12[i][j] for wdj in range(zvyx)] for qvs in range(zvyx)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for wdj in range(zvyx)] for qvs in range(zvyx)], [[B21[i][j] + B22[i][j] for wdj in range(zvyx)] for qvs in range(zvyx)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for wdj in range(zvyx)] for qvs in range(zvyx)]\n    C12 = [[P3[i][j] + P5[i][j] for wdj in range(zvyx)] for qvs in range(zvyx)]\n    C21 = [[P2[i][j] + P4[i][j] for wdj in range(zvyx)] for qvs in range(zvyx)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for wdj in range(zvyx)] for qvs in range(zvyx)]\n    C = [[0] * xzi for _ in range(xzi)]\n    for qvs in range(zvyx):\n        for wdj in range(zvyx):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    ouo = len(A)\n    if ouo <= 1:\n        return [[A[0][0] * B[0][0]]]\n    qenc = ouo // 2\n    A11 = [[A[i][j] for gwb in range(qenc)] for zrl in range(qenc)]\n    A12 = [[A[i][j] for gwb in range(mid, n)] for zrl in range(qenc)]\n    A21 = [[A[i][j] for gwb in range(qenc)] for zrl in range(mid, n)]\n    A22 = [[A[i][j] for gwb in range(mid, n)] for zrl in range(mid, n)]\n    B11 = [[B[i][j] for gwb in range(qenc)] for zrl in range(qenc)]\n    B12 = [[B[i][j] for gwb in range(mid, n)] for zrl in range(qenc)]\n    B21 = [[B[i][j] for gwb in range(qenc)] for zrl in range(mid, n)]\n    B22 = [[B[i][j] for gwb in range(mid, n)] for zrl in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for gwb in range(qenc)] for zrl in range(qenc)], [[B11[i][j] + B22[i][j] for gwb in range(qenc)] for zrl in range(qenc)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for gwb in range(qenc)] for zrl in range(qenc)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for gwb in range(qenc)] for zrl in range(qenc)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for gwb in range(qenc)] for zrl in range(qenc)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for gwb in range(qenc)] for zrl in range(qenc)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for gwb in range(qenc)] for zrl in range(qenc)], [[B11[i][j] + B12[i][j] for gwb in range(qenc)] for zrl in range(qenc)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for gwb in range(qenc)] for zrl in range(qenc)], [[B21[i][j] + B22[i][j] for gwb in range(qenc)] for zrl in range(qenc)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for gwb in range(qenc)] for zrl in range(qenc)]\n    C12 = [[P3[i][j] + P5[i][j] for gwb in range(qenc)] for zrl in range(qenc)]\n    C21 = [[P2[i][j] + P4[i][j] for gwb in range(qenc)] for zrl in range(qenc)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for gwb in range(qenc)] for zrl in range(qenc)]\n    C = [[0] * ouo for _ in range(ouo)]\n    for zrl in range(qenc):\n        for gwb in range(qenc):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    ohs = len(A)\n    if ohs <= 1:\n        return [[A[0][0] * B[0][0]]]\n    mwlt = ohs // 2\n    A11 = [[A[i][j] for zsm in range(mwlt)] for ncl in range(mwlt)]\n    A12 = [[A[i][j] for zsm in range(mid, n)] for ncl in range(mwlt)]\n    A21 = [[A[i][j] for zsm in range(mwlt)] for ncl in range(mid, n)]\n    A22 = [[A[i][j] for zsm in range(mid, n)] for ncl in range(mid, n)]\n    B11 = [[B[i][j] for zsm in range(mwlt)] for ncl in range(mwlt)]\n    B12 = [[B[i][j] for zsm in range(mid, n)] for ncl in range(mwlt)]\n    B21 = [[B[i][j] for zsm in range(mwlt)] for ncl in range(mid, n)]\n    B22 = [[B[i][j] for zsm in range(mid, n)] for ncl in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for zsm in range(mwlt)] for ncl in range(mwlt)], [[B11[i][j] + B22[i][j] for zsm in range(mwlt)] for ncl in range(mwlt)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for zsm in range(mwlt)] for ncl in range(mwlt)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for zsm in range(mwlt)] for ncl in range(mwlt)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for zsm in range(mwlt)] for ncl in range(mwlt)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for zsm in range(mwlt)] for ncl in range(mwlt)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for zsm in range(mwlt)] for ncl in range(mwlt)], [[B11[i][j] + B12[i][j] for zsm in range(mwlt)] for ncl in range(mwlt)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for zsm in range(mwlt)] for ncl in range(mwlt)], [[B21[i][j] + B22[i][j] for zsm in range(mwlt)] for ncl in range(mwlt)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for zsm in range(mwlt)] for ncl in range(mwlt)]\n    C12 = [[P3[i][j] + P5[i][j] for zsm in range(mwlt)] for ncl in range(mwlt)]\n    C21 = [[P2[i][j] + P4[i][j] for zsm in range(mwlt)] for ncl in range(mwlt)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for zsm in range(mwlt)] for ncl in range(mwlt)]\n    C = [[0] * ohs for _ in range(ohs)]\n    for ncl in range(mwlt):\n        for zsm in range(mwlt):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    yyl = len(A)\n    if yyl <= 1:\n        return [[A[0][0] * B[0][0]]]\n    xrop = yyl // 2\n    A11 = [[A[i][j] for bju in range(xrop)] for smj in range(xrop)]\n    A12 = [[A[i][j] for bju in range(mid, n)] for smj in range(xrop)]\n    A21 = [[A[i][j] for bju in range(xrop)] for smj in range(mid, n)]\n    A22 = [[A[i][j] for bju in range(mid, n)] for smj in range(mid, n)]\n    B11 = [[B[i][j] for bju in range(xrop)] for smj in range(xrop)]\n    B12 = [[B[i][j] for bju in range(mid, n)] for smj in range(xrop)]\n    B21 = [[B[i][j] for bju in range(xrop)] for smj in range(mid, n)]\n    B22 = [[B[i][j] for bju in range(mid, n)] for smj in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for bju in range(xrop)] for smj in range(xrop)], [[B11[i][j] + B22[i][j] for bju in range(xrop)] for smj in range(xrop)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for bju in range(xrop)] for smj in range(xrop)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for bju in range(xrop)] for smj in range(xrop)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for bju in range(xrop)] for smj in range(xrop)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for bju in range(xrop)] for smj in range(xrop)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for bju in range(xrop)] for smj in range(xrop)], [[B11[i][j] + B12[i][j] for bju in range(xrop)] for smj in range(xrop)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for bju in range(xrop)] for smj in range(xrop)], [[B21[i][j] + B22[i][j] for bju in range(xrop)] for smj in range(xrop)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for bju in range(xrop)] for smj in range(xrop)]\n    C12 = [[P3[i][j] + P5[i][j] for bju in range(xrop)] for smj in range(xrop)]\n    C21 = [[P2[i][j] + P4[i][j] for bju in range(xrop)] for smj in range(xrop)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for bju in range(xrop)] for smj in range(xrop)]\n    C = [[0] * yyl for _ in range(yyl)]\n    for smj in range(xrop):\n        for bju in range(xrop):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    zvc = len(A)\n    if zvc <= 1:\n        return [[A[0][0] * B[0][0]]]\n    hlqe = zvc // 2\n    A11 = [[A[i][j] for jja in range(hlqe)] for lrg in range(hlqe)]\n    A12 = [[A[i][j] for jja in range(mid, n)] for lrg in range(hlqe)]\n    A21 = [[A[i][j] for jja in range(hlqe)] for lrg in range(mid, n)]\n    A22 = [[A[i][j] for jja in range(mid, n)] for lrg in range(mid, n)]\n    B11 = [[B[i][j] for jja in range(hlqe)] for lrg in range(hlqe)]\n    B12 = [[B[i][j] for jja in range(mid, n)] for lrg in range(hlqe)]\n    B21 = [[B[i][j] for jja in range(hlqe)] for lrg in range(mid, n)]\n    B22 = [[B[i][j] for jja in range(mid, n)] for lrg in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for jja in range(hlqe)] for lrg in range(hlqe)], [[B11[i][j] + B22[i][j] for jja in range(hlqe)] for lrg in range(hlqe)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for jja in range(hlqe)] for lrg in range(hlqe)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for jja in range(hlqe)] for lrg in range(hlqe)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for jja in range(hlqe)] for lrg in range(hlqe)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for jja in range(hlqe)] for lrg in range(hlqe)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for jja in range(hlqe)] for lrg in range(hlqe)], [[B11[i][j] + B12[i][j] for jja in range(hlqe)] for lrg in range(hlqe)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for jja in range(hlqe)] for lrg in range(hlqe)], [[B21[i][j] + B22[i][j] for jja in range(hlqe)] for lrg in range(hlqe)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for jja in range(hlqe)] for lrg in range(hlqe)]\n    C12 = [[P3[i][j] + P5[i][j] for jja in range(hlqe)] for lrg in range(hlqe)]\n    C21 = [[P2[i][j] + P4[i][j] for jja in range(hlqe)] for lrg in range(hlqe)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for jja in range(hlqe)] for lrg in range(hlqe)]\n    C = [[0] * zvc for _ in range(zvc)]\n    for lrg in range(hlqe):\n        for jja in range(hlqe):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    llj = len(A)\n    if llj <= 1:\n        return [[A[0][0] * B[0][0]]]\n    bnse = llj // 2\n    A11 = [[A[i][j] for phc in range(bnse)] for gbo in range(bnse)]\n    A12 = [[A[i][j] for phc in range(mid, n)] for gbo in range(bnse)]\n    A21 = [[A[i][j] for phc in range(bnse)] for gbo in range(mid, n)]\n    A22 = [[A[i][j] for phc in range(mid, n)] for gbo in range(mid, n)]\n    B11 = [[B[i][j] for phc in range(bnse)] for gbo in range(bnse)]\n    B12 = [[B[i][j] for phc in range(mid, n)] for gbo in range(bnse)]\n    B21 = [[B[i][j] for phc in range(bnse)] for gbo in range(mid, n)]\n    B22 = [[B[i][j] for phc in range(mid, n)] for gbo in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for phc in range(bnse)] for gbo in range(bnse)], [[B11[i][j] + B22[i][j] for phc in range(bnse)] for gbo in range(bnse)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for phc in range(bnse)] for gbo in range(bnse)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for phc in range(bnse)] for gbo in range(bnse)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for phc in range(bnse)] for gbo in range(bnse)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for phc in range(bnse)] for gbo in range(bnse)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for phc in range(bnse)] for gbo in range(bnse)], [[B11[i][j] + B12[i][j] for phc in range(bnse)] for gbo in range(bnse)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for phc in range(bnse)] for gbo in range(bnse)], [[B21[i][j] + B22[i][j] for phc in range(bnse)] for gbo in range(bnse)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for phc in range(bnse)] for gbo in range(bnse)]\n    C12 = [[P3[i][j] + P5[i][j] for phc in range(bnse)] for gbo in range(bnse)]\n    C21 = [[P2[i][j] + P4[i][j] for phc in range(bnse)] for gbo in range(bnse)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for phc in range(bnse)] for gbo in range(bnse)]\n    C = [[0] * llj for _ in range(llj)]\n    for gbo in range(bnse):\n        for phc in range(bnse):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    nag = len(A)\n    if nag <= 1:\n        return [[A[0][0] * B[0][0]]]\n    lsgm = nag // 2\n    A11 = [[A[i][j] for eir in range(lsgm)] for ezr in range(lsgm)]\n    A12 = [[A[i][j] for eir in range(mid, n)] for ezr in range(lsgm)]\n    A21 = [[A[i][j] for eir in range(lsgm)] for ezr in range(mid, n)]\n    A22 = [[A[i][j] for eir in range(mid, n)] for ezr in range(mid, n)]\n    B11 = [[B[i][j] for eir in range(lsgm)] for ezr in range(lsgm)]\n    B12 = [[B[i][j] for eir in range(mid, n)] for ezr in range(lsgm)]\n    B21 = [[B[i][j] for eir in range(lsgm)] for ezr in range(mid, n)]\n    B22 = [[B[i][j] for eir in range(mid, n)] for ezr in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for eir in range(lsgm)] for ezr in range(lsgm)], [[B11[i][j] + B22[i][j] for eir in range(lsgm)] for ezr in range(lsgm)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for eir in range(lsgm)] for ezr in range(lsgm)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for eir in range(lsgm)] for ezr in range(lsgm)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for eir in range(lsgm)] for ezr in range(lsgm)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for eir in range(lsgm)] for ezr in range(lsgm)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for eir in range(lsgm)] for ezr in range(lsgm)], [[B11[i][j] + B12[i][j] for eir in range(lsgm)] for ezr in range(lsgm)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for eir in range(lsgm)] for ezr in range(lsgm)], [[B21[i][j] + B22[i][j] for eir in range(lsgm)] for ezr in range(lsgm)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for eir in range(lsgm)] for ezr in range(lsgm)]\n    C12 = [[P3[i][j] + P5[i][j] for eir in range(lsgm)] for ezr in range(lsgm)]\n    C21 = [[P2[i][j] + P4[i][j] for eir in range(lsgm)] for ezr in range(lsgm)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for eir in range(lsgm)] for ezr in range(lsgm)]\n    C = [[0] * nag for _ in range(nag)]\n    for ezr in range(lsgm):\n        for eir in range(lsgm):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    ipc = len(A)\n    if ipc <= 1:\n        return [[A[0][0] * B[0][0]]]\n    wxru = ipc // 2\n    A11 = [[A[i][j] for wvo in range(wxru)] for quq in range(wxru)]\n    A12 = [[A[i][j] for wvo in range(mid, n)] for quq in range(wxru)]\n    A21 = [[A[i][j] for wvo in range(wxru)] for quq in range(mid, n)]\n    A22 = [[A[i][j] for wvo in range(mid, n)] for quq in range(mid, n)]\n    B11 = [[B[i][j] for wvo in range(wxru)] for quq in range(wxru)]\n    B12 = [[B[i][j] for wvo in range(mid, n)] for quq in range(wxru)]\n    B21 = [[B[i][j] for wvo in range(wxru)] for quq in range(mid, n)]\n    B22 = [[B[i][j] for wvo in range(mid, n)] for quq in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for wvo in range(wxru)] for quq in range(wxru)], [[B11[i][j] + B22[i][j] for wvo in range(wxru)] for quq in range(wxru)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for wvo in range(wxru)] for quq in range(wxru)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for wvo in range(wxru)] for quq in range(wxru)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for wvo in range(wxru)] for quq in range(wxru)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for wvo in range(wxru)] for quq in range(wxru)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for wvo in range(wxru)] for quq in range(wxru)], [[B11[i][j] + B12[i][j] for wvo in range(wxru)] for quq in range(wxru)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for wvo in range(wxru)] for quq in range(wxru)], [[B21[i][j] + B22[i][j] for wvo in range(wxru)] for quq in range(wxru)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for wvo in range(wxru)] for quq in range(wxru)]\n    C12 = [[P3[i][j] + P5[i][j] for wvo in range(wxru)] for quq in range(wxru)]\n    C21 = [[P2[i][j] + P4[i][j] for wvo in range(wxru)] for quq in range(wxru)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for wvo in range(wxru)] for quq in range(wxru)]\n    C = [[0] * ipc for _ in range(ipc)]\n    for quq in range(wxru):\n        for wvo in range(wxru):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    fzg = len(A)\n    if fzg <= 1:\n        return [[A[0][0] * B[0][0]]]\n    qbdy = fzg // 2\n    A11 = [[A[i][j] for jpj in range(qbdy)] for emy in range(qbdy)]\n    A12 = [[A[i][j] for jpj in range(mid, n)] for emy in range(qbdy)]\n    A21 = [[A[i][j] for jpj in range(qbdy)] for emy in range(mid, n)]\n    A22 = [[A[i][j] for jpj in range(mid, n)] for emy in range(mid, n)]\n    B11 = [[B[i][j] for jpj in range(qbdy)] for emy in range(qbdy)]\n    B12 = [[B[i][j] for jpj in range(mid, n)] for emy in range(qbdy)]\n    B21 = [[B[i][j] for jpj in range(qbdy)] for emy in range(mid, n)]\n    B22 = [[B[i][j] for jpj in range(mid, n)] for emy in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for jpj in range(qbdy)] for emy in range(qbdy)], [[B11[i][j] + B22[i][j] for jpj in range(qbdy)] for emy in range(qbdy)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for jpj in range(qbdy)] for emy in range(qbdy)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for jpj in range(qbdy)] for emy in range(qbdy)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for jpj in range(qbdy)] for emy in range(qbdy)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for jpj in range(qbdy)] for emy in range(qbdy)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for jpj in range(qbdy)] for emy in range(qbdy)], [[B11[i][j] + B12[i][j] for jpj in range(qbdy)] for emy in range(qbdy)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for jpj in range(qbdy)] for emy in range(qbdy)], [[B21[i][j] + B22[i][j] for jpj in range(qbdy)] for emy in range(qbdy)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for jpj in range(qbdy)] for emy in range(qbdy)]\n    C12 = [[P3[i][j] + P5[i][j] for jpj in range(qbdy)] for emy in range(qbdy)]\n    C21 = [[P2[i][j] + P4[i][j] for jpj in range(qbdy)] for emy in range(qbdy)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for jpj in range(qbdy)] for emy in range(qbdy)]\n    C = [[0] * fzg for _ in range(fzg)]\n    for emy in range(qbdy):\n        for jpj in range(qbdy):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    kkj = len(A)\n    if kkj <= 1:\n        return [[A[0][0] * B[0][0]]]\n    oheg = kkj // 2\n    A11 = [[A[i][j] for yde in range(oheg)] for rxg in range(oheg)]\n    A12 = [[A[i][j] for yde in range(mid, n)] for rxg in range(oheg)]\n    A21 = [[A[i][j] for yde in range(oheg)] for rxg in range(mid, n)]\n    A22 = [[A[i][j] for yde in range(mid, n)] for rxg in range(mid, n)]\n    B11 = [[B[i][j] for yde in range(oheg)] for rxg in range(oheg)]\n    B12 = [[B[i][j] for yde in range(mid, n)] for rxg in range(oheg)]\n    B21 = [[B[i][j] for yde in range(oheg)] for rxg in range(mid, n)]\n    B22 = [[B[i][j] for yde in range(mid, n)] for rxg in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for yde in range(oheg)] for rxg in range(oheg)], [[B11[i][j] + B22[i][j] for yde in range(oheg)] for rxg in range(oheg)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for yde in range(oheg)] for rxg in range(oheg)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for yde in range(oheg)] for rxg in range(oheg)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for yde in range(oheg)] for rxg in range(oheg)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for yde in range(oheg)] for rxg in range(oheg)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for yde in range(oheg)] for rxg in range(oheg)], [[B11[i][j] + B12[i][j] for yde in range(oheg)] for rxg in range(oheg)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for yde in range(oheg)] for rxg in range(oheg)], [[B21[i][j] + B22[i][j] for yde in range(oheg)] for rxg in range(oheg)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for yde in range(oheg)] for rxg in range(oheg)]\n    C12 = [[P3[i][j] + P5[i][j] for yde in range(oheg)] for rxg in range(oheg)]\n    C21 = [[P2[i][j] + P4[i][j] for yde in range(oheg)] for rxg in range(oheg)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for yde in range(oheg)] for rxg in range(oheg)]\n    C = [[0] * kkj for _ in range(kkj)]\n    for rxg in range(oheg):\n        for yde in range(oheg):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    ikx = len(A)\n    if ikx <= 1:\n        return [[A[0][0] * B[0][0]]]\n    gboe = ikx // 2\n    A11 = [[A[i][j] for bat in range(gboe)] for wpn in range(gboe)]\n    A12 = [[A[i][j] for bat in range(mid, n)] for wpn in range(gboe)]\n    A21 = [[A[i][j] for bat in range(gboe)] for wpn in range(mid, n)]\n    A22 = [[A[i][j] for bat in range(mid, n)] for wpn in range(mid, n)]\n    B11 = [[B[i][j] for bat in range(gboe)] for wpn in range(gboe)]\n    B12 = [[B[i][j] for bat in range(mid, n)] for wpn in range(gboe)]\n    B21 = [[B[i][j] for bat in range(gboe)] for wpn in range(mid, n)]\n    B22 = [[B[i][j] for bat in range(mid, n)] for wpn in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for bat in range(gboe)] for wpn in range(gboe)], [[B11[i][j] + B22[i][j] for bat in range(gboe)] for wpn in range(gboe)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for bat in range(gboe)] for wpn in range(gboe)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for bat in range(gboe)] for wpn in range(gboe)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for bat in range(gboe)] for wpn in range(gboe)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for bat in range(gboe)] for wpn in range(gboe)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for bat in range(gboe)] for wpn in range(gboe)], [[B11[i][j] + B12[i][j] for bat in range(gboe)] for wpn in range(gboe)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for bat in range(gboe)] for wpn in range(gboe)], [[B21[i][j] + B22[i][j] for bat in range(gboe)] for wpn in range(gboe)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for bat in range(gboe)] for wpn in range(gboe)]\n    C12 = [[P3[i][j] + P5[i][j] for bat in range(gboe)] for wpn in range(gboe)]\n    C21 = [[P2[i][j] + P4[i][j] for bat in range(gboe)] for wpn in range(gboe)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for bat in range(gboe)] for wpn in range(gboe)]\n    C = [[0] * ikx for _ in range(ikx)]\n    for wpn in range(gboe):\n        for bat in range(gboe):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    puj = len(A)\n    if puj <= 1:\n        return [[A[0][0] * B[0][0]]]\n    zjjx = puj // 2\n    A11 = [[A[i][j] for zrr in range(zjjx)] for moa in range(zjjx)]\n    A12 = [[A[i][j] for zrr in range(mid, n)] for moa in range(zjjx)]\n    A21 = [[A[i][j] for zrr in range(zjjx)] for moa in range(mid, n)]\n    A22 = [[A[i][j] for zrr in range(mid, n)] for moa in range(mid, n)]\n    B11 = [[B[i][j] for zrr in range(zjjx)] for moa in range(zjjx)]\n    B12 = [[B[i][j] for zrr in range(mid, n)] for moa in range(zjjx)]\n    B21 = [[B[i][j] for zrr in range(zjjx)] for moa in range(mid, n)]\n    B22 = [[B[i][j] for zrr in range(mid, n)] for moa in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for zrr in range(zjjx)] for moa in range(zjjx)], [[B11[i][j] + B22[i][j] for zrr in range(zjjx)] for moa in range(zjjx)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for zrr in range(zjjx)] for moa in range(zjjx)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for zrr in range(zjjx)] for moa in range(zjjx)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for zrr in range(zjjx)] for moa in range(zjjx)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for zrr in range(zjjx)] for moa in range(zjjx)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for zrr in range(zjjx)] for moa in range(zjjx)], [[B11[i][j] + B12[i][j] for zrr in range(zjjx)] for moa in range(zjjx)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for zrr in range(zjjx)] for moa in range(zjjx)], [[B21[i][j] + B22[i][j] for zrr in range(zjjx)] for moa in range(zjjx)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for zrr in range(zjjx)] for moa in range(zjjx)]\n    C12 = [[P3[i][j] + P5[i][j] for zrr in range(zjjx)] for moa in range(zjjx)]\n    C21 = [[P2[i][j] + P4[i][j] for zrr in range(zjjx)] for moa in range(zjjx)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for zrr in range(zjjx)] for moa in range(zjjx)]\n    C = [[0] * puj for _ in range(puj)]\n    for moa in range(zjjx):\n        for zrr in range(zjjx):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    vql = len(A)\n    if vql <= 1:\n        return [[A[0][0] * B[0][0]]]\n    wpor = vql // 2\n    A11 = [[A[i][j] for kly in range(wpor)] for ogt in range(wpor)]\n    A12 = [[A[i][j] for kly in range(mid, n)] for ogt in range(wpor)]\n    A21 = [[A[i][j] for kly in range(wpor)] for ogt in range(mid, n)]\n    A22 = [[A[i][j] for kly in range(mid, n)] for ogt in range(mid, n)]\n    B11 = [[B[i][j] for kly in range(wpor)] for ogt in range(wpor)]\n    B12 = [[B[i][j] for kly in range(mid, n)] for ogt in range(wpor)]\n    B21 = [[B[i][j] for kly in range(wpor)] for ogt in range(mid, n)]\n    B22 = [[B[i][j] for kly in range(mid, n)] for ogt in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for kly in range(wpor)] for ogt in range(wpor)], [[B11[i][j] + B22[i][j] for kly in range(wpor)] for ogt in range(wpor)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for kly in range(wpor)] for ogt in range(wpor)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for kly in range(wpor)] for ogt in range(wpor)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for kly in range(wpor)] for ogt in range(wpor)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for kly in range(wpor)] for ogt in range(wpor)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for kly in range(wpor)] for ogt in range(wpor)], [[B11[i][j] + B12[i][j] for kly in range(wpor)] for ogt in range(wpor)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for kly in range(wpor)] for ogt in range(wpor)], [[B21[i][j] + B22[i][j] for kly in range(wpor)] for ogt in range(wpor)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for kly in range(wpor)] for ogt in range(wpor)]\n    C12 = [[P3[i][j] + P5[i][j] for kly in range(wpor)] for ogt in range(wpor)]\n    C21 = [[P2[i][j] + P4[i][j] for kly in range(wpor)] for ogt in range(wpor)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for kly in range(wpor)] for ogt in range(wpor)]\n    C = [[0] * vql for _ in range(vql)]\n    for ogt in range(wpor):\n        for kly in range(wpor):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    wuz = len(A)\n    if wuz <= 1:\n        return [[A[0][0] * B[0][0]]]\n    bbuh = wuz // 2\n    A11 = [[A[i][j] for bsd in range(bbuh)] for wmo in range(bbuh)]\n    A12 = [[A[i][j] for bsd in range(mid, n)] for wmo in range(bbuh)]\n    A21 = [[A[i][j] for bsd in range(bbuh)] for wmo in range(mid, n)]\n    A22 = [[A[i][j] for bsd in range(mid, n)] for wmo in range(mid, n)]\n    B11 = [[B[i][j] for bsd in range(bbuh)] for wmo in range(bbuh)]\n    B12 = [[B[i][j] for bsd in range(mid, n)] for wmo in range(bbuh)]\n    B21 = [[B[i][j] for bsd in range(bbuh)] for wmo in range(mid, n)]\n    B22 = [[B[i][j] for bsd in range(mid, n)] for wmo in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for bsd in range(bbuh)] for wmo in range(bbuh)], [[B11[i][j] + B22[i][j] for bsd in range(bbuh)] for wmo in range(bbuh)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for bsd in range(bbuh)] for wmo in range(bbuh)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for bsd in range(bbuh)] for wmo in range(bbuh)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for bsd in range(bbuh)] for wmo in range(bbuh)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for bsd in range(bbuh)] for wmo in range(bbuh)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for bsd in range(bbuh)] for wmo in range(bbuh)], [[B11[i][j] + B12[i][j] for bsd in range(bbuh)] for wmo in range(bbuh)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for bsd in range(bbuh)] for wmo in range(bbuh)], [[B21[i][j] + B22[i][j] for bsd in range(bbuh)] for wmo in range(bbuh)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for bsd in range(bbuh)] for wmo in range(bbuh)]\n    C12 = [[P3[i][j] + P5[i][j] for bsd in range(bbuh)] for wmo in range(bbuh)]\n    C21 = [[P2[i][j] + P4[i][j] for bsd in range(bbuh)] for wmo in range(bbuh)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for bsd in range(bbuh)] for wmo in range(bbuh)]\n    C = [[0] * wuz for _ in range(wuz)]\n    for wmo in range(bbuh):\n        for bsd in range(bbuh):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    fcc = len(A)\n    if fcc <= 1:\n        return [[A[0][0] * B[0][0]]]\n    vjia = fcc // 2\n    A11 = [[A[i][j] for vxz in range(vjia)] for cqg in range(vjia)]\n    A12 = [[A[i][j] for vxz in range(mid, n)] for cqg in range(vjia)]\n    A21 = [[A[i][j] for vxz in range(vjia)] for cqg in range(mid, n)]\n    A22 = [[A[i][j] for vxz in range(mid, n)] for cqg in range(mid, n)]\n    B11 = [[B[i][j] for vxz in range(vjia)] for cqg in range(vjia)]\n    B12 = [[B[i][j] for vxz in range(mid, n)] for cqg in range(vjia)]\n    B21 = [[B[i][j] for vxz in range(vjia)] for cqg in range(mid, n)]\n    B22 = [[B[i][j] for vxz in range(mid, n)] for cqg in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for vxz in range(vjia)] for cqg in range(vjia)], [[B11[i][j] + B22[i][j] for vxz in range(vjia)] for cqg in range(vjia)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for vxz in range(vjia)] for cqg in range(vjia)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for vxz in range(vjia)] for cqg in range(vjia)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for vxz in range(vjia)] for cqg in range(vjia)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for vxz in range(vjia)] for cqg in range(vjia)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for vxz in range(vjia)] for cqg in range(vjia)], [[B11[i][j] + B12[i][j] for vxz in range(vjia)] for cqg in range(vjia)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for vxz in range(vjia)] for cqg in range(vjia)], [[B21[i][j] + B22[i][j] for vxz in range(vjia)] for cqg in range(vjia)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for vxz in range(vjia)] for cqg in range(vjia)]\n    C12 = [[P3[i][j] + P5[i][j] for vxz in range(vjia)] for cqg in range(vjia)]\n    C21 = [[P2[i][j] + P4[i][j] for vxz in range(vjia)] for cqg in range(vjia)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for vxz in range(vjia)] for cqg in range(vjia)]\n    C = [[0] * fcc for _ in range(fcc)]\n    for cqg in range(vjia):\n        for vxz in range(vjia):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    twx = len(A)\n    if twx <= 1:\n        return [[A[0][0] * B[0][0]]]\n    lubv = twx // 2\n    A11 = [[A[i][j] for nzk in range(lubv)] for sqm in range(lubv)]\n    A12 = [[A[i][j] for nzk in range(mid, n)] for sqm in range(lubv)]\n    A21 = [[A[i][j] for nzk in range(lubv)] for sqm in range(mid, n)]\n    A22 = [[A[i][j] for nzk in range(mid, n)] for sqm in range(mid, n)]\n    B11 = [[B[i][j] for nzk in range(lubv)] for sqm in range(lubv)]\n    B12 = [[B[i][j] for nzk in range(mid, n)] for sqm in range(lubv)]\n    B21 = [[B[i][j] for nzk in range(lubv)] for sqm in range(mid, n)]\n    B22 = [[B[i][j] for nzk in range(mid, n)] for sqm in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for nzk in range(lubv)] for sqm in range(lubv)], [[B11[i][j] + B22[i][j] for nzk in range(lubv)] for sqm in range(lubv)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for nzk in range(lubv)] for sqm in range(lubv)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for nzk in range(lubv)] for sqm in range(lubv)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for nzk in range(lubv)] for sqm in range(lubv)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for nzk in range(lubv)] for sqm in range(lubv)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for nzk in range(lubv)] for sqm in range(lubv)], [[B11[i][j] + B12[i][j] for nzk in range(lubv)] for sqm in range(lubv)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for nzk in range(lubv)] for sqm in range(lubv)], [[B21[i][j] + B22[i][j] for nzk in range(lubv)] for sqm in range(lubv)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for nzk in range(lubv)] for sqm in range(lubv)]\n    C12 = [[P3[i][j] + P5[i][j] for nzk in range(lubv)] for sqm in range(lubv)]\n    C21 = [[P2[i][j] + P4[i][j] for nzk in range(lubv)] for sqm in range(lubv)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for nzk in range(lubv)] for sqm in range(lubv)]\n    C = [[0] * twx for _ in range(twx)]\n    for sqm in range(lubv):\n        for nzk in range(lubv):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    ipm = len(A)\n    if ipm <= 1:\n        return [[A[0][0] * B[0][0]]]\n    okpr = ipm // 2\n    A11 = [[A[i][j] for rht in range(okpr)] for tnt in range(okpr)]\n    A12 = [[A[i][j] for rht in range(mid, n)] for tnt in range(okpr)]\n    A21 = [[A[i][j] for rht in range(okpr)] for tnt in range(mid, n)]\n    A22 = [[A[i][j] for rht in range(mid, n)] for tnt in range(mid, n)]\n    B11 = [[B[i][j] for rht in range(okpr)] for tnt in range(okpr)]\n    B12 = [[B[i][j] for rht in range(mid, n)] for tnt in range(okpr)]\n    B21 = [[B[i][j] for rht in range(okpr)] for tnt in range(mid, n)]\n    B22 = [[B[i][j] for rht in range(mid, n)] for tnt in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for rht in range(okpr)] for tnt in range(okpr)], [[B11[i][j] + B22[i][j] for rht in range(okpr)] for tnt in range(okpr)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for rht in range(okpr)] for tnt in range(okpr)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for rht in range(okpr)] for tnt in range(okpr)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for rht in range(okpr)] for tnt in range(okpr)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for rht in range(okpr)] for tnt in range(okpr)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for rht in range(okpr)] for tnt in range(okpr)], [[B11[i][j] + B12[i][j] for rht in range(okpr)] for tnt in range(okpr)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for rht in range(okpr)] for tnt in range(okpr)], [[B21[i][j] + B22[i][j] for rht in range(okpr)] for tnt in range(okpr)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for rht in range(okpr)] for tnt in range(okpr)]\n    C12 = [[P3[i][j] + P5[i][j] for rht in range(okpr)] for tnt in range(okpr)]\n    C21 = [[P2[i][j] + P4[i][j] for rht in range(okpr)] for tnt in range(okpr)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for rht in range(okpr)] for tnt in range(okpr)]\n    C = [[0] * ipm for _ in range(ipm)]\n    for tnt in range(okpr):\n        for rht in range(okpr):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    khg = len(A)\n    if khg <= 1:\n        return [[A[0][0] * B[0][0]]]\n    jyyy = khg // 2\n    A11 = [[A[i][j] for qpa in range(jyyy)] for sgr in range(jyyy)]\n    A12 = [[A[i][j] for qpa in range(mid, n)] for sgr in range(jyyy)]\n    A21 = [[A[i][j] for qpa in range(jyyy)] for sgr in range(mid, n)]\n    A22 = [[A[i][j] for qpa in range(mid, n)] for sgr in range(mid, n)]\n    B11 = [[B[i][j] for qpa in range(jyyy)] for sgr in range(jyyy)]\n    B12 = [[B[i][j] for qpa in range(mid, n)] for sgr in range(jyyy)]\n    B21 = [[B[i][j] for qpa in range(jyyy)] for sgr in range(mid, n)]\n    B22 = [[B[i][j] for qpa in range(mid, n)] for sgr in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for qpa in range(jyyy)] for sgr in range(jyyy)], [[B11[i][j] + B22[i][j] for qpa in range(jyyy)] for sgr in range(jyyy)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for qpa in range(jyyy)] for sgr in range(jyyy)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for qpa in range(jyyy)] for sgr in range(jyyy)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for qpa in range(jyyy)] for sgr in range(jyyy)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for qpa in range(jyyy)] for sgr in range(jyyy)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for qpa in range(jyyy)] for sgr in range(jyyy)], [[B11[i][j] + B12[i][j] for qpa in range(jyyy)] for sgr in range(jyyy)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for qpa in range(jyyy)] for sgr in range(jyyy)], [[B21[i][j] + B22[i][j] for qpa in range(jyyy)] for sgr in range(jyyy)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for qpa in range(jyyy)] for sgr in range(jyyy)]\n    C12 = [[P3[i][j] + P5[i][j] for qpa in range(jyyy)] for sgr in range(jyyy)]\n    C21 = [[P2[i][j] + P4[i][j] for qpa in range(jyyy)] for sgr in range(jyyy)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for qpa in range(jyyy)] for sgr in range(jyyy)]\n    C = [[0] * khg for _ in range(khg)]\n    for sgr in range(jyyy):\n        for qpa in range(jyyy):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    pjq = len(A)\n    if pjq <= 1:\n        return [[A[0][0] * B[0][0]]]\n    qgus = pjq // 2\n    A11 = [[A[i][j] for xxa in range(qgus)] for nxf in range(qgus)]\n    A12 = [[A[i][j] for xxa in range(mid, n)] for nxf in range(qgus)]\n    A21 = [[A[i][j] for xxa in range(qgus)] for nxf in range(mid, n)]\n    A22 = [[A[i][j] for xxa in range(mid, n)] for nxf in range(mid, n)]\n    B11 = [[B[i][j] for xxa in range(qgus)] for nxf in range(qgus)]\n    B12 = [[B[i][j] for xxa in range(mid, n)] for nxf in range(qgus)]\n    B21 = [[B[i][j] for xxa in range(qgus)] for nxf in range(mid, n)]\n    B22 = [[B[i][j] for xxa in range(mid, n)] for nxf in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for xxa in range(qgus)] for nxf in range(qgus)], [[B11[i][j] + B22[i][j] for xxa in range(qgus)] for nxf in range(qgus)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for xxa in range(qgus)] for nxf in range(qgus)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for xxa in range(qgus)] for nxf in range(qgus)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for xxa in range(qgus)] for nxf in range(qgus)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for xxa in range(qgus)] for nxf in range(qgus)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for xxa in range(qgus)] for nxf in range(qgus)], [[B11[i][j] + B12[i][j] for xxa in range(qgus)] for nxf in range(qgus)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for xxa in range(qgus)] for nxf in range(qgus)], [[B21[i][j] + B22[i][j] for xxa in range(qgus)] for nxf in range(qgus)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for xxa in range(qgus)] for nxf in range(qgus)]\n    C12 = [[P3[i][j] + P5[i][j] for xxa in range(qgus)] for nxf in range(qgus)]\n    C21 = [[P2[i][j] + P4[i][j] for xxa in range(qgus)] for nxf in range(qgus)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for xxa in range(qgus)] for nxf in range(qgus)]\n    C = [[0] * pjq for _ in range(pjq)]\n    for nxf in range(qgus):\n        for xxa in range(qgus):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def strassen_matrix(A, B):\n    okd = len(A)\n    if okd <= 1:\n        return [[A[0][0] * B[0][0]]]\n    tusd = okd // 2\n    A11 = [[A[i][j] for rgu in range(tusd)] for tss in range(tusd)]\n    A12 = [[A[i][j] for rgu in range(mid, n)] for tss in range(tusd)]\n    A21 = [[A[i][j] for rgu in range(tusd)] for tss in range(mid, n)]\n    A22 = [[A[i][j] for rgu in range(mid, n)] for tss in range(mid, n)]\n    B11 = [[B[i][j] for rgu in range(tusd)] for tss in range(tusd)]\n    B12 = [[B[i][j] for rgu in range(mid, n)] for tss in range(tusd)]\n    B21 = [[B[i][j] for rgu in range(tusd)] for tss in range(mid, n)]\n    B22 = [[B[i][j] for rgu in range(mid, n)] for tss in range(mid, n)]\n    P1 = strassen_matrix([[A11[i][j] + A22[i][j] for rgu in range(tusd)] for tss in range(tusd)], [[B11[i][j] + B22[i][j] for rgu in range(tusd)] for tss in range(tusd)])\n    P2 = strassen_matrix([[A21[i][j] + A22[i][j] for rgu in range(tusd)] for tss in range(tusd)], B11)\n    P3 = strassen_matrix(A11, [[B12[i][j] - B22[i][j] for rgu in range(tusd)] for tss in range(tusd)])\n    P4 = strassen_matrix(A22, [[B21[i][j] - B11[i][j] for rgu in range(tusd)] for tss in range(tusd)])\n    P5 = strassen_matrix([[A11[i][j] + A12[i][j] for rgu in range(tusd)] for tss in range(tusd)], B22)\n    P6 = strassen_matrix([[A21[i][j] - A11[i][j] for rgu in range(tusd)] for tss in range(tusd)], [[B11[i][j] + B12[i][j] for rgu in range(tusd)] for tss in range(tusd)])\n    P7 = strassen_matrix([[A12[i][j] - A22[i][j] for rgu in range(tusd)] for tss in range(tusd)], [[B21[i][j] + B22[i][j] for rgu in range(tusd)] for tss in range(tusd)])\n    C11 = [[P1[i][j] + P4[i][j] - P5[i][j] + P7[i][j] for rgu in range(tusd)] for tss in range(tusd)]\n    C12 = [[P3[i][j] + P5[i][j] for rgu in range(tusd)] for tss in range(tusd)]\n    C21 = [[P2[i][j] + P4[i][j] for rgu in range(tusd)] for tss in range(tusd)]\n    C22 = [[P1[i][j] - P2[i][j] + P3[i][j] + P6[i][j] for rgu in range(tusd)] for tss in range(tusd)]\n    C = [[0] * okd for _ in range(okd)]\n    for tss in range(tusd):\n        for rgu in range(tusd):\n            C[i][j] = C11[i][j]\n            C[i][j + mid] = C12[i][j]\n            C[i + mid][j] = C21[i][j]\n            C[i + mid][j + mid] = C22[i][j]\n    return C\n",
    "O": "O(n^2.807)",
    "\u03a9": "\u03a9(n^2.807)",
    "\u0398": "\u0398(n^2.807)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    n = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    oia = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for ekq in range(1, m + 1):\n        for eml in range(1, oia + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    slw = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for imb in range(1, m + 1):\n        for rsf in range(1, slw + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    sse = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for gxp in range(1, m + 1):\n        for vlj in range(1, sse + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    ead = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for whj in range(1, m + 1):\n        for kki in range(1, ead + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    zoj = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for okc in range(1, m + 1):\n        for vap in range(1, zoj + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    xub = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for frz in range(1, m + 1):\n        for rdu in range(1, xub + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    wbt = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for twb in range(1, m + 1):\n        for uxb in range(1, wbt + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    ewd = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for jme in range(1, m + 1):\n        for omr in range(1, ewd + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    ljb = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for zvy in range(1, m + 1):\n        for fns in range(1, ljb + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    aoi = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for lpy in range(1, m + 1):\n        for hhi in range(1, aoi + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    zrh = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for pdq in range(1, m + 1):\n        for qjp in range(1, zrh + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    chl = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for kue in range(1, m + 1):\n        for qtq in range(1, chl + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    afp = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for fzc in range(1, m + 1):\n        for qyc in range(1, afp + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    lgc = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for zal in range(1, m + 1):\n        for vdx in range(1, lgc + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    gkw = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for bdr in range(1, m + 1):\n        for hgw in range(1, gkw + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    wfm = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for jch in range(1, m + 1):\n        for osc in range(1, wfm + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    pzg = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for xmk in range(1, m + 1):\n        for gfg in range(1, pzg + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    zns = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for qxs in range(1, m + 1):\n        for xvx in range(1, zns + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    dhw = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for tsr in range(1, m + 1):\n        for olw in range(1, dhw + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    fqp = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for rhz in range(1, m + 1):\n        for hix in range(1, fqp + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    yhm = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for tnj in range(1, m + 1):\n        for owy in range(1, yhm + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    pur = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for urr in range(1, m + 1):\n        for edc in range(1, pur + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    mdn = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for icb in range(1, m + 1):\n        for kei in range(1, mdn + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    ogw = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for vhc in range(1, m + 1):\n        for cro in range(1, ogw + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    ewp = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for zso in range(1, m + 1):\n        for gmn in range(1, ewp + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    sbd = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for cgt in range(1, m + 1):\n        for moz in range(1, sbd + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    qoe = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for jxi in range(1, m + 1):\n        for wuf in range(1, qoe + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    hwu = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for erj in range(1, m + 1):\n        for mao in range(1, hwu + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    pea = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for ukq in range(1, m + 1):\n        for ruv in range(1, pea + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    pmn = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for ylq in range(1, m + 1):\n        for iyy in range(1, pmn + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    zty = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for gcl in range(1, m + 1):\n        for syb in range(1, zty + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    fzy = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for vws in range(1, m + 1):\n        for mhy in range(1, fzy + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    pvw = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for cfs in range(1, m + 1):\n        for gyt in range(1, pvw + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    xtx = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for pdw in range(1, m + 1):\n        for akf in range(1, xtx + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    znb = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for vtw in range(1, m + 1):\n        for neh in range(1, znb + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    cua = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for dll in range(1, m + 1):\n        for bie in range(1, cua + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    yfd = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for vph in range(1, m + 1):\n        for ggx in range(1, yfd + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    vmh = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for bfe in range(1, m + 1):\n        for cpe in range(1, vmh + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    nfv = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for ltj in range(1, m + 1):\n        for pxb in range(1, nfv + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    hho = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for igd in range(1, m + 1):\n        for hlm in range(1, hho + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    wrg = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for mnr in range(1, m + 1):\n        for jfq in range(1, wrg + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    azu = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for hav in range(1, m + 1):\n        for ijf in range(1, azu + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    ggi = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for oap in range(1, m + 1):\n        for tln in range(1, ggi + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    vtk = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for iah in range(1, m + 1):\n        for wav in range(1, vtk + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    hvm = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for zxp in range(1, m + 1):\n        for yvt in range(1, hvm + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    jnc = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for hun in range(1, m + 1):\n        for txk in range(1, jnc + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    ztv = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for fkx in range(1, m + 1):\n        for mhb in range(1, ztv + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    eqj = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for vui in range(1, m + 1):\n        for mig in range(1, eqj + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    sbp = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for jrf in range(1, m + 1):\n        for vwi in range(1, sbp + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    hig = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for iys in range(1, m + 1):\n        for jup in range(1, hig + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    ebv = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for hvt in range(1, m + 1):\n        for zjr in range(1, ebv + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    dwy = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for qvz in range(1, m + 1):\n        for uei in range(1, dwy + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    kae = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for nls in range(1, m + 1):\n        for epk in range(1, kae + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    czn = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for slc in range(1, m + 1):\n        for pqs in range(1, czn + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    abx = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for wbu in range(1, m + 1):\n        for nvv in range(1, abx + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    dcx = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for ybh in range(1, m + 1):\n        for res in range(1, dcx + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    lxo = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for cqt in range(1, m + 1):\n        for hhk in range(1, lxo + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    ybp = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for ytk in range(1, m + 1):\n        for mrx in range(1, ybp + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    ota = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for jyt in range(1, m + 1):\n        for zuq in range(1, ota + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    cbf = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for buz in range(1, m + 1):\n        for uey in range(1, cbf + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    dqs = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for skx in range(1, m + 1):\n        for dui in range(1, dqs + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    lgu = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for rqr in range(1, m + 1):\n        for cez in range(1, lgu + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    cft = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for nbo in range(1, m + 1):\n        for cls in range(1, cft + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    ahz = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for acd in range(1, m + 1):\n        for wen in range(1, ahz + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    yrv = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for otr in range(1, m + 1):\n        for kzg in range(1, yrv + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    nsu = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for rci in range(1, m + 1):\n        for imc in range(1, nsu + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    yoc = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for rvn in range(1, m + 1):\n        for kvu in range(1, yoc + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    kea = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for zzg in range(1, m + 1):\n        for kph in range(1, kea + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    csh = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for wjh in range(1, m + 1):\n        for cmm in range(1, csh + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    cpz = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for xbh in range(1, m + 1):\n        for xyc in range(1, cpz + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    svi = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for xci in range(1, m + 1):\n        for kts in range(1, svi + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    pni = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for nda in range(1, m + 1):\n        for qcm in range(1, pni + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    fvk = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for xkx in range(1, m + 1):\n        for pyk in range(1, fvk + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    caf = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for mdt in range(1, m + 1):\n        for lfs in range(1, caf + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    tin = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for stc in range(1, m + 1):\n        for zoj in range(1, tin + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    njt = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for zay in range(1, m + 1):\n        for ayi in range(1, njt + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    apo = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for umh in range(1, m + 1):\n        for flf in range(1, apo + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    hbg = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for ncw in range(1, m + 1):\n        for abh in range(1, hbg + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    uxr = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for mft in range(1, m + 1):\n        for spl in range(1, uxr + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    dmz = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for sse in range(1, m + 1):\n        for wzr in range(1, dmz + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    eyp = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for ooq in range(1, m + 1):\n        for mnv in range(1, eyp + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    npf = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for tew in range(1, m + 1):\n        for xus in range(1, npf + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    vcq = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for xie in range(1, m + 1):\n        for ihe in range(1, vcq + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    mgp = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for vqq in range(1, m + 1):\n        for ukq in range(1, mgp + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    pyf = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for ukg in range(1, m + 1):\n        for zxm in range(1, pyf + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    jwi = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for wug in range(1, m + 1):\n        for vfs in range(1, jwi + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    kud = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for tkd in range(1, m + 1):\n        for hnp in range(1, kud + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    buc = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for thl in range(1, m + 1):\n        for zmm in range(1, buc + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    diq = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for mqi in range(1, m + 1):\n        for qhm in range(1, diq + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    nni = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for rny in range(1, m + 1):\n        for fwo in range(1, nni + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    qfv = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for hwl in range(1, m + 1):\n        for zcs in range(1, qfv + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    ufq = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for lvy in range(1, m + 1):\n        for qda in range(1, ufq + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    eat = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for oyd in range(1, m + 1):\n        for vwv in range(1, eat + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    oqf = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for xgl in range(1, m + 1):\n        for bal in range(1, oqf + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    ugl = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for srr in range(1, m + 1):\n        for sio in range(1, ugl + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    fgr = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for pda in range(1, m + 1):\n        for ray in range(1, fgr + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    uzf = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for jbl in range(1, m + 1):\n        for ayq in range(1, uzf + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    cwr = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for stu in range(1, m + 1):\n        for ynf in range(1, cwr + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    jxl = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for fmk in range(1, m + 1):\n        for pig in range(1, jxl + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    byq = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for erb in range(1, m + 1):\n        for yfw in range(1, byq + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    oij = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for hvl in range(1, m + 1):\n        for qqu in range(1, oij + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    ron = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for roa in range(1, m + 1):\n        for hzj in range(1, ron + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    est = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for xrl in range(1, m + 1):\n        for qix in range(1, est + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    shm = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for yjz in range(1, m + 1):\n        for odc in range(1, shm + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    arn = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for rqz in range(1, m + 1):\n        for nzv in range(1, arn + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    rsd = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for irb in range(1, m + 1):\n        for szd in range(1, rsd + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    fiy = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for fdt in range(1, m + 1):\n        for nwi in range(1, fiy + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    hrl = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for zlp in range(1, m + 1):\n        for czy in range(1, hrl + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    pfa = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for ubh in range(1, m + 1):\n        for azy in range(1, pfa + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    wui = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for rmt in range(1, m + 1):\n        for lep in range(1, wui + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    aqv = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for qmd in range(1, m + 1):\n        for fia in range(1, aqv + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    vse = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for hls in range(1, m + 1):\n        for gfa in range(1, vse + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    mnz = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for cmt in range(1, m + 1):\n        for cay in range(1, mnz + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    kvn = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for crr in range(1, m + 1):\n        for gqm in range(1, kvn + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    ymz = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for unu in range(1, m + 1):\n        for atc in range(1, ymz + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    hjc = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for mpl in range(1, m + 1):\n        for ixd in range(1, hjc + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    hoh = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for ygp in range(1, m + 1):\n        for iug in range(1, hoh + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    rdt = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for vwx in range(1, m + 1):\n        for zmh in range(1, rdt + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    rfq = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for qzf in range(1, m + 1):\n        for ufw in range(1, rfq + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    mnq = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for aai in range(1, m + 1):\n        for ihq in range(1, mnq + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    pnk = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for kzd in range(1, m + 1):\n        for iba in range(1, pnk + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    nde = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for dgt in range(1, m + 1):\n        for fwy in range(1, nde + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    bvv = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for cme in range(1, m + 1):\n        for nfs in range(1, bvv + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    vjw = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for zqv in range(1, m + 1):\n        for tnh in range(1, vjw + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    bkp = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for ewi in range(1, m + 1):\n        for zle in range(1, bkp + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    zrc = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for ntn in range(1, m + 1):\n        for ouy in range(1, zrc + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    zhn = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for ghy in range(1, m + 1):\n        for zbx in range(1, zhn + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    tam = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for cfl in range(1, m + 1):\n        for lhu in range(1, tam + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    pkc = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for spp in range(1, m + 1):\n        for vgw in range(1, pkc + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    sxh = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for gcq in range(1, m + 1):\n        for kko in range(1, sxh + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    ogs = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for kux in range(1, m + 1):\n        for zwm in range(1, ogs + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    sfd = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for cpz in range(1, m + 1):\n        for rok in range(1, sfd + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  },
  {
    "code": "def lcs(X, Y):\n    m = len(X)\n    xkz = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for bod in range(1, m + 1):\n        for dzc in range(1, xkz + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n",
    "O": "O(nm)",
    "\u03a9": "\u03a9(nm)",
    "\u0398": "\u0398(nm)"
  }
]